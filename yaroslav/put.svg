<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="757"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="757"> </text>
<g id="frames">
<g>
<title>all (16,238 samples, 100.00%)</title><rect x="10.0" y="723.0" width="1180.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.0" y="734.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=40707] (4,053 samples, 24.96%)</title><rect x="10.1" y="707.0" width="294.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.1" y="718.0">[NIO Selector #0 tid=40707]</text>
</g>
<g>
<title>[unknown_Java] (10 samples, 0.06%)</title><rect x="10.2" y="691.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.2" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (4,033 samples, 24.84%)</title><rect x="10.9" y="691.0" width="293.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.9" y="702.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,156 samples, 7.12%)</title><rect x="11.2" y="675.0" width="84.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.2" y="686.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.02%)</title><rect x="11.4" y="659.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.4" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,145 samples, 7.05%)</title><rect x="11.8" y="659.0" width="83.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.8" y="670.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,145 samples, 7.05%)</title><rect x="11.8" y="643.0" width="83.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.8" y="654.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,145 samples, 7.05%)</title><rect x="11.8" y="627.0" width="83.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.8" y="638.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,120 samples, 6.90%)</title><rect x="12.0" y="611.0" width="81.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.0" y="622.0">sun/nio/c..</text>
</g>
<g>
<title>kevent (1,084 samples, 6.68%)</title><rect x="14.7" y="595.0" width="78.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="17.7" y="606.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.04%)</title><rect x="93.4" y="611.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.03%)</title><rect x="93.5" y="595.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.03%)</title><rect x="93.5" y="579.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.03%)</title><rect x="93.5" y="563.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.03%)</title><rect x="93.5" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (12 samples, 0.07%)</title><rect x="93.9" y="611.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.9" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,871 samples, 17.68%)</title><rect x="95.2" y="675.0" width="208.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.2" y="686.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,870 samples, 17.67%)</title><rect x="95.3" y="659.0" width="208.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.3" y="670.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,736 samples, 16.85%)</title><rect x="95.4" y="643.0" width="198.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.4" y="654.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,672 samples, 16.46%)</title><rect x="96.3" y="627.0" width="194.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.3" y="638.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,670 samples, 16.44%)</title><rect x="96.5" y="611.0" width="194.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.5" y="622.0">one/nio/http/HttpServer.h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,638 samples, 16.25%)</title><rect x="96.5" y="595.0" width="191.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.5" y="606.0">RequestHandler1_entity.ha..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (504 samples, 3.10%)</title><rect x="96.5" y="579.0" width="36.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.5" y="590.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (498 samples, 3.07%)</title><rect x="96.5" y="563.0" width="36.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.5" y="574.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (20 samples, 0.12%)</title><rect x="96.5" y="547.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (478 samples, 2.94%)</title><rect x="97.9" y="547.0" width="34.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.9" y="558.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (478 samples, 2.94%)</title><rect x="97.9" y="531.0" width="34.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.9" y="542.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (477 samples, 2.94%)</title><rect x="98.0" y="515.0" width="34.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.0" y="526.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (477 samples, 2.94%)</title><rect x="98.0" y="499.0" width="34.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.0" y="510.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (476 samples, 2.93%)</title><rect x="98.1" y="483.0" width="34.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.1" y="494.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (476 samples, 2.93%)</title><rect x="98.1" y="467.0" width="34.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.1" y="478.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (473 samples, 2.91%)</title><rect x="98.3" y="451.0" width="34.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.3" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (473 samples, 2.91%)</title><rect x="98.3" y="435.0" width="34.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="101.3" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (6 samples, 0.04%)</title><rect x="98.3" y="419.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (467 samples, 2.88%)</title><rect x="98.7" y="419.0" width="34.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.7" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (457 samples, 2.81%)</title><rect x="99.5" y="403.0" width="33.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.5" y="414.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.03%)</title><rect x="101.1" y="387.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="104.1" y="398.0"></text>
</g>
<g>
<title>write (426 samples, 2.62%)</title><rect x="101.7" y="387.0" width="31.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="104.7" y="398.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.04%)</title><rect x="132.7" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="135.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.03%)</title><rect x="132.7" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.06%)</title><rect x="133.1" y="579.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="136.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.03%)</title><rect x="133.3" y="563.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="136.3" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.03%)</title><rect x="133.3" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="136.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (2,125 samples, 13.09%)</title><rect x="133.8" y="579.0" width="154.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.8" y="590.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.put (2,116 samples, 13.03%)</title><rect x="134.4" y="563.0" width="153.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.4" y="574.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.03%)</title><rect x="134.4" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="137.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.03%)</title><rect x="134.4" y="531.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.4" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="134.5" y="515.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.5" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="134.5" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="137.5" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="134.5" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (2,108 samples, 12.98%)</title><rect x="135.0" y="547.0" width="153.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.0" y="558.0">ru/mail/polis/dao/D..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,085 samples, 12.84%)</title><rect x="135.1" y="531.0" width="151.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="138.1" y="542.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,085 samples, 12.84%)</title><rect x="135.1" y="515.0" width="151.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="138.1" y="526.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,069 samples, 12.74%)</title><rect x="136.3" y="499.0" width="150.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="139.3" y="510.0">Java_org_rocksdb_Ro..</text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.02%)</title><rect x="137.1" y="483.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="140.1" y="494.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,054 samples, 12.65%)</title><rect x="137.4" y="483.0" width="149.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="140.4" y="494.0">rocksdb_put_helper(..</text>
</g>
<g>
<title>free_tiny (8 samples, 0.05%)</title><rect x="138.8" y="467.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="141.8" y="478.0"></text>
</g>
<g>
<title>tiny_free_no_lock (6 samples, 0.04%)</title><rect x="138.9" y="451.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="141.9" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.04%)</title><rect x="139.4" y="467.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="142.4" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.02%)</title><rect x="139.6" y="451.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="142.6" y="462.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (24 samples, 0.15%)</title><rect x="139.9" y="467.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="142.9" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (14 samples, 0.09%)</title><rect x="140.4" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="143.4" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (13 samples, 0.08%)</title><rect x="140.5" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="143.5" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (11 samples, 0.07%)</title><rect x="140.7" y="419.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="143.7" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.05%)</title><rect x="140.9" y="403.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="143.9" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.04%)</title><rect x="140.9" y="387.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="143.9" y="398.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (4 samples, 0.02%)</title><rect x="140.9" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="143.9" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (13 samples, 0.08%)</title><rect x="141.7" y="467.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="144.7" y="478.0"></text>
</g>
<g>
<title>malloc (12 samples, 0.07%)</title><rect x="141.7" y="451.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="144.7" y="462.0"></text>
</g>
<g>
<title>malloc_zone_malloc (10 samples, 0.06%)</title><rect x="141.8" y="435.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="144.8" y="446.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.03%)</title><rect x="142.2" y="419.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="145.2" y="430.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.03%)</title><rect x="142.2" y="403.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="145.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,979 samples, 12.19%)</title><rect x="142.6" y="467.0" width="143.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="145.6" y="478.0">rocksdb::Compacted..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,976 samples, 12.17%)</title><rect x="142.8" y="451.0" width="143.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="145.8" y="462.0">rocksdb::DBImpl::P..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,970 samples, 12.13%)</title><rect x="142.8" y="435.0" width="143.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="145.8" y="446.0">rocksdb::DB::Put(r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,911 samples, 11.77%)</title><rect x="143.1" y="419.0" width="138.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="146.1" y="430.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,904 samples, 11.73%)</title><rect x="143.3" y="403.0" width="138.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="146.3" y="414.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (351 samples, 2.16%)</title><rect x="146.9" y="387.0" width="25.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="149.9" y="398.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (345 samples, 2.12%)</title><rect x="147.2" y="371.0" width="25.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="150.2" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (345 samples, 2.12%)</title><rect x="147.2" y="355.0" width="25.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="150.2" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (8 samples, 0.05%)</title><rect x="147.3" y="339.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="150.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (336 samples, 2.07%)</title><rect x="147.9" y="339.0" width="24.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="150.9" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.03%)</title><rect x="148.8" y="323.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="151.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (318 samples, 1.96%)</title><rect x="149.2" y="323.0" width="23.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="152.2" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (310 samples, 1.91%)</title><rect x="149.7" y="307.0" width="22.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="152.7" y="318.0">r..</text>
</g>
<g>
<title>write (307 samples, 1.89%)</title><rect x="150.0" y="291.0" width="22.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="153.0" y="302.0">w..</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (6 samples, 0.04%)</title><rect x="172.6" y="387.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="175.6" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.02%)</title><rect x="172.7" y="371.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="175.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (105 samples, 0.65%)</title><rect x="173.2" y="387.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="176.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (99 samples, 0.61%)</title><rect x="173.7" y="371.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="176.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (94 samples, 0.58%)</title><rect x="174.0" y="355.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="177.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (93 samples, 0.57%)</title><rect x="174.1" y="339.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="177.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (81 samples, 0.50%)</title><rect x="174.6" y="323.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="177.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (74 samples, 0.46%)</title><rect x="175.1" y="307.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="178.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (29 samples, 0.18%)</title><rect x="178.0" y="291.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="181.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (14 samples, 0.09%)</title><rect x="179.1" y="275.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="182.1" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.04%)</title><rect x="179.6" y="259.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="182.6" y="270.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.02%)</title><rect x="180.2" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="183.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (70 samples, 0.43%)</title><rect x="180.8" y="387.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="183.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (62 samples, 0.38%)</title><rect x="181.4" y="371.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="184.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (59 samples, 0.36%)</title><rect x="181.6" y="355.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="184.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (53 samples, 0.33%)</title><rect x="182.1" y="339.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="185.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (42 samples, 0.26%)</title><rect x="182.7" y="323.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="185.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (36 samples, 0.22%)</title><rect x="183.2" y="307.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="186.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (32 samples, 0.20%)</title><rect x="183.5" y="291.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="186.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (14 samples, 0.09%)</title><rect x="184.8" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="187.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.05%)</title><rect x="185.1" y="259.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="188.1" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.04%)</title><rect x="185.2" y="243.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="188.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (825 samples, 5.08%)</title><rect x="186.4" y="387.0" width="59.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="189.4" y="398.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (822 samples, 5.06%)</title><rect x="186.6" y="371.0" width="59.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="189.6" y="382.0">rocksd..</text>
</g>
<g>
<title>xdrrec_ops (800 samples, 4.93%)</title><rect x="188.2" y="355.0" width="58.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="191.2" y="366.0">xdrrec..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (11 samples, 0.07%)</title><rect x="246.5" y="387.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="249.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (9 samples, 0.06%)</title><rect x="246.6" y="371.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="249.6" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.06%)</title><rect x="246.6" y="355.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="249.6" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.06%)</title><rect x="246.6" y="339.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="249.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (21 samples, 0.13%)</title><rect x="247.3" y="387.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="250.3" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (14 samples, 0.09%)</title><rect x="247.6" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="250.6" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.09%)</title><rect x="247.6" y="355.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="250.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (413 samples, 2.54%)</title><rect x="248.9" y="387.0" width="30.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="251.9" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (409 samples, 2.52%)</title><rect x="249.0" y="371.0" width="29.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="252.0" y="382.0">ro..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (249 samples, 1.53%)</title><rect x="251.4" y="355.0" width="18.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="254.4" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (233 samples, 1.43%)</title><rect x="251.4" y="339.0" width="16.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="254.4" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (11 samples, 0.07%)</title><rect x="268.3" y="339.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="271.3" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.02%)</title><rect x="268.8" y="323.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="271.8" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.02%)</title><rect x="268.8" y="307.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="271.8" y="318.0"></text>
</g>
<g>
<title>xdrrec_ops (124 samples, 0.76%)</title><rect x="269.7" y="355.0" width="9.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="272.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (25 samples, 0.15%)</title><rect x="278.9" y="387.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="281.9" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (22 samples, 0.14%)</title><rect x="278.9" y="371.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="281.9" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (22 samples, 0.14%)</title><rect x="278.9" y="355.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="281.9" y="366.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (7 samples, 0.04%)</title><rect x="281.1" y="387.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="284.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (12 samples, 0.07%)</title><rect x="282.0" y="419.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="285.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.04%)</title><rect x="282.1" y="403.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="285.1" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.02%)</title><rect x="282.4" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="285.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (22 samples, 0.14%)</title><rect x="282.9" y="419.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="285.9" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (13 samples, 0.08%)</title><rect x="283.2" y="403.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="286.2" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (11 samples, 0.07%)</title><rect x="283.4" y="387.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="286.4" y="398.0"></text>
</g>
<g>
<title>malloc (11 samples, 0.07%)</title><rect x="283.4" y="371.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="286.4" y="382.0"></text>
</g>
<g>
<title>malloc_zone_malloc (10 samples, 0.06%)</title><rect x="283.5" y="355.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="286.5" y="366.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (10 samples, 0.06%)</title><rect x="283.5" y="339.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="286.5" y="350.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (10 samples, 0.06%)</title><rect x="283.5" y="323.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="286.5" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (5 samples, 0.03%)</title><rect x="283.8" y="307.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="286.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (14 samples, 0.09%)</title><rect x="284.5" y="419.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="287.5" y="430.0"></text>
</g>
<g>
<title>free_tiny (8 samples, 0.05%)</title><rect x="284.8" y="403.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="287.8" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.03%)</title><rect x="285.5" y="419.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="288.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (11 samples, 0.07%)</title><rect x="286.7" y="531.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (10 samples, 0.06%)</title><rect x="286.7" y="515.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.03%)</title><rect x="286.9" y="499.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="287.0" y="483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (10 samples, 0.06%)</title><rect x="287.5" y="531.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (9 samples, 0.06%)</title><rect x="287.5" y="515.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.5" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (7 samples, 0.04%)</title><rect x="287.5" y="499.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.5" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.02%)</title><rect x="287.7" y="483.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="290.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (21 samples, 0.13%)</title><rect x="288.2" y="595.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.04%)</title><rect x="288.6" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="291.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.04%)</title><rect x="288.6" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.04%)</title><rect x="288.6" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.6" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.06%)</title><rect x="289.0" y="579.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="292.0" y="590.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.02%)</title><rect x="289.1" y="563.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="292.1" y="574.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.02%)</title><rect x="289.4" y="563.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="292.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (11 samples, 0.07%)</title><rect x="289.7" y="595.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (11 samples, 0.07%)</title><rect x="289.7" y="579.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.7" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (11 samples, 0.07%)</title><rect x="289.7" y="563.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.06%)</title><rect x="289.7" y="547.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21 samples, 0.13%)</title><rect x="290.5" y="627.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.5" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (14 samples, 0.09%)</title><rect x="290.6" y="611.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.02%)</title><rect x="291.3" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.02%)</title><rect x="291.3" y="579.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.04%)</title><rect x="291.6" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.6" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.04%)</title><rect x="291.6" y="595.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (10 samples, 0.06%)</title><rect x="292.0" y="627.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.0" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (10 samples, 0.06%)</title><rect x="292.0" y="611.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (9 samples, 0.06%)</title><rect x="292.1" y="595.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.04%)</title><rect x="292.2" y="579.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.02%)</title><rect x="292.5" y="563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.08%)</title><rect x="292.9" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.07%)</title><rect x="292.9" y="611.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.07%)</title><rect x="292.9" y="595.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.9" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.03%)</title><rect x="293.8" y="627.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.8" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.03%)</title><rect x="293.8" y="611.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.8" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (133 samples, 0.82%)</title><rect x="294.2" y="643.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.2" y="654.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (131 samples, 0.81%)</title><rect x="294.4" y="627.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.4" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.06%)</title><rect x="294.5" y="611.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.5" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="294.5" y="595.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="294.5" y="579.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="297.5" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="294.6" y="563.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="294.8" y="547.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.8" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="294.8" y="531.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="297.8" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="294.8" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (120 samples, 0.74%)</title><rect x="295.2" y="611.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.03%)</title><rect x="295.2" y="595.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.03%)</title><rect x="295.2" y="579.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.03%)</title><rect x="295.2" y="563.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.02%)</title><rect x="295.3" y="547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (111 samples, 0.68%)</title><rect x="295.8" y="595.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (111 samples, 0.68%)</title><rect x="295.8" y="579.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (111 samples, 0.68%)</title><rect x="295.8" y="563.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="298.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (111 samples, 0.68%)</title><rect x="295.8" y="547.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (111 samples, 0.68%)</title><rect x="295.8" y="531.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.8" y="542.0"></text>
</g>
<g>
<title>read (100 samples, 0.62%)</title><rect x="296.6" y="515.0" width="7.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="299.6" y="526.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (5 samples, 0.03%)</title><rect x="304.2" y="691.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="307.2" y="702.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25091] (3,971 samples, 24.45%)</title><rect x="304.6" y="707.0" width="288.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="307.6" y="718.0">[NIO Selector #1 tid=25091]</text>
</g>
<g>
<title>[unknown_Java] (12 samples, 0.07%)</title><rect x="304.8" y="691.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="307.8" y="702.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.02%)</title><rect x="305.4" y="675.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="308.4" y="686.0"></text>
</g>
<g>
<title>_res (4 samples, 0.02%)</title><rect x="305.4" y="659.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="308.4" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,953 samples, 24.34%)</title><rect x="305.7" y="691.0" width="287.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="308.7" y="702.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (7 samples, 0.04%)</title><rect x="306.3" y="675.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.3" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (7 samples, 0.04%)</title><rect x="306.3" y="659.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.3" y="670.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,064 samples, 6.55%)</title><rect x="306.9" y="675.0" width="77.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.9" y="686.0">one/nio/n..</text>
</g>
<g>
<title>_res (4 samples, 0.02%)</title><rect x="307.0" y="659.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="310.0" y="670.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (14 samples, 0.09%)</title><rect x="307.3" y="659.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="310.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (5 samples, 0.03%)</title><rect x="307.7" y="643.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (5 samples, 0.03%)</title><rect x="307.7" y="627.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (4 samples, 0.02%)</title><rect x="308.3" y="659.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.02%)</title><rect x="308.3" y="643.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,040 samples, 6.40%)</title><rect x="308.6" y="659.0" width="75.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.6" y="670.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,040 samples, 6.40%)</title><rect x="308.6" y="643.0" width="75.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.6" y="654.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,037 samples, 6.39%)</title><rect x="308.7" y="627.0" width="75.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="311.7" y="638.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,008 samples, 6.21%)</title><rect x="308.9" y="611.0" width="73.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.9" y="622.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (7 samples, 0.04%)</title><rect x="312.2" y="595.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="315.2" y="606.0"></text>
</g>
<g>
<title>kevent (955 samples, 5.88%)</title><rect x="312.7" y="595.0" width="69.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="315.7" y="606.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 0.05%)</title><rect x="382.1" y="611.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.02%)</title><rect x="382.4" y="595.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.02%)</title><rect x="382.4" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.02%)</title><rect x="382.4" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="385.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.02%)</title><rect x="382.4" y="547.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (17 samples, 0.10%)</title><rect x="382.7" y="611.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="385.7" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,872 samples, 17.69%)</title><rect x="384.2" y="675.0" width="208.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.2" y="686.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,872 samples, 17.69%)</title><rect x="384.2" y="659.0" width="208.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.2" y="670.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,701 samples, 16.63%)</title><rect x="384.2" y="643.0" width="196.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="387.2" y="654.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,646 samples, 16.30%)</title><rect x="384.5" y="627.0" width="192.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="387.5" y="638.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="384.5" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,642 samples, 16.27%)</title><rect x="384.8" y="611.0" width="192.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.8" y="622.0">one/nio/http/HttpServer.h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,609 samples, 16.07%)</title><rect x="384.8" y="595.0" width="189.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.8" y="606.0">RequestHandler1_entity.ha..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (496 samples, 3.05%)</title><rect x="384.8" y="579.0" width="36.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.8" y="590.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (492 samples, 3.03%)</title><rect x="384.9" y="563.0" width="35.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="387.9" y="574.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (19 samples, 0.12%)</title><rect x="384.9" y="547.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="387.9" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (473 samples, 2.91%)</title><rect x="386.3" y="547.0" width="34.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="389.3" y="558.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (473 samples, 2.91%)</title><rect x="386.3" y="531.0" width="34.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="389.3" y="542.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (473 samples, 2.91%)</title><rect x="386.3" y="515.0" width="34.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="389.3" y="526.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (473 samples, 2.91%)</title><rect x="386.3" y="499.0" width="34.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.3" y="510.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.03%)</title><rect x="386.3" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="389.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (468 samples, 2.88%)</title><rect x="386.6" y="483.0" width="34.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="389.6" y="494.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (468 samples, 2.88%)</title><rect x="386.6" y="467.0" width="34.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="389.6" y="478.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (461 samples, 2.84%)</title><rect x="387.2" y="451.0" width="33.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.2" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (461 samples, 2.84%)</title><rect x="387.2" y="435.0" width="33.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.2" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (6 samples, 0.04%)</title><rect x="387.2" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="390.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (455 samples, 2.80%)</title><rect x="387.6" y="419.0" width="33.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="390.6" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (446 samples, 2.75%)</title><rect x="388.2" y="403.0" width="32.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.2" y="414.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (7 samples, 0.04%)</title><rect x="388.8" y="387.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="391.8" y="398.0"></text>
</g>
<g>
<title>write (430 samples, 2.65%)</title><rect x="389.4" y="387.0" width="31.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="392.4" y="398.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.04%)</title><rect x="420.9" y="579.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (2,106 samples, 12.97%)</title><rect x="421.4" y="579.0" width="153.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="424.4" y="590.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.put (2,104 samples, 12.96%)</title><rect x="421.5" y="563.0" width="152.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="424.5" y="574.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.04%)</title><rect x="421.6" y="547.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.04%)</title><rect x="421.6" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="424.6" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="421.6" y="515.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="424.6" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="421.6" y="499.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="424.6" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="421.7" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="424.7" y="494.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.02%)</title><rect x="421.7" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.7" y="478.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (4 samples, 0.02%)</title><rect x="421.7" y="451.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="424.7" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.02%)</title><rect x="422.1" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (2,092 samples, 12.88%)</title><rect x="422.4" y="547.0" width="152.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.4" y="558.0">ru/mail/polis/dao/D..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,071 samples, 12.75%)</title><rect x="422.4" y="531.0" width="150.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.4" y="542.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,071 samples, 12.75%)</title><rect x="422.4" y="515.0" width="150.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.4" y="526.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,047 samples, 12.61%)</title><rect x="424.1" y="499.0" width="148.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="427.1" y="510.0">Java_org_rocksdb_Ro..</text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.02%)</title><rect x="425.1" y="483.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="428.1" y="494.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,028 samples, 12.49%)</title><rect x="425.5" y="483.0" width="147.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="428.5" y="494.0">rocksdb_put_helper(..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.02%)</title><rect x="426.1" y="467.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="429.1" y="478.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.04%)</title><rect x="427.0" y="467.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="430.0" y="478.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.02%)</title><rect x="427.1" y="451.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="430.1" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.05%)</title><rect x="427.4" y="467.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="430.4" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.04%)</title><rect x="427.6" y="451.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="430.6" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.04%)</title><rect x="427.6" y="435.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="430.6" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.04%)</title><rect x="427.6" y="419.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="430.6" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.04%)</title><rect x="427.6" y="403.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="430.6" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.04%)</title><rect x="427.6" y="387.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="430.6" y="398.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (21 samples, 0.13%)</title><rect x="428.0" y="467.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="431.0" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.05%)</title><rect x="428.8" y="451.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="431.8" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.05%)</title><rect x="428.8" y="435.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="431.8" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.02%)</title><rect x="428.9" y="419.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="431.9" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.02%)</title><rect x="428.9" y="403.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="431.9" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.02%)</title><rect x="428.9" y="387.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="431.9" y="398.0"></text>
</g>
<g>
<title>operator new(unsigned long) (14 samples, 0.09%)</title><rect x="429.7" y="467.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="432.7" y="478.0"></text>
</g>
<g>
<title>malloc (14 samples, 0.09%)</title><rect x="429.7" y="451.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="432.7" y="462.0"></text>
</g>
<g>
<title>malloc_zone_malloc (11 samples, 0.07%)</title><rect x="429.9" y="435.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="432.9" y="446.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (9 samples, 0.06%)</title><rect x="430.0" y="419.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="433.0" y="430.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (9 samples, 0.06%)</title><rect x="430.0" y="403.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="433.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,955 samples, 12.04%)</title><rect x="430.8" y="467.0" width="142.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="433.8" y="478.0">rocksdb::Compacted..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,955 samples, 12.04%)</title><rect x="430.8" y="451.0" width="142.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="433.8" y="462.0">rocksdb::DBImpl::P..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,951 samples, 12.02%)</title><rect x="430.8" y="435.0" width="141.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="433.8" y="446.0">rocksdb::DB::Put(r..</text>
</g>
<g>
<title>free (4 samples, 0.02%)</title><rect x="430.9" y="419.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="433.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,887 samples, 11.62%)</title><rect x="431.3" y="419.0" width="137.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="434.3" y="430.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,876 samples, 11.55%)</title><rect x="431.6" y="403.0" width="136.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="434.6" y="414.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (5 samples, 0.03%)</title><rect x="434.5" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="437.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (406 samples, 2.50%)</title><rect x="434.8" y="387.0" width="29.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="437.8" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (405 samples, 2.49%)</title><rect x="434.8" y="371.0" width="29.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="437.8" y="382.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (401 samples, 2.47%)</title><rect x="435.0" y="355.0" width="29.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="438.0" y="366.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (6 samples, 0.04%)</title><rect x="435.0" y="339.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="438.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (394 samples, 2.43%)</title><rect x="435.5" y="339.0" width="28.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="438.5" y="350.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (6 samples, 0.04%)</title><rect x="436.1" y="323.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="439.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (380 samples, 2.34%)</title><rect x="436.5" y="323.0" width="27.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="439.5" y="334.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.04%)</title><rect x="436.6" y="307.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="439.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (372 samples, 2.29%)</title><rect x="437.1" y="307.0" width="27.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="440.1" y="318.0">r..</text>
</g>
<g>
<title>write (366 samples, 2.25%)</title><rect x="437.5" y="291.0" width="26.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="440.5" y="302.0">w..</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (6 samples, 0.04%)</title><rect x="464.5" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="467.5" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.02%)</title><rect x="464.6" y="371.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="467.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (86 samples, 0.53%)</title><rect x="465.0" y="387.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="468.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (81 samples, 0.50%)</title><rect x="465.3" y="371.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="468.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (75 samples, 0.46%)</title><rect x="465.8" y="355.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="468.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (75 samples, 0.46%)</title><rect x="465.8" y="339.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="468.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (70 samples, 0.43%)</title><rect x="465.9" y="323.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="468.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (57 samples, 0.35%)</title><rect x="466.8" y="307.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="469.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (17 samples, 0.10%)</title><rect x="469.6" y="291.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="472.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.04%)</title><rect x="470.4" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="473.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (53 samples, 0.33%)</title><rect x="471.2" y="387.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="474.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (40 samples, 0.25%)</title><rect x="472.1" y="371.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="475.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (40 samples, 0.25%)</title><rect x="472.1" y="355.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="475.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (39 samples, 0.24%)</title><rect x="472.2" y="339.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="475.2" y="350.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.04%)</title><rect x="472.4" y="323.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="475.4" y="334.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.04%)</title><rect x="472.5" y="307.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="475.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (29 samples, 0.18%)</title><rect x="472.9" y="323.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="475.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (26 samples, 0.16%)</title><rect x="473.1" y="307.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="476.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (23 samples, 0.14%)</title><rect x="473.3" y="291.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="476.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.06%)</title><rect x="474.4" y="275.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="477.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.04%)</title><rect x="474.6" y="259.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="477.6" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.02%)</title><rect x="474.7" y="243.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="477.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (827 samples, 5.09%)</title><rect x="475.2" y="387.0" width="60.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="478.2" y="398.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (824 samples, 5.07%)</title><rect x="475.4" y="371.0" width="59.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="478.4" y="382.0">rocksd..</text>
</g>
<g>
<title>sched_yield (6 samples, 0.04%)</title><rect x="476.2" y="355.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="479.2" y="366.0"></text>
</g>
<g>
<title>xdrrec_ops (804 samples, 4.95%)</title><rect x="476.8" y="355.0" width="58.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="479.8" y="366.0">xdrrec..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (7 samples, 0.04%)</title><rect x="535.5" y="387.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="538.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.03%)</title><rect x="535.6" y="371.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="538.6" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.02%)</title><rect x="535.7" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="538.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.02%)</title><rect x="535.7" y="339.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="538.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (13 samples, 0.08%)</title><rect x="536.0" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="539.0" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.04%)</title><rect x="536.2" y="371.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="539.2" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.04%)</title><rect x="536.2" y="355.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="539.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (384 samples, 2.36%)</title><rect x="536.9" y="387.0" width="27.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="539.9" y="398.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (377 samples, 2.32%)</title><rect x="537.1" y="371.0" width="27.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="540.1" y="382.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (247 samples, 1.52%)</title><rect x="538.5" y="355.0" width="18.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="541.5" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (225 samples, 1.39%)</title><rect x="538.5" y="339.0" width="16.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="541.5" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (19 samples, 0.12%)</title><rect x="554.9" y="339.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="557.9" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (16 samples, 0.10%)</title><rect x="555.1" y="323.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="558.1" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (15 samples, 0.09%)</title><rect x="555.2" y="307.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="558.2" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (4 samples, 0.02%)</title><rect x="556.5" y="355.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="559.5" y="366.0"></text>
</g>
<g>
<title>xdrrec_ops (106 samples, 0.65%)</title><rect x="556.8" y="355.0" width="7.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="559.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (31 samples, 0.19%)</title><rect x="564.8" y="387.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="567.8" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (28 samples, 0.17%)</title><rect x="565.0" y="371.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="568.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (25 samples, 0.15%)</title><rect x="565.0" y="355.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="568.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (4 samples, 0.02%)</title><rect x="568.5" y="419.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="571.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (15 samples, 0.09%)</title><rect x="568.8" y="419.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="571.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (9 samples, 0.06%)</title><rect x="569.1" y="403.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="572.1" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (5 samples, 0.03%)</title><rect x="569.3" y="387.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="572.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (27 samples, 0.17%)</title><rect x="569.9" y="419.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="572.9" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (16 samples, 0.10%)</title><rect x="570.1" y="403.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="573.1" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (13 samples, 0.08%)</title><rect x="570.4" y="387.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="573.4" y="398.0"></text>
</g>
<g>
<title>malloc (13 samples, 0.08%)</title><rect x="570.4" y="371.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="573.4" y="382.0"></text>
</g>
<g>
<title>malloc_zone_malloc (13 samples, 0.08%)</title><rect x="570.4" y="355.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="573.4" y="366.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (12 samples, 0.07%)</title><rect x="570.4" y="339.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="573.4" y="350.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (12 samples, 0.07%)</title><rect x="570.4" y="323.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="573.4" y="334.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (8 samples, 0.05%)</title><rect x="571.3" y="403.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="574.3" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (8 samples, 0.05%)</title><rect x="571.3" y="387.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="574.3" y="398.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="571.5" y="371.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="574.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (8 samples, 0.05%)</title><rect x="571.9" y="419.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="574.9" y="430.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.02%)</title><rect x="572.2" y="403.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="575.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (15 samples, 0.09%)</title><rect x="572.9" y="531.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="575.9" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (13 samples, 0.08%)</title><rect x="573.0" y="515.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="576.0" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="573.3" y="499.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="576.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="573.5" y="483.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="576.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (6 samples, 0.04%)</title><rect x="574.0" y="531.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="577.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (6 samples, 0.04%)</title><rect x="574.0" y="515.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="577.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (6 samples, 0.04%)</title><rect x="574.0" y="499.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="577.0" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.04%)</title><rect x="574.0" y="483.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.0" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (5 samples, 0.03%)</title><rect x="574.1" y="467.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="577.1" y="478.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (19 samples, 0.12%)</title><rect x="574.4" y="595.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="577.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.07%)</title><rect x="574.5" y="579.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="577.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.05%)</title><rect x="574.7" y="563.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="577.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.05%)</title><rect x="574.7" y="547.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="577.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.04%)</title><rect x="574.8" y="531.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="577.8" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.04%)</title><rect x="575.3" y="579.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="578.3" y="590.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.03%)</title><rect x="575.4" y="563.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="578.4" y="574.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.02%)</title><rect x="575.4" y="547.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="578.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (14 samples, 0.09%)</title><rect x="575.8" y="595.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="578.8" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (14 samples, 0.09%)</title><rect x="575.8" y="579.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.8" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14 samples, 0.09%)</title><rect x="575.8" y="563.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13 samples, 0.08%)</title><rect x="575.8" y="547.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="578.8" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (17 samples, 0.10%)</title><rect x="576.8" y="627.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.8" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (10 samples, 0.06%)</title><rect x="576.8" y="611.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="579.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="577.5" y="611.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="580.5" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="577.5" y="595.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="580.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (12 samples, 0.07%)</title><rect x="578.1" y="627.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="581.1" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (12 samples, 0.07%)</title><rect x="578.1" y="611.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="581.1" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.05%)</title><rect x="578.3" y="595.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="581.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (6 samples, 0.04%)</title><rect x="578.9" y="627.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="581.9" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.06%)</title><rect x="579.4" y="627.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="582.4" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.04%)</title><rect x="579.4" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.4" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.04%)</title><rect x="579.4" y="595.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.4" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="580.0" y="627.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="583.0" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="580.0" y="611.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.0" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (170 samples, 1.05%)</title><rect x="580.5" y="643.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="583.5" y="654.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (170 samples, 1.05%)</title><rect x="580.5" y="627.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.5" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.03%)</title><rect x="580.6" y="611.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="583.6" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="580.7" y="595.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.7" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="580.7" y="579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="583.7" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="580.7" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="583.7" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="580.7" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="583.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="580.7" y="531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (163 samples, 1.00%)</title><rect x="581.0" y="611.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="584.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.07%)</title><rect x="581.3" y="595.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="584.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (11 samples, 0.07%)</title><rect x="581.3" y="579.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="584.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (11 samples, 0.07%)</title><rect x="581.3" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="584.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (11 samples, 0.07%)</title><rect x="581.3" y="547.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="584.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.02%)</title><rect x="581.3" y="531.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="584.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.04%)</title><rect x="581.5" y="531.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.5" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (7 samples, 0.04%)</title><rect x="581.5" y="515.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="584.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (145 samples, 0.89%)</title><rect x="582.3" y="595.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="585.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (145 samples, 0.89%)</title><rect x="582.3" y="579.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="585.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (144 samples, 0.89%)</title><rect x="582.3" y="563.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="585.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (144 samples, 0.89%)</title><rect x="582.3" y="547.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (143 samples, 0.88%)</title><rect x="582.3" y="531.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="585.3" y="542.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (6 samples, 0.04%)</title><rect x="582.9" y="515.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="585.9" y="526.0"></text>
</g>
<g>
<title>read (129 samples, 0.79%)</title><rect x="583.4" y="515.0" width="9.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="586.4" y="526.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=39427] (3,937 samples, 24.25%)</title><rect x="593.2" y="707.0" width="286.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="596.2" y="718.0">[NIO Selector #2 tid=39427]</text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.04%)</title><rect x="593.2" y="691.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="596.2" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,926 samples, 24.18%)</title><rect x="593.7" y="691.0" width="285.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="596.7" y="702.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4 samples, 0.02%)</title><rect x="594.3" y="675.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="597.3" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,069 samples, 6.58%)</title><rect x="595.0" y="675.0" width="77.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="598.0" y="686.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (9 samples, 0.06%)</title><rect x="595.3" y="659.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="598.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,051 samples, 6.47%)</title><rect x="596.2" y="659.0" width="76.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="599.2" y="670.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,051 samples, 6.47%)</title><rect x="596.2" y="643.0" width="76.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="599.2" y="654.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,050 samples, 6.47%)</title><rect x="596.3" y="627.0" width="76.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="599.3" y="638.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,011 samples, 6.23%)</title><rect x="596.4" y="611.0" width="73.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="599.4" y="622.0">sun/nio/..</text>
</g>
<g>
<title>kevent (979 samples, 6.03%)</title><rect x="598.7" y="595.0" width="71.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="601.7" y="606.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (11 samples, 0.07%)</title><rect x="669.8" y="611.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="672.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (9 samples, 0.06%)</title><rect x="670.0" y="595.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="673.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.add (9 samples, 0.06%)</title><rect x="670.0" y="579.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 0.06%)</title><rect x="670.0" y="563.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="673.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.06%)</title><rect x="670.0" y="547.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (22 samples, 0.14%)</title><rect x="670.6" y="611.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="673.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (4 samples, 0.02%)</title><rect x="671.8" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="674.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.03%)</title><rect x="672.2" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="675.2" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,839 samples, 17.48%)</title><rect x="672.7" y="675.0" width="206.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.7" y="686.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,839 samples, 17.48%)</title><rect x="672.7" y="659.0" width="206.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="675.7" y="670.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,665 samples, 16.41%)</title><rect x="672.7" y="643.0" width="193.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="675.7" y="654.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,617 samples, 16.12%)</title><rect x="673.0" y="627.0" width="190.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="676.0" y="638.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,615 samples, 16.10%)</title><rect x="673.1" y="611.0" width="190.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="676.1" y="622.0">one/nio/http/HttpServer.h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,597 samples, 15.99%)</title><rect x="673.1" y="595.0" width="188.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.1" y="606.0">RequestHandler1_entity.h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (531 samples, 3.27%)</title><rect x="673.1" y="579.0" width="38.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="676.1" y="590.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (524 samples, 3.23%)</title><rect x="673.2" y="563.0" width="38.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.2" y="574.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.09%)</title><rect x="673.2" y="547.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="676.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (510 samples, 3.14%)</title><rect x="674.2" y="547.0" width="37.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="677.2" y="558.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (510 samples, 3.14%)</title><rect x="674.2" y="531.0" width="37.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.2" y="542.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (510 samples, 3.14%)</title><rect x="674.2" y="515.0" width="37.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="677.2" y="526.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (510 samples, 3.14%)</title><rect x="674.2" y="499.0" width="37.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.2" y="510.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.03%)</title><rect x="674.2" y="483.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (505 samples, 3.11%)</title><rect x="674.6" y="483.0" width="36.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="677.6" y="494.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (505 samples, 3.11%)</title><rect x="674.6" y="467.0" width="36.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.6" y="478.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (497 samples, 3.06%)</title><rect x="675.1" y="451.0" width="36.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="678.1" y="462.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (497 samples, 3.06%)</title><rect x="675.1" y="435.0" width="36.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="678.1" y="446.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.02%)</title><rect x="675.1" y="419.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (493 samples, 3.04%)</title><rect x="675.4" y="419.0" width="35.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="678.4" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (482 samples, 2.97%)</title><rect x="676.2" y="403.0" width="35.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="679.2" y="414.0">sun..</text>
</g>
<g>
<title>write (463 samples, 2.85%)</title><rect x="677.6" y="387.0" width="33.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="680.6" y="398.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.04%)</title><rect x="711.3" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="714.3" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.04%)</title><rect x="711.3" y="547.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="714.3" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.03%)</title><rect x="711.3" y="531.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="714.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.04%)</title><rect x="711.7" y="579.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="714.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (2,060 samples, 12.69%)</title><rect x="712.1" y="579.0" width="149.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="715.1" y="590.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.put (2,057 samples, 12.67%)</title><rect x="712.3" y="563.0" width="149.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="715.3" y="574.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.04%)</title><rect x="712.6" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="715.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (2,047 samples, 12.61%)</title><rect x="713.1" y="547.0" width="148.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="716.1" y="558.0">ru/mail/polis/dao/D..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,030 samples, 12.50%)</title><rect x="713.1" y="531.0" width="147.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="716.1" y="542.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,030 samples, 12.50%)</title><rect x="713.1" y="515.0" width="147.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="716.1" y="526.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,016 samples, 12.42%)</title><rect x="714.2" y="499.0" width="146.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="717.2" y="510.0">Java_org_rocksdb_R..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,000 samples, 12.32%)</title><rect x="715.3" y="483.0" width="145.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="718.3" y="494.0">rocksdb_put_helper..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.02%)</title><rect x="716.1" y="467.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="719.1" y="478.0"></text>
</g>
<g>
<title>free_tiny (7 samples, 0.04%)</title><rect x="716.8" y="467.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="719.8" y="478.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.03%)</title><rect x="716.9" y="451.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="719.9" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (11 samples, 0.07%)</title><rect x="717.3" y="467.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="720.3" y="478.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.02%)</title><rect x="717.5" y="451.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="720.5" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.02%)</title><rect x="717.8" y="451.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="720.8" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.02%)</title><rect x="717.8" y="435.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="720.8" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (29 samples, 0.18%)</title><rect x="718.1" y="467.0" width="2.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="721.1" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (13 samples, 0.08%)</title><rect x="718.9" y="451.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="721.9" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (12 samples, 0.07%)</title><rect x="719.0" y="435.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="722.0" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (11 samples, 0.07%)</title><rect x="719.0" y="419.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="722.0" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.05%)</title><rect x="719.2" y="403.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="722.2" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (8 samples, 0.05%)</title><rect x="719.2" y="387.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="722.2" y="398.0"></text>
</g>
<g>
<title>operator new(unsigned long) (13 samples, 0.08%)</title><rect x="720.2" y="467.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="723.2" y="478.0"></text>
</g>
<g>
<title>malloc (13 samples, 0.08%)</title><rect x="720.2" y="451.0" width="0.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="723.2" y="462.0"></text>
</g>
<g>
<title>malloc_zone_malloc (10 samples, 0.06%)</title><rect x="720.3" y="435.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="723.3" y="446.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.04%)</title><rect x="720.6" y="419.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="723.6" y="430.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.03%)</title><rect x="720.6" y="403.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="723.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,918 samples, 11.81%)</title><rect x="721.1" y="467.0" width="139.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="724.1" y="478.0">rocksdb::Compacte..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,916 samples, 11.80%)</title><rect x="721.3" y="451.0" width="139.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="724.3" y="462.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,911 samples, 11.77%)</title><rect x="721.4" y="435.0" width="138.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="724.4" y="446.0">rocksdb::DB::Put(..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,854 samples, 11.42%)</title><rect x="721.9" y="419.0" width="134.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="724.9" y="430.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,838 samples, 11.32%)</title><rect x="722.1" y="403.0" width="133.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="725.1" y="414.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.04%)</title><rect x="724.4" y="387.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="727.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (375 samples, 2.31%)</title><rect x="725.4" y="387.0" width="27.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="728.4" y="398.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (365 samples, 2.25%)</title><rect x="725.7" y="371.0" width="26.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="728.7" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (361 samples, 2.22%)</title><rect x="726.0" y="355.0" width="26.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="729.0" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (10 samples, 0.06%)</title><rect x="726.3" y="339.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="729.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (347 samples, 2.14%)</title><rect x="727.0" y="339.0" width="25.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="730.0" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (4 samples, 0.02%)</title><rect x="727.5" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="730.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (331 samples, 2.04%)</title><rect x="728.2" y="323.0" width="24.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="731.2" y="334.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.04%)</title><rect x="728.3" y="307.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="731.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (321 samples, 1.98%)</title><rect x="728.9" y="307.0" width="23.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="731.9" y="318.0">r..</text>
</g>
<g>
<title>write (318 samples, 1.96%)</title><rect x="729.1" y="291.0" width="23.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="732.1" y="302.0">w..</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (7 samples, 0.04%)</title><rect x="752.8" y="387.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="755.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (76 samples, 0.47%)</title><rect x="753.4" y="387.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="756.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (75 samples, 0.46%)</title><rect x="753.5" y="371.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="756.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (72 samples, 0.44%)</title><rect x="753.7" y="355.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="756.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (70 samples, 0.43%)</title><rect x="753.8" y="339.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="756.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (66 samples, 0.41%)</title><rect x="754.0" y="323.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="757.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (56 samples, 0.34%)</title><rect x="754.7" y="307.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="757.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (22 samples, 0.14%)</title><rect x="757.1" y="291.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="760.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (13 samples, 0.08%)</title><rect x="757.6" y="275.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="760.6" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.04%)</title><rect x="758.1" y="259.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="761.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (58 samples, 0.36%)</title><rect x="758.9" y="387.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="761.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (50 samples, 0.31%)</title><rect x="759.5" y="371.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="762.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (48 samples, 0.30%)</title><rect x="759.7" y="355.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="762.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (44 samples, 0.27%)</title><rect x="759.9" y="339.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="762.9" y="350.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.05%)</title><rect x="760.1" y="323.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="763.1" y="334.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.04%)</title><rect x="760.2" y="307.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="763.2" y="318.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.04%)</title><rect x="760.2" y="291.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="763.2" y="302.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.03%)</title><rect x="760.3" y="275.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="763.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (32 samples, 0.20%)</title><rect x="760.8" y="323.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="763.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (31 samples, 0.19%)</title><rect x="760.9" y="307.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="763.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (28 samples, 0.17%)</title><rect x="761.1" y="291.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="764.1" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.02%)</title><rect x="762.0" y="275.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="765.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.07%)</title><rect x="762.3" y="275.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="765.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.04%)</title><rect x="762.7" y="259.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="765.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (794 samples, 4.89%)</title><rect x="763.1" y="387.0" width="57.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="766.1" y="398.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (793 samples, 4.88%)</title><rect x="763.1" y="371.0" width="57.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="766.1" y="382.0">rocksd..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.02%)</title><rect x="764.5" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="767.5" y="366.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.02%)</title><rect x="764.5" y="339.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="767.5" y="350.0"></text>
</g>
<g>
<title>xdrrec_ops (769 samples, 4.74%)</title><rect x="764.9" y="355.0" width="55.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="767.9" y="366.0">xdrre..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (17 samples, 0.10%)</title><rect x="821.2" y="387.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="824.2" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.07%)</title><rect x="821.4" y="371.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="824.4" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.07%)</title><rect x="821.4" y="355.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="824.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (427 samples, 2.63%)</title><rect x="822.4" y="387.0" width="31.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="825.4" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (423 samples, 2.61%)</title><rect x="822.5" y="371.0" width="30.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="825.5" y="382.0">ro..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (258 samples, 1.59%)</title><rect x="824.5" y="355.0" width="18.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="827.5" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (240 samples, 1.48%)</title><rect x="824.5" y="339.0" width="17.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="827.5" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (13 samples, 0.08%)</title><rect x="842.0" y="339.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="845.0" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.06%)</title><rect x="842.2" y="323.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="845.2" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (10 samples, 0.06%)</title><rect x="842.2" y="307.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="845.2" y="318.0"></text>
</g>
<g>
<title>xdrrec_ops (138 samples, 0.85%)</title><rect x="843.2" y="355.0" width="10.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="846.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (20 samples, 0.12%)</title><rect x="853.5" y="387.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="856.5" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (19 samples, 0.12%)</title><rect x="853.5" y="371.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="856.5" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.10%)</title><rect x="853.5" y="355.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="856.5" y="366.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (6 samples, 0.04%)</title><rect x="855.1" y="387.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="858.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.02%)</title><rect x="855.6" y="403.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="858.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (4 samples, 0.02%)</title><rect x="855.9" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (12 samples, 0.07%)</title><rect x="856.7" y="419.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="859.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (4 samples, 0.02%)</title><rect x="856.7" y="403.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="859.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.04%)</title><rect x="857.1" y="403.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="860.1" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (5 samples, 0.03%)</title><rect x="857.2" y="387.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="860.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (20 samples, 0.12%)</title><rect x="857.6" y="419.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="860.6" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (9 samples, 0.06%)</title><rect x="858.0" y="403.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="861.0" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.06%)</title><rect x="858.0" y="387.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="861.0" y="398.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.06%)</title><rect x="858.0" y="371.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="861.0" y="382.0"></text>
</g>
<g>
<title>malloc_zone_malloc (9 samples, 0.06%)</title><rect x="858.0" y="355.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="861.0" y="366.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.05%)</title><rect x="858.0" y="339.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="861.0" y="350.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.05%)</title><rect x="858.0" y="323.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="861.0" y="334.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.02%)</title><rect x="858.6" y="403.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="861.6" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (4 samples, 0.02%)</title><rect x="858.6" y="387.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="861.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (14 samples, 0.09%)</title><rect x="859.1" y="419.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="862.1" y="430.0"></text>
</g>
<g>
<title>free (5 samples, 0.03%)</title><rect x="859.1" y="403.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="862.1" y="414.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.02%)</title><rect x="859.1" y="387.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="862.1" y="398.0"></text>
</g>
<g>
<title>free_tiny (9 samples, 0.06%)</title><rect x="859.4" y="403.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="862.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (14 samples, 0.09%)</title><rect x="860.7" y="531.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (11 samples, 0.07%)</title><rect x="860.9" y="515.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.9" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="861.4" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="864.4" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="861.4" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="864.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (12 samples, 0.07%)</title><rect x="861.8" y="595.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="864.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.02%)</title><rect x="862.0" y="579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="865.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.02%)</title><rect x="862.0" y="563.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="865.0" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.03%)</title><rect x="862.3" y="579.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="865.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6 samples, 0.04%)</title><rect x="862.7" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="865.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.04%)</title><rect x="862.7" y="579.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="865.7" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.04%)</title><rect x="862.7" y="563.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="865.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.03%)</title><rect x="862.7" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="865.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (15 samples, 0.09%)</title><rect x="863.1" y="627.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="866.1" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.04%)</title><rect x="863.1" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.1" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.02%)</title><rect x="863.4" y="595.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="866.4" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="863.6" y="611.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="866.6" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="863.6" y="595.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="866.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (10 samples, 0.06%)</title><rect x="864.2" y="627.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="867.2" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (10 samples, 0.06%)</title><rect x="864.2" y="611.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="867.2" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.02%)</title><rect x="864.6" y="595.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (6 samples, 0.04%)</title><rect x="865.0" y="627.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="868.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.06%)</title><rect x="865.4" y="627.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.4" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.04%)</title><rect x="865.5" y="611.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="868.5" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.04%)</title><rect x="865.5" y="595.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.5" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="866.0" y="627.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="869.0" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="866.0" y="611.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="869.0" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (174 samples, 1.07%)</title><rect x="866.3" y="643.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="869.3" y="654.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (174 samples, 1.07%)</title><rect x="866.3" y="627.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="869.3" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.05%)</title><rect x="866.3" y="611.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="869.3" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="866.3" y="595.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="869.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="866.3" y="579.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="869.3" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="866.5" y="563.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="869.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="866.6" y="547.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="869.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="866.6" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="869.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (165 samples, 1.02%)</title><rect x="867.0" y="611.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="870.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (158 samples, 0.97%)</title><rect x="867.5" y="595.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="870.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (158 samples, 0.97%)</title><rect x="867.5" y="579.0" width="11.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (158 samples, 0.97%)</title><rect x="867.5" y="563.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="870.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (157 samples, 0.97%)</title><rect x="867.6" y="547.0" width="11.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="870.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (157 samples, 0.97%)</title><rect x="867.6" y="531.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="870.6" y="542.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.02%)</title><rect x="868.3" y="515.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="871.3" y="526.0"></text>
</g>
<g>
<title>read (142 samples, 0.87%)</title><rect x="868.7" y="515.0" width="10.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="871.7" y="526.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=39171] (3,937 samples, 24.25%)</title><rect x="879.3" y="707.0" width="286.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="882.3" y="718.0">[NIO Selector #3 tid=39171]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,924 samples, 24.17%)</title><rect x="879.7" y="691.0" width="285.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="882.7" y="702.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,063 samples, 6.55%)</title><rect x="880.2" y="675.0" width="77.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="883.2" y="686.0">one/nio/n..</text>
</g>
<g>
<title>_res (5 samples, 0.03%)</title><rect x="880.4" y="659.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="883.4" y="670.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (9 samples, 0.06%)</title><rect x="880.7" y="659.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="883.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.02%)</title><rect x="881.1" y="643.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="884.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (4 samples, 0.02%)</title><rect x="881.1" y="627.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="884.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,042 samples, 6.42%)</title><rect x="881.7" y="659.0" width="75.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="884.7" y="670.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,042 samples, 6.42%)</title><rect x="881.7" y="643.0" width="75.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="884.7" y="654.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,040 samples, 6.40%)</title><rect x="881.8" y="627.0" width="75.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="884.8" y="638.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,012 samples, 6.23%)</title><rect x="882.0" y="611.0" width="73.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="885.0" y="622.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.03%)</title><rect x="884.2" y="595.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="887.2" y="606.0"></text>
</g>
<g>
<title>kevent (977 samples, 6.02%)</title><rect x="884.6" y="595.0" width="71.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="887.6" y="606.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.03%)</title><rect x="955.6" y="611.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="958.6" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (16 samples, 0.10%)</title><rect x="955.9" y="611.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="958.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.02%)</title><rect x="957.1" y="611.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.1" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.02%)</title><rect x="957.1" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="960.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.02%)</title><rect x="957.1" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="960.1" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,852 samples, 17.56%)</title><rect x="957.5" y="675.0" width="207.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="960.5" y="686.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,852 samples, 17.56%)</title><rect x="957.5" y="659.0" width="207.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="960.5" y="670.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,681 samples, 16.51%)</title><rect x="957.5" y="643.0" width="194.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="960.5" y="654.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,619 samples, 16.13%)</title><rect x="958.1" y="627.0" width="190.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="961.1" y="638.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,617 samples, 16.12%)</title><rect x="958.3" y="611.0" width="190.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="961.3" y="622.0">one/nio/http/HttpServer.h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,593 samples, 15.97%)</title><rect x="958.3" y="595.0" width="188.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="961.3" y="606.0">RequestHandler1_entity.h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (526 samples, 3.24%)</title><rect x="958.3" y="579.0" width="38.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="961.3" y="590.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (521 samples, 3.21%)</title><rect x="958.3" y="563.0" width="37.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="961.3" y="574.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.06%)</title><rect x="958.3" y="547.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="961.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (511 samples, 3.15%)</title><rect x="959.0" y="547.0" width="37.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="962.0" y="558.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (511 samples, 3.15%)</title><rect x="959.0" y="531.0" width="37.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.0" y="542.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (511 samples, 3.15%)</title><rect x="959.0" y="515.0" width="37.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="962.0" y="526.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (511 samples, 3.15%)</title><rect x="959.0" y="499.0" width="37.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="962.0" y="510.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (508 samples, 3.13%)</title><rect x="959.2" y="483.0" width="36.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="962.2" y="494.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (508 samples, 3.13%)</title><rect x="959.2" y="467.0" width="36.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="962.2" y="478.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (504 samples, 3.10%)</title><rect x="959.5" y="451.0" width="36.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="962.5" y="462.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (504 samples, 3.10%)</title><rect x="959.5" y="435.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.5" y="446.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (6 samples, 0.04%)</title><rect x="959.5" y="419.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="962.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (498 samples, 3.07%)</title><rect x="959.9" y="419.0" width="36.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="962.9" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (491 samples, 3.02%)</title><rect x="960.4" y="403.0" width="35.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="963.4" y="414.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (7 samples, 0.04%)</title><rect x="961.7" y="387.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="964.7" y="398.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.02%)</title><rect x="961.9" y="371.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="964.9" y="382.0"></text>
</g>
<g>
<title>write (466 samples, 2.87%)</title><rect x="962.3" y="387.0" width="33.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="965.3" y="398.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.03%)</title><rect x="996.1" y="563.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="999.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.03%)</title><rect x="996.1" y="547.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="999.1" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.02%)</title><rect x="996.2" y="531.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="999.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.06%)</title><rect x="996.5" y="579.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="999.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (2,058 samples, 12.67%)</title><rect x="997.1" y="579.0" width="149.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1000.1" y="590.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.put (2,055 samples, 12.66%)</title><rect x="997.4" y="563.0" width="149.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1000.4" y="574.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.04%)</title><rect x="997.6" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1000.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (2,046 samples, 12.60%)</title><rect x="998.0" y="547.0" width="148.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1001.0" y="558.0">ru/mail/polis/dao/D..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,028 samples, 12.49%)</title><rect x="998.1" y="531.0" width="147.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.1" y="542.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,028 samples, 12.49%)</title><rect x="998.1" y="515.0" width="147.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1001.1" y="526.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,016 samples, 12.42%)</title><rect x="999.0" y="499.0" width="146.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1002.0" y="510.0">Java_org_rocksdb_R..</text>
</g>
<g>
<title>operator new[](unsigned long) (6 samples, 0.04%)</title><rect x="999.6" y="483.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1002.6" y="494.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,000 samples, 12.32%)</title><rect x="1000.1" y="483.0" width="145.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1003.1" y="494.0">rocksdb_put_helper..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (7 samples, 0.04%)</title><rect x="1000.6" y="467.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1003.6" y="478.0"></text>
</g>
<g>
<title>free (4 samples, 0.02%)</title><rect x="1001.9" y="467.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1004.9" y="478.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.02%)</title><rect x="1001.9" y="451.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1004.9" y="462.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.03%)</title><rect x="1002.2" y="467.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1005.2" y="478.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (12 samples, 0.07%)</title><rect x="1002.5" y="467.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1005.5" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.04%)</title><rect x="1002.7" y="451.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1005.7" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.04%)</title><rect x="1002.7" y="435.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.7" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.04%)</title><rect x="1002.8" y="419.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1005.8" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.04%)</title><rect x="1002.8" y="403.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1005.8" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.04%)</title><rect x="1002.8" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1005.8" y="398.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (14 samples, 0.09%)</title><rect x="1003.4" y="467.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1006.4" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.06%)</title><rect x="1003.7" y="451.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1006.7" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.04%)</title><rect x="1003.8" y="435.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.8" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.02%)</title><rect x="1004.0" y="419.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.0" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.02%)</title><rect x="1004.0" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.0" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.02%)</title><rect x="1004.0" y="387.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1007.0" y="398.0"></text>
</g>
<g>
<title>operator new(unsigned long) (19 samples, 0.12%)</title><rect x="1004.4" y="467.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1007.4" y="478.0"></text>
</g>
<g>
<title>malloc (19 samples, 0.12%)</title><rect x="1004.4" y="451.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1007.4" y="462.0"></text>
</g>
<g>
<title>malloc_zone_malloc (17 samples, 0.10%)</title><rect x="1004.5" y="435.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1007.5" y="446.0"></text>
</g>
<g>
<title>default_zone_malloc (4 samples, 0.02%)</title><rect x="1004.5" y="419.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1007.5" y="430.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (13 samples, 0.08%)</title><rect x="1004.8" y="419.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1007.8" y="430.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (11 samples, 0.07%)</title><rect x="1004.9" y="403.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1007.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,917 samples, 11.81%)</title><rect x="1005.8" y="467.0" width="139.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.8" y="478.0">rocksdb::Compacte..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,915 samples, 11.79%)</title><rect x="1005.9" y="451.0" width="139.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1008.9" y="462.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,908 samples, 11.75%)</title><rect x="1006.1" y="435.0" width="138.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.1" y="446.0">rocksdb::DB::Put(..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,855 samples, 11.42%)</title><rect x="1006.7" y="419.0" width="134.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.7" y="430.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,843 samples, 11.35%)</title><rect x="1006.9" y="403.0" width="133.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.9" y="414.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (357 samples, 2.20%)</title><rect x="1010.6" y="387.0" width="25.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.6" y="398.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (353 samples, 2.17%)</title><rect x="1010.8" y="371.0" width="25.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.8" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (348 samples, 2.14%)</title><rect x="1011.2" y="355.0" width="25.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.2" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (8 samples, 0.05%)</title><rect x="1011.2" y="339.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1014.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (339 samples, 2.09%)</title><rect x="1011.8" y="339.0" width="24.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.8" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.03%)</title><rect x="1012.3" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (327 samples, 2.01%)</title><rect x="1012.7" y="323.0" width="23.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.7" y="334.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.02%)</title><rect x="1012.8" y="307.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1015.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (319 samples, 1.96%)</title><rect x="1013.3" y="307.0" width="23.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1016.3" y="318.0">r..</text>
</g>
<g>
<title>write (313 samples, 1.93%)</title><rect x="1013.7" y="291.0" width="22.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1016.7" y="302.0">w..</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (4 samples, 0.02%)</title><rect x="1036.6" y="387.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (94 samples, 0.58%)</title><rect x="1036.9" y="387.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (90 samples, 0.55%)</title><rect x="1037.1" y="371.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (83 samples, 0.51%)</title><rect x="1037.6" y="355.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1040.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (81 samples, 0.50%)</title><rect x="1037.8" y="339.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1040.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (73 samples, 0.45%)</title><rect x="1038.3" y="323.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1041.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (62 samples, 0.38%)</title><rect x="1039.1" y="307.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (5 samples, 0.03%)</title><rect x="1041.2" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1044.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (25 samples, 0.15%)</title><rect x="1041.8" y="291.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1044.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (15 samples, 0.09%)</title><rect x="1042.4" y="275.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1045.4" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (8 samples, 0.05%)</title><rect x="1042.9" y="259.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1045.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (57 samples, 0.35%)</title><rect x="1043.7" y="387.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (45 samples, 0.28%)</title><rect x="1044.6" y="371.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1047.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (42 samples, 0.26%)</title><rect x="1044.8" y="355.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (40 samples, 0.25%)</title><rect x="1045.0" y="339.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.0" y="350.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.03%)</title><rect x="1045.2" y="323.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1048.2" y="334.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.03%)</title><rect x="1045.2" y="307.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1048.2" y="318.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.03%)</title><rect x="1045.2" y="291.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1048.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (30 samples, 0.18%)</title><rect x="1045.6" y="323.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (24 samples, 0.15%)</title><rect x="1046.0" y="307.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.12%)</title><rect x="1046.3" y="291.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.03%)</title><rect x="1047.3" y="275.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (4 samples, 0.02%)</title><rect x="1047.9" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (778 samples, 4.79%)</title><rect x="1048.2" y="387.0" width="56.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.2" y="398.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (776 samples, 4.78%)</title><rect x="1048.2" y="371.0" width="56.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.2" y="382.0">rocksd..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (7 samples, 0.04%)</title><rect x="1049.3" y="355.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.3" y="366.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.04%)</title><rect x="1049.3" y="339.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1052.3" y="350.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (5 samples, 0.03%)</title><rect x="1049.5" y="323.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1052.5" y="334.0"></text>
</g>
<g>
<title>xdrrec_ops (752 samples, 4.63%)</title><rect x="1049.9" y="355.0" width="54.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1052.9" y="366.0">xdrre..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (13 samples, 0.08%)</title><rect x="1104.8" y="387.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.8" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.05%)</title><rect x="1105.0" y="371.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.04%)</title><rect x="1105.0" y="355.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1108.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (451 samples, 2.78%)</title><rect x="1105.8" y="387.0" width="32.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.8" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (438 samples, 2.70%)</title><rect x="1106.2" y="371.0" width="31.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.2" y="382.0">ro..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (254 samples, 1.56%)</title><rect x="1108.8" y="355.0" width="18.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.8" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (239 samples, 1.47%)</title><rect x="1108.8" y="339.0" width="17.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1111.8" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (14 samples, 0.09%)</title><rect x="1126.1" y="339.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1129.1" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (9 samples, 0.06%)</title><rect x="1126.5" y="323.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1129.5" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (9 samples, 0.06%)</title><rect x="1126.5" y="307.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1129.5" y="318.0"></text>
</g>
<g>
<title>xdrrec_ops (147 samples, 0.91%)</title><rect x="1127.4" y="355.0" width="10.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1130.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (5 samples, 0.03%)</title><rect x="1138.0" y="371.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (19 samples, 0.12%)</title><rect x="1138.6" y="387.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.6" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (14 samples, 0.09%)</title><rect x="1138.8" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.8" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.09%)</title><rect x="1138.8" y="355.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1141.8" y="366.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (4 samples, 0.02%)</title><rect x="1140.5" y="387.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (5 samples, 0.03%)</title><rect x="1141.5" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 0.05%)</title><rect x="1141.9" y="419.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.04%)</title><rect x="1142.0" y="403.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (16 samples, 0.10%)</title><rect x="1142.5" y="419.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.5" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (12 samples, 0.07%)</title><rect x="1142.5" y="403.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.5" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (10 samples, 0.06%)</title><rect x="1142.7" y="387.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1145.7" y="398.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.06%)</title><rect x="1142.7" y="371.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1145.7" y="382.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.05%)</title><rect x="1142.8" y="355.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1145.8" y="366.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.05%)</title><rect x="1142.8" y="339.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1145.8" y="350.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.05%)</title><rect x="1142.8" y="323.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1145.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (11 samples, 0.07%)</title><rect x="1143.6" y="419.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.6" y="430.0"></text>
</g>
<g>
<title>free (6 samples, 0.04%)</title><rect x="1143.7" y="403.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1146.7" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.02%)</title><rect x="1144.5" y="419.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.02%)</title><rect x="1145.1" y="467.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (14 samples, 0.09%)</title><rect x="1145.5" y="531.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1148.5" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (11 samples, 0.07%)</title><rect x="1145.7" y="515.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1148.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1145.9" y="499.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1148.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="1145.9" y="483.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1148.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (14 samples, 0.09%)</title><rect x="1146.7" y="595.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1149.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.04%)</title><rect x="1147.0" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1150.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.03%)</title><rect x="1147.1" y="563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1150.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.03%)</title><rect x="1147.1" y="547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1150.1" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.02%)</title><rect x="1147.4" y="579.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (10 samples, 0.06%)</title><rect x="1147.7" y="595.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1150.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.06%)</title><rect x="1147.7" y="579.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1150.7" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.06%)</title><rect x="1147.8" y="563.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1150.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.05%)</title><rect x="1147.9" y="547.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1150.9" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21 samples, 0.13%)</title><rect x="1148.4" y="627.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1151.4" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (12 samples, 0.07%)</title><rect x="1148.4" y="611.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1151.4" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.04%)</title><rect x="1149.3" y="611.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1152.3" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.04%)</title><rect x="1149.3" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1152.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (12 samples, 0.07%)</title><rect x="1150.0" y="627.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1153.0" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (12 samples, 0.07%)</title><rect x="1150.0" y="611.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (10 samples, 0.06%)</title><rect x="1150.1" y="595.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1153.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.02%)</title><rect x="1150.5" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1153.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (4 samples, 0.02%)</title><rect x="1150.8" y="627.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1153.8" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.04%)</title><rect x="1151.1" y="627.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1154.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.04%)</title><rect x="1151.2" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1154.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.03%)</title><rect x="1151.3" y="595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1154.3" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.06%)</title><rect x="1151.6" y="627.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1154.6" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.06%)</title><rect x="1151.6" y="611.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1154.6" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (169 samples, 1.04%)</title><rect x="1152.4" y="643.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1155.4" y="654.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (166 samples, 1.02%)</title><rect x="1152.6" y="627.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1155.6" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.04%)</title><rect x="1152.6" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1155.6" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="1152.6" y="595.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1155.6" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="1152.6" y="579.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1155.6" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="1152.6" y="563.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1155.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="1152.7" y="547.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1155.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="1152.7" y="531.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1155.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (159 samples, 0.98%)</title><rect x="1153.2" y="611.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1156.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.06%)</title><rect x="1153.2" y="595.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1156.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.06%)</title><rect x="1153.2" y="579.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1156.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.06%)</title><rect x="1153.2" y="563.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1156.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.05%)</title><rect x="1153.3" y="547.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1156.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.04%)</title><rect x="1153.4" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1156.4" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.04%)</title><rect x="1153.4" y="515.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1156.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (147 samples, 0.91%)</title><rect x="1154.0" y="595.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1157.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (147 samples, 0.91%)</title><rect x="1154.0" y="579.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1157.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (144 samples, 0.89%)</title><rect x="1154.2" y="563.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1157.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (144 samples, 0.89%)</title><rect x="1154.2" y="547.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1157.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (144 samples, 0.89%)</title><rect x="1154.2" y="531.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1157.2" y="542.0"></text>
</g>
<g>
<title>read (131 samples, 0.81%)</title><rect x="1155.1" y="515.0" width="9.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1158.1" y="526.0"></text>
</g>
<g>
<title>[tid=18179] (29 samples, 0.18%)</title><rect x="1165.4" y="707.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1168.4" y="718.0"></text>
</g>
<g>
<title>thread_start (29 samples, 0.18%)</title><rect x="1165.4" y="691.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1168.4" y="702.0"></text>
</g>
<g>
<title>_pthread_start (29 samples, 0.18%)</title><rect x="1165.4" y="675.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1168.4" y="686.0"></text>
</g>
<g>
<title>_pthread_body (29 samples, 0.18%)</title><rect x="1165.4" y="659.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1168.4" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (29 samples, 0.18%)</title><rect x="1165.4" y="643.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1168.4" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (29 samples, 0.18%)</title><rect x="1165.4" y="627.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="638.0"></text>
</g>
<g>
<title>VMThread::run() (29 samples, 0.18%)</title><rect x="1165.4" y="611.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="622.0"></text>
</g>
<g>
<title>VMThread::loop() (29 samples, 0.18%)</title><rect x="1165.4" y="595.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.4" y="606.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (15 samples, 0.09%)</title><rect x="1165.4" y="579.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="590.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (15 samples, 0.09%)</title><rect x="1165.4" y="563.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.4" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (15 samples, 0.09%)</title><rect x="1165.4" y="547.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.4" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.09%)</title><rect x="1165.4" y="531.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1168.4" y="542.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (7 samples, 0.04%)</title><rect x="1166.5" y="579.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="590.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (5 samples, 0.03%)</title><rect x="1166.5" y="563.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="574.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (4 samples, 0.02%)</title><rect x="1166.5" y="547.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.5" y="558.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (4 samples, 0.02%)</title><rect x="1166.5" y="531.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="542.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (4 samples, 0.02%)</title><rect x="1166.5" y="515.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1169.5" y="526.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (4 samples, 0.02%)</title><rect x="1167.2" y="579.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.2" y="590.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (4 samples, 0.02%)</title><rect x="1167.2" y="563.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.2" y="574.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (4 samples, 0.02%)</title><rect x="1167.2" y="547.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.2" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (4 samples, 0.02%)</title><rect x="1167.2" y="531.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.2" y="542.0"></text>
</g>
<g>
<title>[tid=19203] (14 samples, 0.09%)</title><rect x="1167.5" y="707.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1170.5" y="718.0"></text>
</g>
<g>
<title>thread_start (14 samples, 0.09%)</title><rect x="1167.5" y="691.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1170.5" y="702.0"></text>
</g>
<g>
<title>_pthread_start (14 samples, 0.09%)</title><rect x="1167.5" y="675.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1170.5" y="686.0"></text>
</g>
<g>
<title>_pthread_body (14 samples, 0.09%)</title><rect x="1167.5" y="659.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1170.5" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (14 samples, 0.09%)</title><rect x="1167.5" y="643.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1170.5" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (14 samples, 0.09%)</title><rect x="1167.5" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.5" y="638.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (14 samples, 0.09%)</title><rect x="1167.5" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.5" y="622.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (14 samples, 0.09%)</title><rect x="1167.5" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="606.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (11 samples, 0.07%)</title><rect x="1167.6" y="579.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.6" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (11 samples, 0.07%)</title><rect x="1167.6" y="563.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.6" y="574.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (11 samples, 0.07%)</title><rect x="1167.6" y="547.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.6" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (11 samples, 0.07%)</title><rect x="1167.6" y="531.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.6" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.07%)</title><rect x="1167.6" y="515.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1170.6" y="526.0"></text>
</g>
<g>
<title>[tid=20739] (25 samples, 0.15%)</title><rect x="1168.5" y="707.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1171.5" y="718.0"></text>
</g>
<g>
<title>thread_start (25 samples, 0.15%)</title><rect x="1168.5" y="691.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1171.5" y="702.0"></text>
</g>
<g>
<title>_pthread_start (25 samples, 0.15%)</title><rect x="1168.5" y="675.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1171.5" y="686.0"></text>
</g>
<g>
<title>_pthread_body (25 samples, 0.15%)</title><rect x="1168.5" y="659.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1171.5" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (25 samples, 0.15%)</title><rect x="1168.5" y="643.0" width="1.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1171.5" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (25 samples, 0.15%)</title><rect x="1168.5" y="627.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="638.0"></text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 0.15%)</title><rect x="1168.5" y="611.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.5" y="622.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (14 samples, 0.09%)</title><rect x="1168.5" y="595.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="606.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (13 samples, 0.08%)</title><rect x="1168.6" y="579.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.6" y="590.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (4 samples, 0.02%)</title><rect x="1168.6" y="563.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.6" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.02%)</title><rect x="1168.6" y="547.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.6" y="558.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.02%)</title><rect x="1168.6" y="531.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.6" y="542.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (8 samples, 0.05%)</title><rect x="1168.9" y="563.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="574.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (7 samples, 0.04%)</title><rect x="1168.9" y="547.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="558.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (4 samples, 0.02%)</title><rect x="1169.0" y="531.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.0" y="542.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (11 samples, 0.07%)</title><rect x="1169.5" y="595.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.5" y="606.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (11 samples, 0.07%)</title><rect x="1169.5" y="579.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1172.5" y="590.0"></text>
</g>
<g>
<title>[tid=22531] (4 samples, 0.02%)</title><rect x="1170.3" y="707.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1173.3" y="718.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.02%)</title><rect x="1170.3" y="691.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1173.3" y="702.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.02%)</title><rect x="1170.3" y="675.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1173.3" y="686.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.02%)</title><rect x="1170.3" y="659.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1173.3" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.02%)</title><rect x="1170.3" y="643.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1173.3" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.02%)</title><rect x="1170.3" y="627.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.02%)</title><rect x="1170.3" y="611.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.3" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.02%)</title><rect x="1170.3" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="606.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (4 samples, 0.02%)</title><rect x="1170.3" y="579.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="590.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (4 samples, 0.02%)</title><rect x="1170.3" y="563.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.3" y="574.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.02%)</title><rect x="1170.3" y="547.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.3" y="558.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 0.02%)</title><rect x="1170.3" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.3" y="542.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.02%)</title><rect x="1170.3" y="515.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="526.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.02%)</title><rect x="1170.3" y="499.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.3" y="510.0"></text>
</g>
<g>
<title>[tid=23555] (63 samples, 0.39%)</title><rect x="1170.6" y="707.0" width="4.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1173.6" y="718.0"></text>
</g>
<g>
<title>thread_start (63 samples, 0.39%)</title><rect x="1170.6" y="691.0" width="4.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1173.6" y="702.0"></text>
</g>
<g>
<title>_pthread_start (63 samples, 0.39%)</title><rect x="1170.6" y="675.0" width="4.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1173.6" y="686.0"></text>
</g>
<g>
<title>_pthread_body (63 samples, 0.39%)</title><rect x="1170.6" y="659.0" width="4.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1173.6" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (63 samples, 0.39%)</title><rect x="1170.6" y="643.0" width="4.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1173.6" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (63 samples, 0.39%)</title><rect x="1170.6" y="627.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="638.0"></text>
</g>
<g>
<title>WatcherThread::run() (63 samples, 0.39%)</title><rect x="1170.6" y="611.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="622.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (60 samples, 0.37%)</title><rect x="1170.8" y="595.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.8" y="606.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (59 samples, 0.36%)</title><rect x="1170.8" y="579.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.8" y="590.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (59 samples, 0.36%)</title><rect x="1170.8" y="563.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.8" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (56 samples, 0.34%)</title><rect x="1171.0" y="547.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (55 samples, 0.34%)</title><rect x="1171.0" y="531.0" width="4.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1174.0" y="542.0"></text>
</g>
<g>
<title>[tid=3335] (8 samples, 0.05%)</title><rect x="1175.2" y="707.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1178.2" y="718.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.05%)</title><rect x="1175.2" y="691.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1178.2" y="702.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.05%)</title><rect x="1175.2" y="675.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1178.2" y="686.0"></text>
</g>
<g>
<title>_pthread_body (8 samples, 0.05%)</title><rect x="1175.2" y="659.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1178.2" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.05%)</title><rect x="1175.2" y="643.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1178.2" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.05%)</title><rect x="1175.2" y="627.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="638.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 0.05%)</title><rect x="1175.2" y="611.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.2" y="622.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (6 samples, 0.04%)</title><rect x="1175.3" y="595.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="606.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (6 samples, 0.04%)</title><rect x="1175.3" y="579.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1178.3" y="590.0"></text>
</g>
<g>
<title>[tid=37379] (7 samples, 0.04%)</title><rect x="1175.8" y="707.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1178.8" y="718.0"></text>
</g>
<g>
<title>thread_start (7 samples, 0.04%)</title><rect x="1175.8" y="691.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1178.8" y="702.0"></text>
</g>
<g>
<title>_pthread_start (7 samples, 0.04%)</title><rect x="1175.8" y="675.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1178.8" y="686.0"></text>
</g>
<g>
<title>_pthread_body (7 samples, 0.04%)</title><rect x="1175.8" y="659.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (7 samples, 0.04%)</title><rect x="1175.8" y="643.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1178.8" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (7 samples, 0.04%)</title><rect x="1175.8" y="627.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="638.0"></text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 0.04%)</title><rect x="1175.8" y="611.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="622.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (5 samples, 0.03%)</title><rect x="1175.9" y="595.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (5 samples, 0.03%)</title><rect x="1175.9" y="579.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1178.9" y="590.0"></text>
</g>
<g>
<title>[tid=37891] (8 samples, 0.05%)</title><rect x="1176.3" y="707.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1179.3" y="718.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.05%)</title><rect x="1176.3" y="691.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1179.3" y="702.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.05%)</title><rect x="1176.3" y="675.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1179.3" y="686.0"></text>
</g>
<g>
<title>_pthread_body (8 samples, 0.05%)</title><rect x="1176.3" y="659.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1179.3" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.05%)</title><rect x="1176.3" y="643.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1179.3" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.05%)</title><rect x="1176.3" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 0.05%)</title><rect x="1176.3" y="611.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="622.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (5 samples, 0.03%)</title><rect x="1176.4" y="595.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="606.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (5 samples, 0.03%)</title><rect x="1176.4" y="579.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1179.4" y="590.0"></text>
</g>
<g>
<title>[tid=43267] (180 samples, 1.11%)</title><rect x="1176.9" y="707.0" width="13.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>thread_start (180 samples, 1.11%)</title><rect x="1176.9" y="691.0" width="13.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>_pthread_start (180 samples, 1.11%)</title><rect x="1176.9" y="675.0" width="13.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>_pthread_body (180 samples, 1.11%)</title><rect x="1176.9" y="659.0" width="13.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1179.9" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (180 samples, 1.11%)</title><rect x="1176.9" y="643.0" width="13.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1179.9" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (180 samples, 1.11%)</title><rect x="1176.9" y="627.0" width="13.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (180 samples, 1.11%)</title><rect x="1176.9" y="611.0" width="13.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (180 samples, 1.11%)</title><rect x="1176.9" y="595.0" width="13.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (180 samples, 1.11%)</title><rect x="1176.9" y="579.0" width="13.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (177 samples, 1.09%)</title><rect x="1176.9" y="563.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="574.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (177 samples, 1.09%)</title><rect x="1176.9" y="547.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (176 samples, 1.08%)</title><rect x="1177.0" y="531.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="542.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (97 samples, 0.60%)</title><rect x="1177.0" y="515.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="526.0"></text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.02%)</title><rect x="1177.0" y="499.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.0" y="510.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.04%)</title><rect x="1177.4" y="499.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="510.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.03%)</title><rect x="1177.5" y="483.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.05%)</title><rect x="1178.0" y="499.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.0" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.05%)</title><rect x="1178.0" y="483.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (75 samples, 0.46%)</title><rect x="1178.6" y="499.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.03%)</title><rect x="1178.8" y="483.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.06%)</title><rect x="1179.4" y="483.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (19 samples, 0.12%)</title><rect x="1180.1" y="483.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (10 samples, 0.06%)</title><rect x="1180.5" y="467.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="478.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.02%)</title><rect x="1180.6" y="451.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (12 samples, 0.07%)</title><rect x="1181.6" y="483.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 0.05%)</title><rect x="1182.5" y="483.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.03%)</title><rect x="1182.7" y="467.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="478.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.03%)</title><rect x="1183.5" y="483.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.5" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (62 samples, 0.38%)</title><rect x="1184.0" y="515.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.0" y="526.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (32 samples, 0.20%)</title><rect x="1184.2" y="499.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (32 samples, 0.20%)</title><rect x="1184.2" y="483.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.02%)</title><rect x="1184.5" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.02%)</title><rect x="1184.8" y="467.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 0.07%)</title><rect x="1185.1" y="467.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (10 samples, 0.06%)</title><rect x="1185.1" y="451.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.1" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.02%)</title><rect x="1185.4" y="435.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.03%)</title><rect x="1186.1" y="467.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.1" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.02%)</title><rect x="1186.1" y="451.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (18 samples, 0.11%)</title><rect x="1186.7" y="499.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.04%)</title><rect x="1187.1" y="483.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (5 samples, 0.03%)</title><rect x="1187.2" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.02%)</title><rect x="1187.7" y="483.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.02%)</title><rect x="1187.7" y="467.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.7" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.03%)</title><rect x="1188.0" y="499.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.0" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.03%)</title><rect x="1188.0" y="483.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.09%)</title><rect x="1188.7" y="515.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.09%)</title><rect x="1188.7" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.09%)</title><rect x="1188.7" y="483.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.09%)</title><rect x="1188.7" y="467.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.09%)</title><rect x="1188.7" y="451.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.06%)</title><rect x="1188.8" y="435.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.06%)</title><rect x="1188.8" y="419.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.06%)</title><rect x="1188.8" y="403.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.06%)</title><rect x="1188.8" y="387.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.06%)</title><rect x="1188.8" y="371.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.05%)</title><rect x="1188.8" y="355.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.05%)</title><rect x="1188.8" y="339.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.05%)</title><rect x="1188.8" y="323.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.05%)</title><rect x="1188.8" y="307.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.05%)</title><rect x="1188.8" y="291.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.03%)</title><rect x="1189.0" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.03%)</title><rect x="1189.0" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.03%)</title><rect x="1189.0" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.03%)</title><rect x="1189.0" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.03%)</title><rect x="1189.0" y="211.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.03%)</title><rect x="1189.0" y="195.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.03%)</title><rect x="1189.0" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.03%)</title><rect x="1189.0" y="163.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.03%)</title><rect x="1189.0" y="147.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.03%)</title><rect x="1189.0" y="131.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.03%)</title><rect x="1189.0" y="115.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.03%)</title><rect x="1189.0" y="99.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.03%)</title><rect x="1189.0" y="83.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.03%)</title><rect x="1189.0" y="67.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.03%)</title><rect x="1189.0" y="51.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.03%)</title><rect x="1189.0" y="35.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="46.0"></text>
</g>
</g>
</svg>
