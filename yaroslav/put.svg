<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (10,670 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>[NIO Selector #1 tid=39683] (5,207 samples, 48.80%)</title><rect x="10.1" y="691.0" width="575.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.1" y="702.0">[NIO Selector #1 tid=39683]</text>
</g>
<g>
<title>[unknown_Java] (16 samples, 0.15%)</title><rect x="10.6" y="675.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.6" y="686.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.04%)</title><rect x="11.9" y="659.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.9" y="670.0"></text>
</g>
<g>
<title>_res (4 samples, 0.04%)</title><rect x="11.9" y="643.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="14.9" y="654.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (5,177 samples, 48.52%)</title><rect x="12.3" y="675.0" width="572.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.3" y="686.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (621 samples, 5.82%)</title><rect x="13.5" y="659.0" width="68.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.5" y="670.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (9 samples, 0.08%)</title><rect x="13.6" y="643.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.6" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.03%)</title><rect x="14.3" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.03%)</title><rect x="14.3" y="611.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.3" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.03%)</title><rect x="14.3" y="595.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.03%)</title><rect x="14.3" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.03%)</title><rect x="14.3" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.3" y="574.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (24 samples, 0.22%)</title><rect x="14.6" y="643.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (21 samples, 0.20%)</title><rect x="15.0" y="627.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (14 samples, 0.13%)</title><rect x="15.6" y="611.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (7 samples, 0.07%)</title><rect x="15.8" y="595.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.8" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (4 samples, 0.04%)</title><rect x="16.1" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.1" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (6 samples, 0.06%)</title><rect x="16.5" y="595.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.5" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (4 samples, 0.04%)</title><rect x="16.7" y="579.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (586 samples, 5.49%)</title><rect x="17.3" y="643.0" width="64.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.3" y="654.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (586 samples, 5.49%)</title><rect x="17.3" y="627.0" width="64.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.3" y="638.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (579 samples, 5.43%)</title><rect x="17.3" y="611.0" width="64.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.3" y="622.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (562 samples, 5.27%)</title><rect x="17.4" y="595.0" width="62.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.4" y="606.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (6 samples, 0.06%)</title><rect x="19.5" y="579.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="22.5" y="590.0"></text>
</g>
<g>
<title>kevent (537 samples, 5.03%)</title><rect x="20.2" y="579.0" width="59.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="23.2" y="590.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.06%)</title><rect x="79.6" y="595.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.06%)</title><rect x="79.6" y="579.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.05%)</title><rect x="79.6" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.05%)</title><rect x="79.6" y="547.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.05%)</title><rect x="79.6" y="531.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (9 samples, 0.08%)</title><rect x="80.3" y="595.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.04%)</title><rect x="80.9" y="579.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.03%)</title><rect x="81.0" y="563.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="84.0" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (7 samples, 0.07%)</title><rect x="81.3" y="611.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.3" y="622.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (7 samples, 0.07%)</title><rect x="81.3" y="595.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (4,543 samples, 42.58%)</title><rect x="82.4" y="659.0" width="502.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.4" y="670.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (4,536 samples, 42.51%)</title><rect x="82.9" y="643.0" width="501.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.9" y="654.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4,289 samples, 40.20%)</title><rect x="83.5" y="627.0" width="474.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.5" y="638.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="89.6" y="611.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="92.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,193 samples, 39.30%)</title><rect x="90.0" y="611.0" width="463.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.0" y="622.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,193 samples, 39.30%)</title><rect x="90.0" y="595.0" width="463.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.0" y="606.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (4,164 samples, 39.03%)</title><rect x="90.0" y="579.0" width="460.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.0" y="590.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,032 samples, 9.67%)</title><rect x="90.0" y="563.0" width="114.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.0" y="574.0">one/nio/http/H..</text>
</g>
<g>
<title>gettimeofday (4 samples, 0.04%)</title><rect x="90.4" y="547.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="93.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,002 samples, 9.39%)</title><rect x="91.1" y="547.0" width="110.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="94.1" y="558.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (55 samples, 0.52%)</title><rect x="91.1" y="531.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="94.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (55 samples, 0.52%)</title><rect x="91.1" y="515.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.1" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (55 samples, 0.52%)</title><rect x="91.1" y="499.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.1" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (55 samples, 0.52%)</title><rect x="91.1" y="483.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.1" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (23 samples, 0.22%)</title><rect x="91.1" y="467.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (6 samples, 0.06%)</title><rect x="92.7" y="451.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.length (32 samples, 0.30%)</title><rect x="93.6" y="467.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.6" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.07%)</title><rect x="96.4" y="451.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="99.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (947 samples, 8.88%)</title><rect x="97.1" y="531.0" width="104.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.1" y="542.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session.write (947 samples, 8.88%)</title><rect x="97.1" y="515.0" width="104.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.1" y="526.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (947 samples, 8.88%)</title><rect x="97.1" y="499.0" width="104.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.1" y="510.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (947 samples, 8.88%)</title><rect x="97.1" y="483.0" width="104.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.1" y="494.0">one/nio/net/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (17 samples, 0.16%)</title><rect x="97.1" y="467.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.1" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (8 samples, 0.07%)</title><rect x="98.0" y="451.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (930 samples, 8.72%)</title><rect x="99.0" y="467.0" width="102.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.0" y="478.0">sun/nio/ch/S..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.04%)</title><rect x="100.2" y="451.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.03%)</title><rect x="100.4" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="100.4" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="103.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.03%)</title><rect x="100.4" y="403.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (910 samples, 8.53%)</title><rect x="100.8" y="451.0" width="100.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.8" y="462.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (910 samples, 8.53%)</title><rect x="100.8" y="435.0" width="100.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.8" y="446.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (908 samples, 8.51%)</title><rect x="101.0" y="419.0" width="100.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.0" y="430.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (15 samples, 0.14%)</title><rect x="101.0" y="403.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (893 samples, 8.37%)</title><rect x="102.7" y="403.0" width="98.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.7" y="414.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (876 samples, 8.21%)</title><rect x="104.6" y="387.0" width="96.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.6" y="398.0">sun/nio/ch/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (9 samples, 0.08%)</title><rect x="105.9" y="371.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="108.9" y="382.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.03%)</title><rect x="106.5" y="355.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="109.5" y="366.0"></text>
</g>
<g>
<title>write (853 samples, 7.99%)</title><rect x="107.1" y="371.0" width="94.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="110.1" y="382.0">write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (3 samples, 0.03%)</title><rect x="201.4" y="451.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (15 samples, 0.14%)</title><rect x="201.9" y="547.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.13%)</title><rect x="202.0" y="531.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (14 samples, 0.13%)</title><rect x="202.0" y="515.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (12 samples, 0.11%)</title><rect x="202.2" y="499.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (12 samples, 0.11%)</title><rect x="202.2" y="483.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.2" y="494.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (12 samples, 0.11%)</title><rect x="202.2" y="467.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.2" y="478.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (7 samples, 0.07%)</title><rect x="202.6" y="451.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.6" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.05%)</title><rect x="203.5" y="547.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="206.5" y="558.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="203.8" y="531.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="206.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (11 samples, 0.10%)</title><rect x="204.1" y="563.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="204.3" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.3" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.04%)</title><rect x="204.3" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.3" y="542.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.03%)</title><rect x="205.0" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.entity (3,121 samples, 29.25%)</title><rect x="205.3" y="563.0" width="345.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.3" y="574.0">ru/mail/polis/service/yaroslav/SimpleSer.entity</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.10%)</title><rect x="205.3" y="547.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.10%)</title><rect x="205.3" y="531.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.3" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.10%)</title><rect x="205.3" y="515.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.3" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.10%)</title><rect x="205.3" y="499.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.3" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.10%)</title><rect x="205.3" y="483.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.3" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.07%)</title><rect x="205.3" y="467.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="206.2" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.2" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="206.2" y="451.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.put (3,110 samples, 29.15%)</title><rect x="206.5" y="547.0" width="344.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.5" y="558.0">ru/mail/polis/service/yaroslav/SimpleSer.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.07%)</title><rect x="206.5" y="531.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.07%)</title><rect x="206.5" y="515.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.07%)</title><rect x="206.5" y="499.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.07%)</title><rect x="206.5" y="483.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.07%)</title><rect x="206.5" y="467.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.5" y="478.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.05%)</title><rect x="206.5" y="451.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (3,102 samples, 29.07%)</title><rect x="207.4" y="531.0" width="343.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.4" y="542.0">ru/mail/polis/dao/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (3,076 samples, 28.83%)</title><rect x="207.4" y="515.0" width="340.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.4" y="526.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (3,073 samples, 28.80%)</title><rect x="207.7" y="499.0" width="339.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.7" y="510.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (3,066 samples, 28.73%)</title><rect x="208.5" y="483.0" width="339.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="211.5" y="494.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (3 samples, 0.03%)</title><rect x="209.0" y="467.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="212.0" y="478.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="209.4" y="467.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="212.4" y="478.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.03%)</title><rect x="209.7" y="467.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="212.7" y="478.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (5 samples, 0.05%)</title><rect x="210.3" y="467.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="213.3" y="478.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (3,045 samples, 28.54%)</title><rect x="210.8" y="467.0" width="336.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="213.8" y="478.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, roc..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.04%)</title><rect x="211.5" y="451.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="214.5" y="462.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="211.9" y="451.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="214.9" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="212.3" y="451.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="215.3" y="462.0"></text>
</g>
<g>
<title>free (4 samples, 0.04%)</title><rect x="213.2" y="451.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="216.2" y="462.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.03%)</title><rect x="213.3" y="435.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="216.3" y="446.0"></text>
</g>
<g>
<title>free_tiny (14 samples, 0.13%)</title><rect x="213.6" y="451.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="216.6" y="462.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.03%)</title><rect x="214.1" y="435.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="217.1" y="446.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.05%)</title><rect x="214.6" y="435.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="217.6" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (17 samples, 0.16%)</title><rect x="215.1" y="451.0" width="1.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="218.1" y="462.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.04%)</title><rect x="215.7" y="435.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="218.7" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.06%)</title><rect x="216.1" y="435.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="219.1" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="216.5" y="419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="219.5" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (41 samples, 0.38%)</title><rect x="217.0" y="451.0" width="4.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="220.0" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (16 samples, 0.15%)</title><rect x="218.6" y="435.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="221.6" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (15 samples, 0.14%)</title><rect x="218.6" y="419.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="221.6" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (11 samples, 0.10%)</title><rect x="218.7" y="403.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="221.7" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (11 samples, 0.10%)</title><rect x="218.7" y="387.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="221.7" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (10 samples, 0.09%)</title><rect x="218.7" y="371.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="221.7" y="382.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (4 samples, 0.04%)</title><rect x="218.8" y="355.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="221.8" y="366.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="219.5" y="355.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="222.5" y="366.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="220.3" y="435.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="223.3" y="446.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (6 samples, 0.06%)</title><rect x="220.8" y="435.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="223.8" y="446.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="221.6" y="451.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="224.6" y="462.0"></text>
</g>
<g>
<title>operator new(unsigned long) (21 samples, 0.20%)</title><rect x="221.9" y="451.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="224.9" y="462.0"></text>
</g>
<g>
<title>malloc (19 samples, 0.18%)</title><rect x="222.0" y="435.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="225.0" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (17 samples, 0.16%)</title><rect x="222.2" y="419.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="225.2" y="430.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (15 samples, 0.14%)</title><rect x="222.3" y="403.0" width="1.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="225.3" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (15 samples, 0.14%)</title><rect x="222.3" y="387.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="225.3" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (6 samples, 0.06%)</title><rect x="223.3" y="371.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="226.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,922 samples, 27.39%)</title><rect x="224.2" y="451.0" width="323.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="227.2" y="462.0">rocksdb::CompactedDBImpl::Open(rocksdb::Opti..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,921 samples, 27.38%)</title><rect x="224.3" y="435.0" width="323.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="227.3" y="446.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions c..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,913 samples, 27.30%)</title><rect x="224.7" y="419.0" width="322.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="227.7" y="430.0">rocksdb::DB::Put(rocksdb::WriteOptions const..</text>
</g>
<g>
<title>free (4 samples, 0.04%)</title><rect x="224.9" y="403.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="227.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (5 samples, 0.05%)</title><rect x="225.5" y="403.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="228.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,827 samples, 26.49%)</title><rect x="226.1" y="403.0" width="312.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="229.1" y="414.0">rocksdb::DBImpl::Write(rocksdb::WriteOptio..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (8 samples, 0.07%)</title><rect x="226.4" y="387.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="229.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,801 samples, 26.25%)</title><rect x="227.3" y="387.0" width="309.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="230.3" y="398.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteO..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.04%)</title><rect x="232.2" y="371.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="235.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (4 samples, 0.04%)</title><rect x="232.7" y="371.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="235.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (6 samples, 0.06%)</title><rect x="233.2" y="371.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="236.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (597 samples, 5.60%)</title><rect x="233.8" y="371.0" width="66.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="236.8" y="382.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (593 samples, 5.56%)</title><rect x="234.2" y="355.0" width="65.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="237.2" y="366.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (589 samples, 5.52%)</title><rect x="234.6" y="339.0" width="65.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="237.6" y="350.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (8 samples, 0.07%)</title><rect x="235.1" y="323.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="238.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (577 samples, 5.41%)</title><rect x="235.9" y="323.0" width="63.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="238.9" y="334.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (4 samples, 0.04%)</title><rect x="237.3" y="307.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="240.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (14 samples, 0.13%)</title><rect x="237.7" y="307.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="240.7" y="318.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.05%)</title><rect x="238.4" y="291.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="241.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (3 samples, 0.03%)</title><rect x="238.9" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="241.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (546 samples, 5.12%)</title><rect x="239.3" y="307.0" width="60.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="242.3" y="318.0">rocksd..</text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (3 samples, 0.03%)</title><rect x="240.2" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="243.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (534 samples, 5.00%)</title><rect x="240.6" y="291.0" width="59.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="243.6" y="302.0">rocksd..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="240.9" y="275.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="243.9" y="286.0"></text>
</g>
<g>
<title>write (528 samples, 4.95%)</title><rect x="241.2" y="275.0" width="58.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="244.2" y="286.0">write</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (10 samples, 0.09%)</title><rect x="300.3" y="371.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="303.3" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.04%)</title><rect x="300.9" y="355.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="303.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (197 samples, 1.85%)</title><rect x="301.4" y="371.0" width="21.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="304.4" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (3 samples, 0.03%)</title><rect x="302.3" y="355.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="305.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (186 samples, 1.74%)</title><rect x="302.6" y="355.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="305.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (4 samples, 0.04%)</title><rect x="303.6" y="339.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="306.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (173 samples, 1.62%)</title><rect x="304.1" y="339.0" width="19.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="307.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (166 samples, 1.56%)</title><rect x="304.8" y="323.0" width="18.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="307.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (156 samples, 1.46%)</title><rect x="305.4" y="307.0" width="17.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="308.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (137 samples, 1.28%)</title><rect x="307.5" y="291.0" width="15.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="310.5" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.03%)</title><rect x="314.5" y="275.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="317.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (7 samples, 0.07%)</title><rect x="314.8" y="275.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="317.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (5 samples, 0.05%)</title><rect x="315.0" y="259.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="318.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (5 samples, 0.05%)</title><rect x="315.6" y="275.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="318.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="315.8" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="318.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (54 samples, 0.51%)</title><rect x="316.1" y="275.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="319.1" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.06%)</title><rect x="317.6" y="259.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="320.6" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.07%)</title><rect x="318.2" y="259.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="321.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (27 samples, 0.25%)</title><rect x="319.0" y="259.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="322.0" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (17 samples, 0.16%)</title><rect x="320.1" y="243.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="323.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="322.1" y="275.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="325.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="322.6" y="307.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="325.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (54 samples, 0.51%)</title><rect x="323.2" y="371.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="326.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (47 samples, 0.44%)</title><rect x="324.0" y="355.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="327.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (44 samples, 0.41%)</title><rect x="324.3" y="339.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="327.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (40 samples, 0.37%)</title><rect x="324.7" y="323.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="327.7" y="334.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.06%)</title><rect x="324.9" y="307.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="327.9" y="318.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.06%)</title><rect x="324.9" y="291.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="327.9" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.05%)</title><rect x="324.9" y="275.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="327.9" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="324.9" y="259.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="327.9" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.05%)</title><rect x="324.9" y="243.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="327.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (30 samples, 0.28%)</title><rect x="325.6" y="307.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="328.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (29 samples, 0.27%)</title><rect x="325.7" y="291.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="328.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (26 samples, 0.24%)</title><rect x="326.1" y="275.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="329.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 0.07%)</title><rect x="328.1" y="259.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="331.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="328.5" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="331.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (946 samples, 8.87%)</title><rect x="329.3" y="371.0" width="104.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="332.3" y="382.0">rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (946 samples, 8.87%)</title><rect x="329.3" y="355.0" width="104.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="332.3" y="366.0">rocksdb::Wri..</text>
</g>
<g>
<title>sched_yield (4 samples, 0.04%)</title><rect x="329.8" y="339.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="332.8" y="350.0"></text>
</g>
<g>
<title>xdrrec_ops (936 samples, 8.77%)</title><rect x="330.4" y="339.0" width="103.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="333.4" y="350.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.04%)</title><rect x="434.2" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="437.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (914 samples, 8.57%)</title><rect x="434.7" y="371.0" width="101.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="437.7" y="382.0">rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (912 samples, 8.55%)</title><rect x="434.9" y="355.0" width="100.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="437.9" y="366.0">rocksdb::Wri..</text>
</g>
<g>
<title>sched_yield (6 samples, 0.06%)</title><rect x="437.2" y="339.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="440.2" y="350.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (6 samples, 0.06%)</title><rect x="437.9" y="339.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="440.9" y="350.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.06%)</title><rect x="437.9" y="323.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="440.9" y="334.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.03%)</title><rect x="438.2" y="307.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="441.2" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.03%)</title><rect x="438.5" y="339.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="441.5" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="438.5" y="323.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="441.5" y="334.0"></text>
</g>
<g>
<title>xdrrec_ops (876 samples, 8.21%)</title><rect x="438.9" y="339.0" width="96.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="441.9" y="350.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.03%)</title><rect x="536.0" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="539.0" y="382.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (7 samples, 0.07%)</title><rect x="536.3" y="371.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="539.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.04%)</title><rect x="536.6" y="355.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="539.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.04%)</title><rect x="537.4" y="387.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="540.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.03%)</title><rect x="538.0" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="541.0" y="398.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (3 samples, 0.03%)</title><rect x="538.4" y="387.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="541.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.03%)</title><rect x="538.7" y="403.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="541.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (18 samples, 0.17%)</title><rect x="539.1" y="403.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="542.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (11 samples, 0.10%)</title><rect x="539.5" y="387.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="542.5" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (6 samples, 0.06%)</title><rect x="539.9" y="371.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="542.9" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.03%)</title><rect x="540.7" y="387.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="543.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (31 samples, 0.29%)</title><rect x="541.1" y="403.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="544.1" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (20 samples, 0.19%)</title><rect x="541.4" y="387.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="544.4" y="398.0"></text>
</g>
<g>
<title>operator new(unsigned long) (16 samples, 0.15%)</title><rect x="541.8" y="371.0" width="1.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="544.8" y="382.0"></text>
</g>
<g>
<title>malloc (16 samples, 0.15%)</title><rect x="541.8" y="355.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="544.8" y="366.0"></text>
</g>
<g>
<title>malloc_zone_malloc (16 samples, 0.15%)</title><rect x="541.8" y="339.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="544.8" y="350.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (15 samples, 0.14%)</title><rect x="541.9" y="323.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="544.9" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (15 samples, 0.14%)</title><rect x="541.9" y="307.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="544.9" y="318.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (8 samples, 0.07%)</title><rect x="542.7" y="291.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="545.7" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (6 samples, 0.06%)</title><rect x="543.6" y="387.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="546.6" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (5 samples, 0.05%)</title><rect x="543.7" y="371.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="546.7" y="382.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="543.9" y="355.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="546.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (17 samples, 0.16%)</title><rect x="544.5" y="403.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="547.5" y="414.0"></text>
</g>
<g>
<title>free (5 samples, 0.05%)</title><rect x="544.6" y="387.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="547.6" y="398.0"></text>
</g>
<g>
<title>free_tiny (9 samples, 0.08%)</title><rect x="545.1" y="387.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="548.1" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.03%)</title><rect x="546.5" y="403.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="549.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.03%)</title><rect x="547.0" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="550.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (9 samples, 0.08%)</title><rect x="547.6" y="515.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="550.6" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (5 samples, 0.05%)</title><rect x="547.6" y="499.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="550.6" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.05%)</title><rect x="547.6" y="483.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="550.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.05%)</title><rect x="547.6" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="550.6" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.04%)</title><rect x="548.1" y="499.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.1" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="548.1" y="483.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="548.1" y="467.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="551.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (17 samples, 0.16%)</title><rect x="548.6" y="515.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="551.6" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="548.6" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="551.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (14 samples, 0.13%)</title><rect x="548.9" y="499.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (9 samples, 0.08%)</title><rect x="548.9" y="483.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.9" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.08%)</title><rect x="548.9" y="467.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="551.9" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.05%)</title><rect x="549.9" y="483.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.9" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="549.9" y="467.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.9" y="478.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (29 samples, 0.27%)</title><rect x="550.5" y="579.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (29 samples, 0.27%)</title><rect x="550.5" y="563.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (19 samples, 0.18%)</title><rect x="550.5" y="547.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.09%)</title><rect x="552.6" y="547.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="555.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (10 samples, 0.09%)</title><rect x="552.6" y="531.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="555.6" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (10 samples, 0.09%)</title><rect x="552.6" y="515.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="555.6" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (38 samples, 0.36%)</title><rect x="553.7" y="611.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="556.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (24 samples, 0.22%)</title><rect x="554.1" y="595.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="557.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (24 samples, 0.22%)</title><rect x="554.1" y="579.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (24 samples, 0.22%)</title><rect x="554.1" y="563.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (24 samples, 0.22%)</title><rect x="554.1" y="547.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="557.1" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (10 samples, 0.09%)</title><rect x="556.8" y="595.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.8" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (241 samples, 2.26%)</title><rect x="557.9" y="627.0" width="26.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.9" y="638.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (241 samples, 2.26%)</title><rect x="557.9" y="611.0" width="26.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.9" y="622.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.06%)</title><rect x="557.9" y="595.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="560.9" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="558.0" y="579.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="558.0" y="563.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="561.0" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (235 samples, 2.20%)</title><rect x="558.5" y="595.0" width="26.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.5" y="606.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.03%)</title><rect x="558.5" y="579.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="561.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.03%)</title><rect x="558.5" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="561.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (232 samples, 2.17%)</title><rect x="558.9" y="579.0" width="25.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="561.9" y="590.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (232 samples, 2.17%)</title><rect x="558.9" y="563.0" width="25.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.9" y="574.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (8 samples, 0.07%)</title><rect x="558.9" y="547.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="561.9" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.07%)</title><rect x="558.9" y="531.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.9" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.04%)</title><rect x="559.0" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="562.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.04%)</title><rect x="559.0" y="499.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="562.0" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.04%)</title><rect x="559.0" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.0" y="494.0"></text>
</g>
<g>
<title>unsafe_arraycopy (3 samples, 0.03%)</title><rect x="559.1" y="467.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="562.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.03%)</title><rect x="559.4" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="562.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.03%)</title><rect x="559.4" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="562.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.03%)</title><rect x="559.4" y="483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="562.4" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.03%)</title><rect x="559.4" y="467.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="562.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (208 samples, 1.95%)</title><rect x="559.9" y="547.0" width="23.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.9" y="558.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (205 samples, 1.92%)</title><rect x="560.2" y="531.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="563.2" y="542.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (205 samples, 1.92%)</title><rect x="560.2" y="515.0" width="22.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="563.2" y="526.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (6 samples, 0.06%)</title><rect x="561.4" y="499.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="564.4" y="510.0"></text>
</g>
<g>
<title>read (188 samples, 1.76%)</title><rect x="562.1" y="499.0" width="20.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="565.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.10%)</title><rect x="582.9" y="547.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="585.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.06%)</title><rect x="583.0" y="531.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.0" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.03%)</title><rect x="583.3" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="586.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.04%)</title><rect x="583.6" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="586.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (4 samples, 0.04%)</title><rect x="584.1" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="587.1" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.04%)</title><rect x="584.1" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="587.1" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="584.5" y="643.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="587.5" y="654.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="584.5" y="627.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="587.5" y="638.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.03%)</title><rect x="584.5" y="611.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="587.5" y="622.0"></text>
</g>
<g>
<title>_res (3 samples, 0.03%)</title><rect x="584.5" y="595.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="587.5" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="584.8" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="587.8" y="686.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.03%)</title><rect x="585.2" y="675.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="588.2" y="686.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (4 samples, 0.04%)</title><rect x="585.5" y="675.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="588.5" y="686.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25091] (5,222 samples, 48.94%)</title><rect x="586.0" y="691.0" width="577.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="589.0" y="702.0">[NIO Selector #2 tid=25091]</text>
</g>
<g>
<title>[unknown_Java] (16 samples, 0.15%)</title><rect x="586.3" y="675.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="589.3" y="686.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (5,201 samples, 48.74%)</title><rect x="588.1" y="675.0" width="575.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.1" y="686.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (631 samples, 5.91%)</title><rect x="589.4" y="659.0" width="69.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="592.4" y="670.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (13 samples, 0.12%)</title><rect x="589.9" y="643.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="592.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.03%)</title><rect x="591.0" y="627.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="594.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.03%)</title><rect x="591.0" y="611.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="594.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.03%)</title><rect x="591.0" y="595.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="594.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.03%)</title><rect x="591.0" y="579.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="594.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.03%)</title><rect x="591.0" y="563.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="594.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (32 samples, 0.30%)</title><rect x="591.4" y="643.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="594.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (29 samples, 0.27%)</title><rect x="591.7" y="627.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="594.7" y="638.0"></text>
</g>
<g>
<title>_res (3 samples, 0.03%)</title><rect x="592.8" y="611.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="595.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (12 samples, 0.11%)</title><rect x="593.1" y="611.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="596.1" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (6 samples, 0.06%)</title><rect x="593.1" y="595.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="596.1" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (5 samples, 0.05%)</title><rect x="593.3" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="596.3" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (6 samples, 0.06%)</title><rect x="593.8" y="595.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="596.8" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (5 samples, 0.05%)</title><rect x="593.9" y="579.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="596.9" y="590.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.04%)</title><rect x="594.5" y="611.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="597.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (579 samples, 5.43%)</title><rect x="595.0" y="643.0" width="64.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="598.0" y="654.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (579 samples, 5.43%)</title><rect x="595.0" y="627.0" width="64.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="598.0" y="638.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (567 samples, 5.31%)</title><rect x="595.0" y="611.0" width="62.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="598.0" y="622.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (545 samples, 5.11%)</title><rect x="595.5" y="595.0" width="60.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="598.5" y="606.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.05%)</title><rect x="597.5" y="579.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="600.5" y="590.0"></text>
</g>
<g>
<title>kevent (522 samples, 4.89%)</title><rect x="598.0" y="579.0" width="57.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="601.0" y="590.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 0.07%)</title><rect x="655.7" y="595.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="658.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 0.07%)</title><rect x="655.7" y="579.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.07%)</title><rect x="655.7" y="563.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="658.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.07%)</title><rect x="655.8" y="547.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.07%)</title><rect x="655.8" y="531.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="658.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.05%)</title><rect x="656.6" y="595.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.6" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (4 samples, 0.04%)</title><rect x="656.7" y="579.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.05%)</title><rect x="657.2" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (12 samples, 0.11%)</title><rect x="657.7" y="611.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.7" y="622.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (12 samples, 0.11%)</title><rect x="657.7" y="595.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="660.7" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (4,558 samples, 42.72%)</title><rect x="659.2" y="659.0" width="504.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="662.2" y="670.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (4,546 samples, 42.61%)</title><rect x="660.2" y="643.0" width="502.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="663.2" y="654.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4,291 samples, 40.22%)</title><rect x="660.9" y="627.0" width="474.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="663.9" y="638.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.03%)</title><rect x="666.4" y="611.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="669.4" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="666.7" y="611.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="669.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,200 samples, 39.36%)</title><rect x="667.1" y="611.0" width="464.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="670.1" y="622.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,200 samples, 39.36%)</title><rect x="667.1" y="595.0" width="464.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="670.1" y="606.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (4,185 samples, 39.22%)</title><rect x="667.1" y="579.0" width="462.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="670.1" y="590.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (949 samples, 8.89%)</title><rect x="667.1" y="563.0" width="105.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.1" y="574.0">one/nio/http..</text>
</g>
<g>
<title>gettimeofday (4 samples, 0.04%)</title><rect x="667.6" y="547.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="670.6" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (919 samples, 8.61%)</title><rect x="668.0" y="547.0" width="101.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="671.0" y="558.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (59 samples, 0.55%)</title><rect x="668.0" y="531.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="671.0" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (59 samples, 0.55%)</title><rect x="668.0" y="515.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="671.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (59 samples, 0.55%)</title><rect x="668.0" y="499.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.0" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (59 samples, 0.55%)</title><rect x="668.0" y="483.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (22 samples, 0.21%)</title><rect x="668.0" y="467.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="671.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (8 samples, 0.07%)</title><rect x="669.6" y="451.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="672.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.length (37 samples, 0.35%)</title><rect x="670.4" y="467.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.4" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="673.9" y="451.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="676.9" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (860 samples, 8.06%)</title><rect x="674.5" y="531.0" width="95.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="677.5" y="542.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session.write (860 samples, 8.06%)</title><rect x="674.5" y="515.0" width="95.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.5" y="526.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (859 samples, 8.05%)</title><rect x="674.6" y="499.0" width="95.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.6" y="510.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (859 samples, 8.05%)</title><rect x="674.6" y="483.0" width="95.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.6" y="494.0">one/nio/net..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.12%)</title><rect x="674.6" y="467.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.6" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (5 samples, 0.05%)</title><rect x="675.4" y="451.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="678.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (846 samples, 7.93%)</title><rect x="676.1" y="467.0" width="93.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="679.1" y="478.0">sun/nio/ch/..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (3 samples, 0.03%)</title><rect x="676.7" y="451.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (826 samples, 7.74%)</title><rect x="677.7" y="451.0" width="91.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="680.7" y="462.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (824 samples, 7.72%)</title><rect x="678.0" y="435.0" width="91.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="681.0" y="446.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (820 samples, 7.69%)</title><rect x="678.4" y="419.0" width="90.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="681.4" y="430.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (7 samples, 0.07%)</title><rect x="678.4" y="403.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="681.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (813 samples, 7.62%)</title><rect x="679.2" y="403.0" width="89.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.2" y="414.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (798 samples, 7.48%)</title><rect x="680.8" y="387.0" width="88.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="683.8" y="398.0">sun/nio/ch..</text>
</g>
<g>
<title>JNI_OnLoad (3 samples, 0.03%)</title><rect x="683.4" y="371.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="686.4" y="382.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (6 samples, 0.06%)</title><rect x="683.7" y="371.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="686.7" y="382.0"></text>
</g>
<g>
<title>write (763 samples, 7.15%)</title><rect x="684.7" y="371.0" width="84.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="687.7" y="382.0">write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (4 samples, 0.04%)</title><rect x="769.2" y="451.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="772.2" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.07%)</title><rect x="769.6" y="547.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="772.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.06%)</title><rect x="769.8" y="531.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.8" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.06%)</title><rect x="769.8" y="515.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="772.8" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.05%)</title><rect x="769.9" y="499.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="772.9" y="510.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.05%)</title><rect x="769.9" y="483.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="772.9" y="494.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (5 samples, 0.05%)</title><rect x="769.9" y="467.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="772.9" y="478.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (3 samples, 0.03%)</title><rect x="770.0" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="773.0" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (15 samples, 0.14%)</title><rect x="770.4" y="547.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="773.4" y="558.0"></text>
</g>
<g>
<title>gettimeofday (10 samples, 0.09%)</title><rect x="770.6" y="531.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="773.6" y="542.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (6 samples, 0.06%)</title><rect x="771.1" y="515.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="774.1" y="526.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.03%)</title><rect x="771.7" y="531.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="774.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.08%)</title><rect x="772.1" y="563.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="775.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.entity (3,227 samples, 30.24%)</title><rect x="773.1" y="563.0" width="356.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.1" y="574.0">ru/mail/polis/service/yaroslav/SimpleSer.entity</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.12%)</title><rect x="773.1" y="547.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="776.1" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.12%)</title><rect x="773.1" y="531.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.1" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.12%)</title><rect x="773.1" y="515.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.1" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.12%)</title><rect x="773.1" y="499.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.1" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13 samples, 0.12%)</title><rect x="773.1" y="483.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="776.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.09%)</title><rect x="773.1" y="467.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="776.1" y="478.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.04%)</title><rect x="773.7" y="451.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="776.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="774.2" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="777.2" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="774.2" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.put (3,214 samples, 30.12%)</title><rect x="774.5" y="547.0" width="355.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="777.5" y="558.0">ru/mail/polis/service/yaroslav/SimpleSer.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.11%)</title><rect x="774.5" y="531.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="777.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.11%)</title><rect x="774.5" y="515.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="777.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.11%)</title><rect x="774.5" y="499.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="777.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.11%)</title><rect x="774.5" y="483.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="777.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.11%)</title><rect x="774.5" y="467.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="777.5" y="478.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.05%)</title><rect x="774.6" y="451.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="777.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.05%)</title><rect x="775.2" y="451.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="778.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (3,202 samples, 30.01%)</title><rect x="775.8" y="531.0" width="354.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="778.8" y="542.0">ru/mail/polis/dao/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (3,172 samples, 29.73%)</title><rect x="775.8" y="515.0" width="350.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="778.8" y="526.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.04%)</title><rect x="775.9" y="499.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="778.9" y="510.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (3,167 samples, 29.68%)</title><rect x="776.4" y="499.0" width="350.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="779.4" y="510.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (3,159 samples, 29.61%)</title><rect x="777.3" y="483.0" width="349.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="780.3" y="494.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (6 samples, 0.06%)</title><rect x="777.8" y="467.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="780.8" y="478.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="778.8" y="467.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="781.8" y="478.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (5 samples, 0.05%)</title><rect x="779.2" y="467.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="782.2" y="478.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (3,134 samples, 29.37%)</title><rect x="779.8" y="467.0" width="346.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="782.8" y="478.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rock..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="781.6" y="451.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="784.6" y="462.0"></text>
</g>
<g>
<title>_setcontext (3 samples, 0.03%)</title><rect x="782.0" y="451.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="785.0" y="462.0"></text>
</g>
<g>
<title>free (10 samples, 0.09%)</title><rect x="782.4" y="451.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="785.4" y="462.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.05%)</title><rect x="782.9" y="435.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="785.9" y="446.0"></text>
</g>
<g>
<title>free_tiny (19 samples, 0.18%)</title><rect x="783.5" y="451.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="786.5" y="462.0"></text>
</g>
<g>
<title>tiny_free_no_lock (14 samples, 0.13%)</title><rect x="784.0" y="435.0" width="1.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="787.0" y="446.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (3 samples, 0.03%)</title><rect x="785.2" y="419.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="788.2" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (18 samples, 0.17%)</title><rect x="785.6" y="451.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="788.6" y="462.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.03%)</title><rect x="786.0" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="789.0" y="446.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="786.3" y="435.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="789.3" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.07%)</title><rect x="786.8" y="435.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="789.8" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.05%)</title><rect x="787.0" y="419.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="790.0" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.04%)</title><rect x="787.0" y="403.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="790.0" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="787.0" y="387.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="790.0" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="787.0" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="790.0" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (36 samples, 0.34%)</title><rect x="787.6" y="451.0" width="3.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="790.6" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (12 samples, 0.11%)</title><rect x="789.0" y="435.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="792.0" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (11 samples, 0.10%)</title><rect x="789.1" y="419.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="792.1" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (9 samples, 0.08%)</title><rect x="789.2" y="403.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="792.2" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (9 samples, 0.08%)</title><rect x="789.2" y="387.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="792.2" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (9 samples, 0.08%)</title><rect x="789.2" y="371.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="792.2" y="382.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (4 samples, 0.04%)</title><rect x="789.2" y="355.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="792.2" y="366.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="790.3" y="435.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="793.3" y="446.0"></text>
</g>
<g>
<title>compiler_barrier() (3 samples, 0.03%)</title><rect x="790.8" y="435.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="793.8" y="446.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (4 samples, 0.04%)</title><rect x="791.1" y="435.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="794.1" y="446.0"></text>
</g>
<g>
<title>operator new(unsigned long) (25 samples, 0.23%)</title><rect x="791.8" y="451.0" width="2.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="794.8" y="462.0"></text>
</g>
<g>
<title>malloc (24 samples, 0.22%)</title><rect x="791.9" y="435.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="794.9" y="446.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.03%)</title><rect x="792.1" y="419.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="795.1" y="430.0"></text>
</g>
<g>
<title>malloc_zone_malloc (18 samples, 0.17%)</title><rect x="792.4" y="419.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="795.4" y="430.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.03%)</title><rect x="792.5" y="403.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="795.5" y="414.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (14 samples, 0.13%)</title><rect x="792.9" y="403.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="795.9" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (13 samples, 0.12%)</title><rect x="793.0" y="387.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="796.0" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="794.1" y="371.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="797.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,992 samples, 28.04%)</title><rect x="794.5" y="451.0" width="330.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="797.5" y="462.0">rocksdb::CompactedDBImpl::Open(rocksdb::Optio..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,991 samples, 28.03%)</title><rect x="794.6" y="435.0" width="330.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="797.6" y="446.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions co..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,986 samples, 27.99%)</title><rect x="794.6" y="419.0" width="330.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="797.6" y="430.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;..</text>
</g>
<g>
<title>free (3 samples, 0.03%)</title><rect x="795.3" y="403.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="798.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,897 samples, 27.15%)</title><rect x="795.7" y="403.0" width="320.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="798.7" y="414.0">rocksdb::DBImpl::Write(rocksdb::WriteOption..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.04%)</title><rect x="796.0" y="387.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="799.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,875 samples, 26.94%)</title><rect x="796.4" y="387.0" width="318.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="799.4" y="398.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOp..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.04%)</title><rect x="800.2" y="371.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="803.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (6 samples, 0.06%)</title><rect x="800.7" y="371.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="803.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (592 samples, 5.55%)</title><rect x="801.4" y="371.0" width="65.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="804.4" y="382.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (585 samples, 5.48%)</title><rect x="801.9" y="355.0" width="64.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="804.9" y="366.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (577 samples, 5.41%)</title><rect x="802.7" y="339.0" width="63.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="805.7" y="350.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (13 samples, 0.12%)</title><rect x="802.9" y="323.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="805.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (562 samples, 5.27%)</title><rect x="804.4" y="323.0" width="62.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="807.4" y="334.0">rocksd..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (3 samples, 0.03%)</title><rect x="805.3" y="307.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="808.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (4 samples, 0.04%)</title><rect x="805.6" y="307.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="808.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (547 samples, 5.13%)</title><rect x="806.0" y="307.0" width="60.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="809.0" y="318.0">rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attrs (9 samples, 0.08%)</title><rect x="806.5" y="291.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="809.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="807.6" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="810.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (529 samples, 4.96%)</title><rect x="808.0" y="291.0" width="58.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="811.0" y="302.0">rocksd..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (5 samples, 0.05%)</title><rect x="808.4" y="275.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="811.4" y="286.0"></text>
</g>
<g>
<title>write (521 samples, 4.88%)</title><rect x="808.9" y="275.0" width="57.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="811.9" y="286.0">write</text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (3 samples, 0.03%)</title><rect x="866.9" y="371.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="869.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (9 samples, 0.08%)</title><rect x="867.4" y="371.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="870.4" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.04%)</title><rect x="868.0" y="355.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="871.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (173 samples, 1.62%)</title><rect x="868.6" y="371.0" width="19.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="871.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (3 samples, 0.03%)</title><rect x="869.7" y="355.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="872.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (157 samples, 1.47%)</title><rect x="870.1" y="355.0" width="17.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="873.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (152 samples, 1.42%)</title><rect x="870.6" y="339.0" width="16.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.03%)</title><rect x="870.9" y="323.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="873.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (146 samples, 1.37%)</title><rect x="871.3" y="323.0" width="16.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="874.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (3 samples, 0.03%)</title><rect x="871.6" y="307.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (132 samples, 1.24%)</title><rect x="872.2" y="307.0" width="14.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="875.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (120 samples, 1.12%)</title><rect x="873.5" y="291.0" width="13.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="876.5" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (7 samples, 0.07%)</title><rect x="880.6" y="275.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="883.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.03%)</title><rect x="881.3" y="275.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="884.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.03%)</title><rect x="881.7" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="884.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (38 samples, 0.36%)</title><rect x="882.0" y="275.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="885.0" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.03%)</title><rect x="883.8" y="259.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="886.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (17 samples, 0.16%)</title><rect x="884.2" y="259.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.2" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (12 samples, 0.11%)</title><rect x="884.8" y="243.0" width="1.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="887.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="886.3" y="275.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="886.8" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="889.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.03%)</title><rect x="887.1" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="890.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.03%)</title><rect x="887.4" y="355.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="890.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (27 samples, 0.25%)</title><rect x="887.8" y="371.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="890.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (22 samples, 0.21%)</title><rect x="888.3" y="355.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="891.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (21 samples, 0.20%)</title><rect x="888.4" y="339.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (20 samples, 0.19%)</title><rect x="888.5" y="323.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.5" y="334.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="888.9" y="307.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="891.9" y="318.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="888.9" y="291.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="891.9" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="888.9" y="275.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="891.9" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="888.9" y="259.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="891.9" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="888.9" y="243.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="891.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (12 samples, 0.11%)</title><rect x="889.4" y="307.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="892.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.10%)</title><rect x="889.5" y="291.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="892.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.09%)</title><rect x="889.6" y="275.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="892.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (3 samples, 0.03%)</title><rect x="890.7" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1,023 samples, 9.59%)</title><rect x="891.2" y="371.0" width="113.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.2" y="382.0">rocksdb::Write..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1,022 samples, 9.58%)</title><rect x="891.2" y="355.0" width="113.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="894.2" y="366.0">rocksdb::Write..</text>
</g>
<g>
<title>sched_yield (3 samples, 0.03%)</title><rect x="891.8" y="339.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="894.8" y="350.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.03%)</title><rect x="892.2" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.2" y="350.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.03%)</title><rect x="892.2" y="323.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="895.2" y="334.0"></text>
</g>
<g>
<title>xdrrec_ops (1,008 samples, 9.45%)</title><rect x="892.7" y="339.0" width="111.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="895.7" y="350.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.04%)</title><rect x="1004.3" y="371.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (982 samples, 9.20%)</title><rect x="1004.8" y="371.0" width="108.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1007.8" y="382.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (966 samples, 9.05%)</title><rect x="1004.9" y="355.0" width="106.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.9" y="366.0">rocksdb::Writ..</text>
</g>
<g>
<title>sched_yield (6 samples, 0.06%)</title><rect x="1007.9" y="339.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1010.9" y="350.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (17 samples, 0.16%)</title><rect x="1008.5" y="339.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.5" y="350.0"></text>
</g>
<g>
<title>clock_gettime (17 samples, 0.16%)</title><rect x="1008.5" y="323.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1011.5" y="334.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (11 samples, 0.10%)</title><rect x="1008.9" y="307.0" width="1.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1011.9" y="318.0"></text>
</g>
<g>
<title>_res (8 samples, 0.07%)</title><rect x="1009.1" y="291.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1012.1" y="302.0"></text>
</g>
<g>
<title>mach_timebase_info (3 samples, 0.03%)</title><rect x="1010.1" y="307.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1013.1" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (5 samples, 0.05%)</title><rect x="1010.4" y="339.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1013.4" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.05%)</title><rect x="1010.4" y="323.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1013.4" y="334.0"></text>
</g>
<g>
<title>xdrrec_ops (909 samples, 8.52%)</title><rect x="1011.2" y="339.0" width="100.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1014.2" y="350.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (4 samples, 0.04%)</title><rect x="1111.7" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.7" y="366.0"></text>
</g>
<g>
<title>sched_yield (7 samples, 0.07%)</title><rect x="1112.1" y="355.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1115.1" y="366.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (5 samples, 0.05%)</title><rect x="1113.8" y="371.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.04%)</title><rect x="1113.9" y="355.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.03%)</title><rect x="1114.6" y="387.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.04%)</title><rect x="1114.9" y="387.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.03%)</title><rect x="1116.1" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (20 samples, 0.19%)</title><rect x="1116.5" y="403.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (13 samples, 0.12%)</title><rect x="1116.8" y="387.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.8" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (9 samples, 0.08%)</title><rect x="1117.0" y="371.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.0" y="382.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.05%)</title><rect x="1117.5" y="355.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1120.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (35 samples, 0.33%)</title><rect x="1118.7" y="403.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.7" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="1118.9" y="387.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1121.9" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (18 samples, 0.17%)</title><rect x="1119.2" y="387.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.2" y="398.0"></text>
</g>
<g>
<title>operator new(unsigned long) (18 samples, 0.17%)</title><rect x="1119.2" y="371.0" width="2.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1122.2" y="382.0"></text>
</g>
<g>
<title>malloc (18 samples, 0.17%)</title><rect x="1119.2" y="355.0" width="2.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1122.2" y="366.0"></text>
</g>
<g>
<title>malloc_zone_malloc (17 samples, 0.16%)</title><rect x="1119.3" y="339.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1122.3" y="350.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (14 samples, 0.13%)</title><rect x="1119.7" y="323.0" width="1.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1122.7" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (14 samples, 0.13%)</title><rect x="1119.7" y="307.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1122.7" y="318.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (7 samples, 0.07%)</title><rect x="1120.4" y="291.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1123.4" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (10 samples, 0.09%)</title><rect x="1121.2" y="387.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.2" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (8 samples, 0.07%)</title><rect x="1121.4" y="371.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.4" y="382.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (7 samples, 0.07%)</title><rect x="1121.5" y="355.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1124.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (13 samples, 0.12%)</title><rect x="1122.5" y="403.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.5" y="414.0"></text>
</g>
<g>
<title>free (7 samples, 0.07%)</title><rect x="1122.5" y="387.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1125.5" y="398.0"></text>
</g>
<g>
<title>tiny_size (6 samples, 0.06%)</title><rect x="1122.7" y="371.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1125.7" y="382.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.05%)</title><rect x="1123.3" y="387.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1126.3" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.05%)</title><rect x="1124.0" y="403.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.03%)</title><rect x="1125.1" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.03%)</title><rect x="1125.4" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.4" y="462.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.04%)</title><rect x="1126.0" y="451.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (14 samples, 0.13%)</title><rect x="1126.6" y="515.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1129.6" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (11 samples, 0.10%)</title><rect x="1126.6" y="499.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1129.6" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (11 samples, 0.10%)</title><rect x="1126.6" y="483.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1129.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.10%)</title><rect x="1126.6" y="467.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1129.6" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="1127.8" y="499.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1130.8" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1127.8" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1130.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1127.8" y="467.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1130.8" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1127.8" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1130.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (16 samples, 0.15%)</title><rect x="1128.2" y="515.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1131.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (15 samples, 0.14%)</title><rect x="1128.3" y="499.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1131.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (12 samples, 0.11%)</title><rect x="1128.3" y="483.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1131.3" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.11%)</title><rect x="1128.3" y="467.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1131.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1129.0" y="451.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1132.0" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="1129.6" y="483.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1132.6" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1129.6" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1132.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (15 samples, 0.14%)</title><rect x="1129.9" y="579.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1132.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (15 samples, 0.14%)</title><rect x="1129.9" y="563.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1132.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.09%)</title><rect x="1129.9" y="547.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1132.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.05%)</title><rect x="1131.1" y="547.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1134.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.05%)</title><rect x="1131.1" y="531.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1134.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.05%)</title><rect x="1131.1" y="515.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1134.1" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (35 samples, 0.33%)</title><rect x="1131.6" y="611.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1134.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (19 samples, 0.18%)</title><rect x="1131.7" y="595.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1134.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (19 samples, 0.18%)</title><rect x="1131.7" y="579.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1134.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (19 samples, 0.18%)</title><rect x="1131.7" y="563.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1134.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (19 samples, 0.18%)</title><rect x="1131.7" y="547.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1134.7" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (14 samples, 0.13%)</title><rect x="1133.9" y="595.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1136.9" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (248 samples, 2.32%)</title><rect x="1135.5" y="627.0" width="27.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1138.5" y="638.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (248 samples, 2.32%)</title><rect x="1135.5" y="611.0" width="27.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1138.5" y="622.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="1135.5" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1138.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (245 samples, 2.30%)</title><rect x="1135.8" y="595.0" width="27.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1138.8" y="606.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (241 samples, 2.26%)</title><rect x="1136.3" y="579.0" width="26.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1139.3" y="590.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (240 samples, 2.25%)</title><rect x="1136.4" y="563.0" width="26.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1139.4" y="574.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.06%)</title><rect x="1136.5" y="547.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1139.5" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.05%)</title><rect x="1136.6" y="531.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1139.6" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="1136.6" y="515.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1139.6" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="1136.6" y="499.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1139.6" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="1136.6" y="483.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1139.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (225 samples, 2.11%)</title><rect x="1137.1" y="547.0" width="24.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1140.1" y="558.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (219 samples, 2.05%)</title><rect x="1137.8" y="531.0" width="24.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1140.8" y="542.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (219 samples, 2.05%)</title><rect x="1137.8" y="515.0" width="24.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1140.8" y="526.0">s..</text>
</g>
<g>
<title>read (206 samples, 1.93%)</title><rect x="1139.2" y="499.0" width="22.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1142.2" y="510.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.07%)</title><rect x="1162.0" y="547.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1165.0" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.07%)</title><rect x="1162.0" y="531.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1165.0" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="1162.9" y="643.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="654.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="1162.9" y="627.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1165.9" y="638.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.03%)</title><rect x="1162.9" y="611.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1165.9" y="622.0"></text>
</g>
<g>
<title>[tid=19459] (6 samples, 0.06%)</title><rect x="1163.5" y="691.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1166.5" y="702.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.06%)</title><rect x="1163.5" y="675.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1166.5" y="686.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.06%)</title><rect x="1163.5" y="659.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1166.5" y="670.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.06%)</title><rect x="1163.5" y="643.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1166.5" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.06%)</title><rect x="1163.5" y="627.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1166.5" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.06%)</title><rect x="1163.5" y="611.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.5" y="622.0"></text>
</g>
<g>
<title>VMThread::run() (6 samples, 0.06%)</title><rect x="1163.5" y="595.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.5" y="606.0"></text>
</g>
<g>
<title>VMThread::loop() (6 samples, 0.06%)</title><rect x="1163.5" y="579.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.5" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="1163.5" y="563.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.5" y="574.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="1163.5" y="547.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.5" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.03%)</title><rect x="1163.5" y="531.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.5" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="1163.5" y="515.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1166.5" y="526.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.03%)</title><rect x="1163.8" y="563.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.8" y="574.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.03%)</title><rect x="1163.8" y="547.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.8" y="558.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (3 samples, 0.03%)</title><rect x="1163.8" y="531.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.8" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.03%)</title><rect x="1163.8" y="515.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.8" y="526.0"></text>
</g>
<g>
<title>[tid=19971] (12 samples, 0.11%)</title><rect x="1164.1" y="691.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1167.1" y="702.0"></text>
</g>
<g>
<title>thread_start (12 samples, 0.11%)</title><rect x="1164.1" y="675.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1167.1" y="686.0"></text>
</g>
<g>
<title>_pthread_start (12 samples, 0.11%)</title><rect x="1164.1" y="659.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1167.1" y="670.0"></text>
</g>
<g>
<title>_pthread_body (12 samples, 0.11%)</title><rect x="1164.1" y="643.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1167.1" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (12 samples, 0.11%)</title><rect x="1164.1" y="627.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1167.1" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (12 samples, 0.11%)</title><rect x="1164.1" y="611.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="622.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (12 samples, 0.11%)</title><rect x="1164.1" y="595.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="606.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (12 samples, 0.11%)</title><rect x="1164.1" y="579.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="590.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (10 samples, 0.09%)</title><rect x="1164.3" y="563.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="574.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (10 samples, 0.09%)</title><rect x="1164.3" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.3" y="558.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (10 samples, 0.09%)</title><rect x="1164.3" y="531.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.3" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 0.08%)</title><rect x="1164.3" y="515.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.3" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.08%)</title><rect x="1164.3" y="499.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1167.3" y="510.0"></text>
</g>
<g>
<title>[tid=22019] (118 samples, 1.11%)</title><rect x="1165.4" y="691.0" width="13.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1168.4" y="702.0"></text>
</g>
<g>
<title>thread_start (118 samples, 1.11%)</title><rect x="1165.4" y="675.0" width="13.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1168.4" y="686.0"></text>
</g>
<g>
<title>_pthread_start (118 samples, 1.11%)</title><rect x="1165.4" y="659.0" width="13.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1168.4" y="670.0"></text>
</g>
<g>
<title>_pthread_body (118 samples, 1.11%)</title><rect x="1165.4" y="643.0" width="13.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1168.4" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (118 samples, 1.11%)</title><rect x="1165.4" y="627.0" width="13.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1168.4" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (118 samples, 1.11%)</title><rect x="1165.4" y="611.0" width="13.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.4" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (118 samples, 1.11%)</title><rect x="1165.4" y="595.0" width="13.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (118 samples, 1.11%)</title><rect x="1165.4" y="579.0" width="13.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.4" y="590.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (118 samples, 1.11%)</title><rect x="1165.4" y="563.0" width="13.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="574.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (117 samples, 1.10%)</title><rect x="1165.4" y="547.0" width="13.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="558.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (117 samples, 1.10%)</title><rect x="1165.4" y="531.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="542.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (117 samples, 1.10%)</title><rect x="1165.4" y="515.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.4" y="526.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (77 samples, 0.72%)</title><rect x="1165.4" y="499.0" width="8.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="510.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.06%)</title><rect x="1165.9" y="483.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.9" y="494.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.06%)</title><rect x="1165.9" y="467.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.9" y="478.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.04%)</title><rect x="1165.9" y="451.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.9" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.07%)</title><rect x="1166.6" y="483.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.6" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.07%)</title><rect x="1166.7" y="467.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (58 samples, 0.54%)</title><rect x="1167.6" y="483.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.6" y="494.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (6 samples, 0.06%)</title><rect x="1167.7" y="467.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.7" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.09%)</title><rect x="1168.8" y="467.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.8" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.07%)</title><rect x="1169.9" y="467.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (4 samples, 0.04%)</title><rect x="1170.1" y="451.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.1" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.06%)</title><rect x="1171.0" y="467.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.0" y="478.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (3 samples, 0.03%)</title><rect x="1171.1" y="451.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.1" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.05%)</title><rect x="1171.9" y="467.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="478.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.03%)</title><rect x="1172.6" y="467.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="478.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 0.03%)</title><rect x="1172.6" y="451.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="462.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.06%)</title><rect x="1173.2" y="467.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.2" y="478.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 0.23%)</title><rect x="1174.0" y="499.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.0" y="510.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (6 samples, 0.06%)</title><rect x="1174.1" y="483.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (6 samples, 0.06%)</title><rect x="1174.1" y="467.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.1" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (11 samples, 0.10%)</title><rect x="1175.1" y="483.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.1" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.04%)</title><rect x="1175.4" y="467.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (4 samples, 0.04%)</title><rect x="1175.4" y="451.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.4" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.03%)</title><rect x="1176.3" y="483.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.03%)</title><rect x="1176.3" y="467.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.11%)</title><rect x="1176.7" y="499.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.11%)</title><rect x="1176.7" y="483.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.11%)</title><rect x="1176.7" y="467.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.11%)</title><rect x="1176.7" y="451.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.09%)</title><rect x="1176.8" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.07%)</title><rect x="1177.0" y="419.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.07%)</title><rect x="1177.0" y="403.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.07%)</title><rect x="1177.0" y="387.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.07%)</title><rect x="1177.0" y="371.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.07%)</title><rect x="1177.0" y="355.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.07%)</title><rect x="1177.0" y="339.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.07%)</title><rect x="1177.0" y="323.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.07%)</title><rect x="1177.0" y="307.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.07%)</title><rect x="1177.0" y="291.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.07%)</title><rect x="1177.0" y="275.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.07%)</title><rect x="1177.0" y="259.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.07%)</title><rect x="1177.0" y="243.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.07%)</title><rect x="1177.0" y="227.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.07%)</title><rect x="1177.0" y="211.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.07%)</title><rect x="1177.0" y="195.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.07%)</title><rect x="1177.0" y="179.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.07%)</title><rect x="1177.0" y="163.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.07%)</title><rect x="1177.0" y="147.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.07%)</title><rect x="1177.0" y="131.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="1177.0" y="115.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1177.2" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1177.2" y="83.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1177.2" y="67.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1177.2" y="51.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.2" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1177.2" y="35.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="46.0"></text>
</g>
<g>
<title>[tid=23555] (47 samples, 0.44%)</title><rect x="1178.7" y="691.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1181.7" y="702.0"></text>
</g>
<g>
<title>thread_start (47 samples, 0.44%)</title><rect x="1178.7" y="675.0" width="5.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1181.7" y="686.0"></text>
</g>
<g>
<title>_pthread_start (47 samples, 0.44%)</title><rect x="1178.7" y="659.0" width="5.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1181.7" y="670.0"></text>
</g>
<g>
<title>_pthread_body (47 samples, 0.44%)</title><rect x="1178.7" y="643.0" width="5.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1181.7" y="654.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void* (*)(void*), rocksdb::BGThreadMetadata*&gt; &gt;(void*) (47 samples, 0.44%)</title><rect x="1178.7" y="627.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (47 samples, 0.44%)</title><rect x="1178.7" y="611.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (47 samples, 0.44%)</title><rect x="1178.7" y="595.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (47 samples, 0.44%)</title><rect x="1178.7" y="579.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (46 samples, 0.43%)</title><rect x="1178.8" y="563.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (46 samples, 0.43%)</title><rect x="1178.8" y="547.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;&amp;, unsigned long long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (46 samples, 0.43%)</title><rect x="1178.8" y="531.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*) (46 samples, 0.43%)</title><rect x="1178.8" y="515.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::WriteLevel0Table() (46 samples, 0.43%)</title><rect x="1178.8" y="499.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt; &gt; &gt;, rocksdb::FileMetaData*, rocksdb::InternalKeyComparator const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::__1::default_delete&lt;rocksdb::IntTblPropCollector (46 samples, 0.43%)</title><rect x="1178.8" y="483.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (28 samples, 0.26%)</title><rect x="1178.9" y="467.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (20 samples, 0.19%)</title><rect x="1179.1" y="451.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (20 samples, 0.19%)</title><rect x="1179.1" y="435.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (20 samples, 0.19%)</title><rect x="1179.1" y="419.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (20 samples, 0.19%)</title><rect x="1179.1" y="403.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="414.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (20 samples, 0.19%)</title><rect x="1179.1" y="387.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (20 samples, 0.19%)</title><rect x="1179.1" y="371.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="382.0"></text>
</g>
<g>
<title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (20 samples, 0.19%)</title><rect x="1179.1" y="355.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="366.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (11 samples, 0.10%)</title><rect x="1180.0" y="339.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="350.0"></text>
</g>
<g>
<title>snappy::Bits::FindLSBSetNonZero64(unsigned long long) (5 samples, 0.05%)</title><rect x="1180.6" y="323.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const*) (5 samples, 0.05%)</title><rect x="1181.3" y="451.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (13 samples, 0.12%)</title><rect x="1182.0" y="467.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (13 samples, 0.12%)</title><rect x="1182.0" y="451.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.04%)</title><rect x="1182.7" y="435.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="446.0"></text>
</g>
<g>
<title>[tid=41475] (51 samples, 0.48%)</title><rect x="1183.9" y="691.0" width="5.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1186.9" y="702.0"></text>
</g>
<g>
<title>thread_start (51 samples, 0.48%)</title><rect x="1183.9" y="675.0" width="5.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1186.9" y="686.0"></text>
</g>
<g>
<title>_pthread_start (51 samples, 0.48%)</title><rect x="1183.9" y="659.0" width="5.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1186.9" y="670.0"></text>
</g>
<g>
<title>_pthread_body (51 samples, 0.48%)</title><rect x="1183.9" y="643.0" width="5.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1186.9" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (51 samples, 0.48%)</title><rect x="1183.9" y="627.0" width="5.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1186.9" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (51 samples, 0.48%)</title><rect x="1183.9" y="611.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="622.0"></text>
</g>
<g>
<title>WatcherThread::run() (51 samples, 0.48%)</title><rect x="1183.9" y="595.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="606.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (50 samples, 0.47%)</title><rect x="1184.0" y="579.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (49 samples, 0.46%)</title><rect x="1184.0" y="563.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (49 samples, 0.46%)</title><rect x="1184.0" y="547.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (49 samples, 0.46%)</title><rect x="1184.0" y="531.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (48 samples, 0.45%)</title><rect x="1184.1" y="515.0" width="5.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1187.1" y="526.0"></text>
</g>
<g>
<title>[tid=42755] (3 samples, 0.03%)</title><rect x="1189.7" y="691.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.7" y="702.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.03%)</title><rect x="1189.7" y="675.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1192.7" y="686.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.03%)</title><rect x="1189.7" y="659.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1192.7" y="670.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.03%)</title><rect x="1189.7" y="643.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1192.7" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.03%)</title><rect x="1189.7" y="627.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1192.7" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.03%)</title><rect x="1189.7" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.7" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.03%)</title><rect x="1189.7" y="595.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.7" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.03%)</title><rect x="1189.7" y="579.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.7" y="590.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.03%)</title><rect x="1189.7" y="563.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.7" y="574.0"></text>
</g>
</g>
</svg>
