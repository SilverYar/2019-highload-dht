<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (4,076 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (2 samples, 0.05%)</title><rect x="10.0" y="1235.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (2 samples, 0.05%)</title><rect x="10.0" y="1219.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (2 samples, 0.05%)</title><rect x="10.0" y="1203.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (2 samples, 0.05%)</title><rect x="10.0" y="1187.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (2 samples, 0.05%)</title><rect x="10.0" y="1171.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.05%)</title><rect x="10.0" y="1155.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="10.0" y="1139.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="10.0" y="1123.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="10.0" y="1107.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="10.0" y="1091.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="10.0" y="1075.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="10.0" y="1059.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.3" y="1043.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.3" y="1027.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.3" y="1011.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.3" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="10.6" y="1235.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.6" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="10.6" y="1219.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.6" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="10.6" y="1203.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.6" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="10.6" y="1187.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.6" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="10.6" y="1171.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.6" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="10.6" y="1155.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.6" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (2 samples, 0.05%)</title><rect x="10.6" y="1139.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.6" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="10.9" y="1123.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.9" y="1134.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.02%)</title><rect x="10.9" y="1107.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.9" y="1118.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.02%)</title><rect x="10.9" y="1091.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.9" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="10.9" y="1075.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.9" y="1086.0"></text>
</g>
<g>
<title>G1CollectionSet::add_young_region_common(HeapRegion*) (1 samples, 0.02%)</title><rect x="10.9" y="1059.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.9" y="1070.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.02%)</title><rect x="10.9" y="1043.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.9" y="1054.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.02%)</title><rect x="10.9" y="1027.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.9" y="1038.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.02%)</title><rect x="10.9" y="1011.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.9" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="11.2" y="1235.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="11.2" y="1219.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.2" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="11.2" y="1203.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.2" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="11.2" y="1187.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="1198.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="11.2" y="1171.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.2" y="1182.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (3 samples, 0.07%)</title><rect x="11.4" y="1235.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.4" y="1246.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="11.4" y="1219.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.4" y="1230.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize(JavaThread*, frame, RegisterMap*, Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="11.4" y="1203.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.4" y="1214.0"></text>
</g>
<g>
<title>Deoptimization::revoke_biases_of_monitors(JavaThread*, frame, RegisterMap*) (1 samples, 0.02%)</title><rect x="11.4" y="1187.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.4" y="1198.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.02%)</title><rect x="11.4" y="1171.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.4" y="1182.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="11.4" y="1155.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.4" y="1166.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="11.4" y="1139.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.4" y="1150.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.05%)</title><rect x="11.7" y="1219.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.7" y="1230.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="11.7" y="1203.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.7" y="1214.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="11.7" y="1187.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.7" y="1198.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.02%)</title><rect x="11.7" y="1171.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.7" y="1182.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::loop_predicate(int, int, CompLevel, Method*) (1 samples, 0.02%)</title><rect x="11.7" y="1155.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.7" y="1166.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="12.0" y="1203.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.0" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="12.0" y="1187.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.0" y="1198.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="12.0" y="1171.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="15.0" y="1182.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="12.0" y="1155.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="15.0" y="1166.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="12.0" y="1139.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="15.0" y="1150.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (11 samples, 0.27%)</title><rect x="12.3" y="1235.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.3" y="1246.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="12.3" y="1219.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.3" y="1230.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.02%)</title><rect x="12.3" y="1203.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.3" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (9 samples, 0.22%)</title><rect x="12.6" y="1219.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.6" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.10%)</title><rect x="12.9" y="1203.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.9" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="12.9" y="1187.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.9" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="12.9" y="1171.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.9" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.07%)</title><rect x="13.2" y="1187.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.2" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.07%)</title><rect x="13.2" y="1171.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="16.2" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title><rect x="14.1" y="1203.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.1" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.05%)</title><rect x="14.6" y="1203.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.6" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="14.9" y="1187.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.9" y="1198.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="15.2" y="1219.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.2" y="1230.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.02%)</title><rect x="15.2" y="1203.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.2" y="1214.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (1 samples, 0.02%)</title><rect x="15.2" y="1187.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="18.2" y="1198.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.02%)</title><rect x="15.5" y="1235.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.5" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="15.5" y="1219.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="18.5" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="15.5" y="1203.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.5" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="15.5" y="1187.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.5" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="15.5" y="1171.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.5" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="15.5" y="1155.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.5" y="1166.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="15.5" y="1139.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.5" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.02%)</title><rect x="15.5" y="1123.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.5" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.02%)</title><rect x="15.5" y="1107.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.5" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (77 samples, 1.89%)</title><rect x="15.8" y="1235.0" width="22.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.8" y="1246.0">S..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (76 samples, 1.86%)</title><rect x="15.8" y="1219.0" width="22.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.8" y="1230.0">O..</text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (21 samples, 0.52%)</title><rect x="16.1" y="1203.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="19.1" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="16.1" y="1187.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.1" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.17%)</title><rect x="16.4" y="1187.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.4" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (5 samples, 0.12%)</title><rect x="16.9" y="1171.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="19.9" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (13 samples, 0.32%)</title><rect x="18.4" y="1187.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="21.4" y="1198.0"></text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.05%)</title><rect x="18.4" y="1171.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="21.4" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.25%)</title><rect x="19.0" y="1171.0" width="2.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="22.0" y="1182.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.02%)</title><rect x="21.9" y="1171.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="24.9" y="1182.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="21.9" y="1155.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="24.9" y="1166.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (7 samples, 0.17%)</title><rect x="22.2" y="1203.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="25.2" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (47 samples, 1.15%)</title><rect x="24.2" y="1203.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.2" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (26 samples, 0.64%)</title><rect x="30.3" y="1187.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="33.3" y="1198.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="37.8" y="1219.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="40.8" y="1230.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.02%)</title><rect x="37.8" y="1203.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="40.8" y="1214.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.02%)</title><rect x="38.1" y="1235.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="41.1" y="1246.0"></text>
</g>
<g>
<title>Deoptimization::unpack_frames(JavaThread*, int) (1 samples, 0.02%)</title><rect x="38.1" y="1219.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="41.1" y="1230.0"></text>
</g>
<g>
<title>Deoptimization::cleanup_deopt_info(JavaThread*, vframeArray*) (1 samples, 0.02%)</title><rect x="38.1" y="1203.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="41.1" y="1214.0"></text>
</g>
<g>
<title>Deoptimization::UnrollBlock::~UnrollBlock() (1 samples, 0.02%)</title><rect x="38.1" y="1187.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="41.1" y="1198.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="38.1" y="1171.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="41.1" y="1182.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.02%)</title><rect x="38.1" y="1155.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="41.1" y="1166.0"></text>
</g>
<g>
<title>[not_walkable] (15 samples, 0.37%)</title><rect x="38.4" y="1235.0" width="4.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="41.4" y="1246.0"></text>
</g>
<g>
<title>[not_walkable_Java] (10 samples, 0.25%)</title><rect x="42.7" y="1235.0" width="2.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="45.7" y="1246.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.05%)</title><rect x="43.0" y="1219.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="46.0" y="1230.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.02%)</title><rect x="43.6" y="1219.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="46.6" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="43.9" y="1219.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="46.9" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.02%)</title><rect x="43.9" y="1203.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="46.9" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="43.9" y="1187.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="46.9" y="1198.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.02%)</title><rect x="43.9" y="1171.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="46.9" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="43.9" y="1155.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="46.9" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="43.9" y="1139.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="46.9" y="1150.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title><rect x="43.9" y="1123.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="46.9" y="1134.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (5 samples, 0.12%)</title><rect x="44.2" y="1219.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="47.2" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (5 samples, 0.12%)</title><rect x="44.2" y="1203.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="47.2" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.10%)</title><rect x="44.2" y="1187.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="47.2" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.02%)</title><rect x="45.3" y="1187.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="48.3" y="1198.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.02%)</title><rect x="45.3" y="1171.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="48.3" y="1182.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.02%)</title><rect x="45.3" y="1155.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="48.3" y="1166.0"></text>
</g>
<g>
<title>[unknown_Java] (17 samples, 0.42%)</title><rect x="45.6" y="1235.0" width="4.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="48.6" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="50.2" y="1219.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="53.2" y="1230.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="50.2" y="1203.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="53.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,022 samples, 49.61%)</title><rect x="50.5" y="1235.0" width="585.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.5" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,022 samples, 49.61%)</title><rect x="50.5" y="1219.0" width="585.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.5" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,022 samples, 49.61%)</title><rect x="50.5" y="1203.0" width="585.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.5" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (5 samples, 0.12%)</title><rect x="62.1" y="1187.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (8 samples, 0.20%)</title><rect x="63.6" y="1187.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="66.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (6 samples, 0.15%)</title><rect x="64.1" y="1171.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.1" y="1182.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.07%)</title><rect x="64.4" y="1155.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="67.4" y="1166.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.02%)</title><rect x="64.4" y="1139.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="67.4" y="1150.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="64.7" y="1139.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="67.7" y="1150.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.02%)</title><rect x="64.7" y="1123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="67.7" y="1134.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="65.0" y="1139.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="68.0" y="1150.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="65.3" y="1155.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="68.3" y="1166.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="65.6" y="1155.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="68.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.02%)</title><rect x="65.9" y="1187.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="65.9" y="1171.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.02%)</title><rect x="65.9" y="1155.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="65.9" y="1139.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="65.9" y="1123.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="65.9" y="1107.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.17%)</title><rect x="66.2" y="1187.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.17%)</title><rect x="66.2" y="1171.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (4 samples, 0.10%)</title><rect x="66.5" y="1155.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="67.3" y="1139.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.3" y="1150.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.05%)</title><rect x="67.6" y="1155.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="70.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.afterExecute (1 samples, 0.02%)</title><rect x="68.2" y="1187.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="71.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,225 samples, 30.05%)</title><rect x="68.5" y="1187.0" width="354.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.5" y="1198.0">java/util/concurrent/ThreadPoolExecutor.getTask</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1,219 samples, 29.91%)</title><rect x="69.6" y="1171.0" width="352.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.6" y="1182.0">java/util/concurrent/LinkedBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.02%)</title><rect x="70.8" y="1155.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.8" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndAddInt (1 samples, 0.02%)</title><rect x="70.8" y="1139.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,079 samples, 26.47%)</title><rect x="71.1" y="1155.0" width="312.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.1" y="1166.0">java/util/concurrent/locks/AbstractQueuedS..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (5 samples, 0.12%)</title><rect x="71.7" y="1139.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="74.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.02%)</title><rect x="72.8" y="1123.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (1 samples, 0.02%)</title><rect x="72.8" y="1107.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.05%)</title><rect x="73.1" y="1139.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.05%)</title><rect x="73.1" y="1123.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="76.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.05%)</title><rect x="73.1" y="1107.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="76.1" y="1118.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.05%)</title><rect x="73.1" y="1091.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="76.1" y="1102.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.02%)</title><rect x="73.1" y="1075.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="76.1" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="73.4" y="1075.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="76.4" y="1086.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (1 samples, 0.02%)</title><rect x="73.4" y="1059.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="76.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (10 samples, 0.25%)</title><rect x="73.7" y="1139.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.10%)</title><rect x="75.1" y="1123.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.10%)</title><rect x="75.1" y="1107.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.1" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.10%)</title><rect x="75.1" y="1091.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.1" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.10%)</title><rect x="75.1" y="1075.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="78.1" y="1086.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.10%)</title><rect x="75.1" y="1059.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="78.1" y="1070.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.10%)</title><rect x="75.1" y="1043.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="78.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.02%)</title><rect x="76.3" y="1123.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (32 samples, 0.79%)</title><rect x="76.6" y="1139.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 0.79%)</title><rect x="76.6" y="1123.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (31 samples, 0.76%)</title><rect x="76.9" y="1107.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 0.69%)</title><rect x="77.7" y="1091.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.7" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (28 samples, 0.69%)</title><rect x="77.7" y="1075.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.7" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="78.0" y="1059.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="81.0" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (25 samples, 0.61%)</title><rect x="78.3" y="1059.0" width="7.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="81.3" y="1070.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="78.6" y="1043.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="81.6" y="1054.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.02%)</title><rect x="78.9" y="1043.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="81.9" y="1054.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="79.2" y="1043.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="82.2" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvsignal (20 samples, 0.49%)</title><rect x="79.5" y="1043.0" width="5.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="82.5" y="1054.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="85.3" y="1043.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="88.3" y="1054.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.02%)</title><rect x="85.3" y="1027.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="88.3" y="1038.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.02%)</title><rect x="85.6" y="1059.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="88.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.02%)</title><rect x="85.8" y="1139.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1,027 samples, 25.20%)</title><rect x="86.1" y="1139.0" width="297.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="89.1" y="1150.0">java/util/concurrent/locks/LockSupport.p..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1,026 samples, 25.17%)</title><rect x="86.4" y="1123.0" width="297.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.4" y="1134.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.02%)</title><rect x="94.8" y="1107.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="97.8" y="1118.0"></text>
</g>
<g>
<title>JavaThread::parker() (3 samples, 0.07%)</title><rect x="95.1" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="98.1" y="1118.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="96.0" y="1107.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="99.0" y="1118.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.05%)</title><rect x="96.3" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="99.3" y="1118.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="96.8" y="1107.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="99.8" y="1118.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.02%)</title><rect x="97.1" y="1107.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="100.1" y="1118.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (988 samples, 24.24%)</title><rect x="97.4" y="1107.0" width="286.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="100.4" y="1118.0">Unsafe_Park(JNIEnv_*, _jobject*, unsig..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.07%)</title><rect x="98.6" y="1091.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="101.6" y="1102.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.07%)</title><rect x="98.6" y="1075.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="101.6" y="1086.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="99.5" y="1091.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="102.5" y="1102.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.05%)</title><rect x="99.7" y="1091.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="102.7" y="1102.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.02%)</title><rect x="100.3" y="1091.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="103.3" y="1102.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (6 samples, 0.15%)</title><rect x="100.6" y="1091.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="103.6" y="1102.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (6 samples, 0.15%)</title><rect x="100.6" y="1075.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="103.6" y="1086.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (6 samples, 0.15%)</title><rect x="100.6" y="1059.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="103.6" y="1070.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (4 samples, 0.10%)</title><rect x="100.9" y="1043.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="103.9" y="1054.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.02%)</title><rect x="100.9" y="1027.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="103.9" y="1038.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title><rect x="101.2" y="1027.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="104.2" y="1038.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (2 samples, 0.05%)</title><rect x="101.5" y="1027.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="104.5" y="1038.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="101.5" y="1011.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="104.5" y="1022.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="101.8" y="1011.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="104.8" y="1022.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.02%)</title><rect x="101.8" y="995.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="104.8" y="1006.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="102.1" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="105.1" y="1054.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (7 samples, 0.17%)</title><rect x="102.4" y="1091.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="105.4" y="1102.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="102.6" y="1075.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="105.6" y="1086.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.02%)</title><rect x="102.6" y="1059.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="105.6" y="1070.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (2 samples, 0.05%)</title><rect x="102.9" y="1075.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="105.9" y="1086.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (3 samples, 0.07%)</title><rect x="103.5" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="106.5" y="1086.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (3 samples, 0.07%)</title><rect x="103.5" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="106.5" y="1070.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.02%)</title><rect x="104.4" y="1091.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="107.4" y="1102.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="104.7" y="1091.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="107.7" y="1102.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (4 samples, 0.10%)</title><rect x="105.0" y="1091.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="108.0" y="1102.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.05%)</title><rect x="105.5" y="1075.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="108.5" y="1086.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.02%)</title><rect x="106.1" y="1091.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="109.1" y="1102.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.05%)</title><rect x="106.4" y="1091.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="109.4" y="1102.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (932 samples, 22.87%)</title><rect x="107.0" y="1091.0" width="269.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="110.0" y="1102.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.10%)</title><rect x="108.7" y="1075.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="111.7" y="1086.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.02%)</title><rect x="108.7" y="1059.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="111.7" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.05%)</title><rect x="109.0" y="1059.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="112.0" y="1070.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.02%)</title><rect x="109.3" y="1043.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="112.3" y="1054.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="109.6" y="1059.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="112.6" y="1070.0"></text>
</g>
<g>
<title>__psynch_cvwait (909 samples, 22.30%)</title><rect x="109.9" y="1075.0" width="263.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="112.9" y="1086.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (9 samples, 0.22%)</title><rect x="373.0" y="1075.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="376.0" y="1086.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.02%)</title><rect x="375.3" y="1059.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="378.3" y="1070.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.02%)</title><rect x="375.6" y="1075.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="378.6" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.07%)</title><rect x="375.9" y="1075.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="378.9" y="1086.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.02%)</title><rect x="376.8" y="1091.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="379.8" y="1102.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.02%)</title><rect x="377.1" y="1091.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="380.1" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="377.4" y="1091.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="380.4" y="1102.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="377.4" y="1075.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="380.4" y="1086.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.05%)</title><rect x="377.4" y="1059.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.4" y="1070.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.02%)</title><rect x="377.4" y="1043.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="380.4" y="1054.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="377.7" y="1043.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="380.7" y="1054.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="377.7" y="1027.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.7" y="1038.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.02%)</title><rect x="377.7" y="1011.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="380.7" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (8 samples, 0.20%)</title><rect x="378.0" y="1091.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="381.0" y="1102.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.05%)</title><rect x="378.8" y="1075.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="381.8" y="1086.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll(Thread*) (1 samples, 0.02%)</title><rect x="379.4" y="1075.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="382.4" y="1086.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.05%)</title><rect x="379.7" y="1075.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="382.7" y="1086.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.05%)</title><rect x="379.7" y="1059.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="382.7" y="1070.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.05%)</title><rect x="379.7" y="1043.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="382.7" y="1054.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.02%)</title><rect x="380.3" y="1091.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="383.3" y="1102.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.02%)</title><rect x="380.6" y="1091.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="383.6" y="1102.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.02%)</title><rect x="380.8" y="1091.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="383.8" y="1102.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (5 samples, 0.12%)</title><rect x="381.1" y="1091.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="384.1" y="1102.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="382.6" y="1091.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="385.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (40 samples, 0.98%)</title><rect x="383.5" y="1155.0" width="11.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (40 samples, 0.98%)</title><rect x="383.5" y="1139.0" width="11.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.05%)</title><rect x="383.5" y="1123.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="386.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (37 samples, 0.91%)</title><rect x="384.0" y="1123.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.02%)</title><rect x="386.1" y="1107.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="389.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (22 samples, 0.54%)</title><rect x="386.3" y="1107.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="389.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (22 samples, 0.54%)</title><rect x="386.3" y="1091.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.3" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 0.52%)</title><rect x="386.6" y="1075.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.6" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (21 samples, 0.52%)</title><rect x="386.6" y="1059.0" width="6.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="389.6" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 0.52%)</title><rect x="386.6" y="1043.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="389.6" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (21 samples, 0.52%)</title><rect x="386.6" y="1027.0" width="6.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="389.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (7 samples, 0.17%)</title><rect x="392.7" y="1107.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="395.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.05%)</title><rect x="394.2" y="1091.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="394.7" y="1123.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="394.7" y="1107.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="394.7" y="1091.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (95 samples, 2.33%)</title><rect x="395.0" y="1155.0" width="27.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.0" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (95 samples, 2.33%)</title><rect x="395.0" y="1139.0" width="27.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.0" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (95 samples, 2.33%)</title><rect x="395.0" y="1123.0" width="27.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.0" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (95 samples, 2.33%)</title><rect x="395.0" y="1107.0" width="27.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="398.0" y="1118.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (95 samples, 2.33%)</title><rect x="395.0" y="1091.0" width="27.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="398.0" y="1102.0">j..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="395.6" y="1075.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="398.6" y="1086.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="395.9" y="1075.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="398.9" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="396.2" y="1075.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="399.2" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (90 samples, 2.21%)</title><rect x="396.5" y="1075.0" width="26.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="399.5" y="1086.0">U..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="397.1" y="1059.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="400.1" y="1070.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="397.4" y="1059.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="400.4" y="1070.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.02%)</title><rect x="397.4" y="1043.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="400.4" y="1054.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="397.6" y="1059.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="400.6" y="1070.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.02%)</title><rect x="397.6" y="1043.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="400.6" y="1054.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="397.6" y="1027.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="400.6" y="1038.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="397.6" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="400.6" y="1022.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.02%)</title><rect x="397.9" y="1059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="400.9" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.05%)</title><rect x="398.2" y="1059.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="401.2" y="1070.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="398.2" y="1043.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="401.2" y="1054.0"></text>
</g>
<g>
<title>SafepointMechanism::should_block(Thread*) (1 samples, 0.02%)</title><rect x="398.5" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="401.5" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvsignal (78 samples, 1.91%)</title><rect x="398.8" y="1059.0" width="22.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="401.8" y="1070.0">_..</text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.02%)</title><rect x="421.4" y="1059.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="424.4" y="1070.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="421.7" y="1059.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="424.7" y="1070.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.05%)</title><rect x="422.0" y="1059.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="425.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.02%)</title><rect x="422.5" y="1171.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.5" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$75/990504030.run (1 samples, 0.02%)</title><rect x="422.8" y="1171.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.8" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$75/990504030.run (735 samples, 18.03%)</title><rect x="423.1" y="1187.0" width="212.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="426.1" y="1198.0">ru/mail/polis/service/yarosl..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$executeAsync$4 (733 samples, 17.98%)</title><rect x="423.7" y="1171.0" width="212.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="426.7" y="1182.0">ru/mail/polis/service/yarosl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (496 samples, 12.17%)</title><rect x="424.6" y="1155.0" width="143.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="427.6" y="1166.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (491 samples, 12.05%)</title><rect x="424.9" y="1139.0" width="142.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="427.9" y="1150.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (29 samples, 0.71%)</title><rect x="425.1" y="1123.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.1" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="426.9" y="1107.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="429.9" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="427.5" y="1107.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (20 samples, 0.49%)</title><rect x="427.7" y="1107.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="430.7" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (11 samples, 0.27%)</title><rect x="428.3" y="1091.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="431.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.07%)</title><rect x="430.6" y="1075.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.07%)</title><rect x="430.6" y="1059.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="433.6" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.17%)</title><rect x="431.5" y="1091.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="434.5" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.17%)</title><rect x="431.5" y="1075.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="434.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="433.0" y="1059.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="433.0" y="1043.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="436.0" y="1054.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (1 samples, 0.02%)</title><rect x="433.2" y="1059.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.2" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putByte (1 samples, 0.02%)</title><rect x="433.2" y="1043.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.2" y="1054.0"></text>
</g>
<g>
<title>Unsafe_PutByte(JNIEnv_*, _jobject*, _jobject*, long, signed char) (1 samples, 0.02%)</title><rect x="433.2" y="1027.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="436.2" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="433.2" y="1011.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="436.2" y="1022.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.02%)</title><rect x="433.2" y="995.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="436.2" y="1006.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="433.2" y="979.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="436.2" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (461 samples, 11.31%)</title><rect x="433.5" y="1123.0" width="133.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.5" y="1134.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.&lt;init&gt; (1 samples, 0.02%)</title><rect x="433.5" y="1107.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session$QueueItem.&lt;init&gt; (1 samples, 0.02%)</title><rect x="433.5" y="1091.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="436.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="433.5" y="1075.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.5" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (460 samples, 11.29%)</title><rect x="433.8" y="1107.0" width="133.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.8" y="1118.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (457 samples, 11.21%)</title><rect x="434.4" y="1091.0" width="132.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.4" y="1102.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (457 samples, 11.21%)</title><rect x="434.4" y="1075.0" width="132.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.4" y="1086.0">one/nio/net/Java..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (456 samples, 11.19%)</title><rect x="434.7" y="1059.0" width="132.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.7" y="1070.0">sun/nio/ch/Socke..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.12%)</title><rect x="434.7" y="1043.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="437.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.12%)</title><rect x="434.7" y="1027.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="437.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.05%)</title><rect x="434.7" y="1011.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="437.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.02%)</title><rect x="434.7" y="995.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="437.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="434.7" y="979.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="437.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.02%)</title><rect x="435.0" y="995.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="435.0" y="979.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.0" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="435.0" y="963.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="438.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.07%)</title><rect x="435.3" y="1011.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="438.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.07%)</title><rect x="435.3" y="995.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="438.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.05%)</title><rect x="435.6" y="979.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="438.6" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.02%)</title><rect x="435.9" y="963.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="438.9" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (450 samples, 11.04%)</title><rect x="436.1" y="1043.0" width="130.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="439.1" y="1054.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (450 samples, 11.04%)</title><rect x="436.1" y="1027.0" width="130.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.1" y="1038.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.07%)</title><rect x="436.4" y="1011.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="439.4" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.05%)</title><rect x="436.7" y="995.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="439.7" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.05%)</title><rect x="436.7" y="979.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="439.7" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.02%)</title><rect x="436.7" y="963.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="439.7" y="974.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (1 samples, 0.02%)</title><rect x="436.7" y="947.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="439.7" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.02%)</title><rect x="436.7" y="931.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="439.7" y="942.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="436.7" y="915.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="439.7" y="926.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="436.7" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="439.7" y="910.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="436.7" y="883.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="439.7" y="894.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.02%)</title><rect x="436.7" y="867.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="439.7" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.02%)</title><rect x="437.0" y="963.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="440.0" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.02%)</title><rect x="437.0" y="947.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="440.0" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.02%)</title><rect x="437.0" y="931.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="440.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.02%)</title><rect x="437.0" y="915.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="440.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (1 samples, 0.02%)</title><rect x="437.0" y="899.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="440.0" y="910.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (1 samples, 0.02%)</title><rect x="437.0" y="883.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="440.0" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (426 samples, 10.45%)</title><rect x="437.3" y="1011.0" width="123.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.3" y="1022.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (425 samples, 10.43%)</title><rect x="437.6" y="995.0" width="123.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.6" y="1006.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (425 samples, 10.43%)</title><rect x="437.6" y="979.0" width="123.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.6" y="990.0">sun/nio/ch/File..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.12%)</title><rect x="443.4" y="963.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="446.4" y="974.0"></text>
</g>
<g>
<title>write (400 samples, 9.81%)</title><rect x="444.8" y="963.0" width="115.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="447.8" y="974.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (20 samples, 0.49%)</title><rect x="560.6" y="1011.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.20%)</title><rect x="560.9" y="995.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="563.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.07%)</title><rect x="562.1" y="979.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="565.1" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="562.7" y="963.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="565.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.02%)</title><rect x="562.9" y="979.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="565.9" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (11 samples, 0.27%)</title><rect x="563.2" y="995.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="566.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.07%)</title><rect x="564.4" y="979.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="567.4" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.07%)</title><rect x="564.4" y="963.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.4" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="564.7" y="947.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="567.7" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.05%)</title><rect x="564.7" y="931.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="567.7" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.02%)</title><rect x="565.3" y="979.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="568.3" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.05%)</title><rect x="565.5" y="979.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.5" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.02%)</title><rect x="566.1" y="979.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.1" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.02%)</title><rect x="566.4" y="1043.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.4" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="566.7" y="1091.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="569.7" y="1102.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="566.7" y="1075.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="569.7" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.isHttp11 (1 samples, 0.02%)</title><rect x="567.0" y="1139.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="570.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.02%)</title><rect x="567.3" y="1139.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="570.3" y="1150.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.05%)</title><rect x="567.6" y="1139.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (2 samples, 0.05%)</title><rect x="567.6" y="1123.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="570.6" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndAddLong (1 samples, 0.02%)</title><rect x="567.9" y="1107.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="570.9" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$73/726864097.act (234 samples, 5.74%)</title><rect x="568.2" y="1155.0" width="67.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.2" y="1166.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$entity$1 (234 samples, 5.74%)</title><rect x="568.2" y="1139.0" width="67.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.2" y="1150.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.get (234 samples, 5.74%)</title><rect x="568.2" y="1123.0" width="67.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.2" y="1134.0">ru/mail..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (26 samples, 0.64%)</title><rect x="568.2" y="1107.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="571.2" y="1118.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="569.0" y="1091.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="572.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.10%)</title><rect x="569.9" y="1091.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="572.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.02%)</title><rect x="571.1" y="1091.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.02%)</title><rect x="571.1" y="1075.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="574.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.02%)</title><rect x="571.1" y="1059.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="574.1" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="571.1" y="1043.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="574.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.05%)</title><rect x="571.3" y="1091.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="574.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (1 samples, 0.02%)</title><rect x="571.3" y="1075.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="574.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="571.6" y="1075.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="574.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="571.6" y="1059.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="574.6" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.05%)</title><rect x="571.9" y="1091.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.9" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.02%)</title><rect x="572.5" y="1091.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="575.5" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.22%)</title><rect x="572.8" y="1091.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="575.8" y="1102.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.12%)</title><rect x="572.8" y="1075.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="575.8" y="1086.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.12%)</title><rect x="572.8" y="1059.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="575.8" y="1070.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="573.9" y="1043.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="576.9" y="1054.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.10%)</title><rect x="574.2" y="1075.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="577.2" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (1 samples, 0.02%)</title><rect x="575.4" y="1091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.4" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (208 samples, 5.10%)</title><rect x="575.7" y="1107.0" width="60.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.7" y="1118.0">ru/mai..</text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="577.4" y="1091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="580.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (10 samples, 0.25%)</title><rect x="577.7" y="1091.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="580.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/473581465.invoke (10 samples, 0.25%)</title><rect x="577.7" y="1075.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="580.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (8 samples, 0.20%)</title><rect x="578.0" y="1059.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="581.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.02%)</title><rect x="578.9" y="1043.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="581.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="578.9" y="1027.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="581.9" y="1038.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="578.9" y="1011.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="581.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.02%)</title><rect x="579.2" y="1043.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="582.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="579.4" y="1043.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.4" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="579.7" y="1043.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/257895351.invoke (1 samples, 0.02%)</title><rect x="580.3" y="1059.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="583.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (38 samples, 0.93%)</title><rect x="580.6" y="1091.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="583.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (34 samples, 0.83%)</title><rect x="581.5" y="1075.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="584.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (31 samples, 0.76%)</title><rect x="582.3" y="1059.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="585.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (12 samples, 0.29%)</title><rect x="583.5" y="1043.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (3 samples, 0.07%)</title><rect x="583.8" y="1027.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="586.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.12%)</title><rect x="584.7" y="1027.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="587.7" y="1038.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.05%)</title><rect x="585.2" y="1011.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="588.2" y="1022.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="585.8" y="1011.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="588.8" y="1022.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="586.1" y="1027.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="589.1" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="586.4" y="1027.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="589.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (8 samples, 0.20%)</title><rect x="587.0" y="1043.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="590.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (5 samples, 0.12%)</title><rect x="587.8" y="1027.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="590.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.coder (4 samples, 0.10%)</title><rect x="588.1" y="1011.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="591.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (4 samples, 0.10%)</title><rect x="589.3" y="1043.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="592.3" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="590.2" y="1027.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="593.2" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="590.4" y="1043.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="593.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.02%)</title><rect x="591.3" y="1075.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="594.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="591.3" y="1059.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="594.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="591.3" y="1043.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="594.3" y="1054.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (139 samples, 3.41%)</title><rect x="591.6" y="1091.0" width="40.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="594.6" y="1102.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (139 samples, 3.41%)</title><rect x="591.6" y="1075.0" width="40.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="594.6" y="1086.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (136 samples, 3.34%)</title><rect x="592.5" y="1059.0" width="39.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="595.5" y="1070.0">Jav..</text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="593.6" y="1043.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="596.6" y="1054.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.10%)</title><rect x="593.9" y="1043.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="596.9" y="1054.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.02%)</title><rect x="595.1" y="1043.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="598.1" y="1054.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.05%)</title><rect x="595.4" y="1043.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="598.4" y="1054.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="595.9" y="1043.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="598.9" y="1054.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.07%)</title><rect x="596.2" y="1043.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="599.2" y="1054.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.05%)</title><rect x="597.1" y="1043.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="600.1" y="1054.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (118 samples, 2.89%)</title><rect x="597.7" y="1043.0" width="34.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="600.7" y="1054.0">ro..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="599.7" y="1027.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="602.7" y="1038.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="600.0" y="1027.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="1038.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="600.3" y="1027.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="603.3" y="1038.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="600.6" y="1027.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="603.6" y="1038.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.02%)</title><rect x="600.9" y="1027.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="603.9" y="1038.0"></text>
</g>
<g>
<title>free (7 samples, 0.17%)</title><rect x="601.2" y="1027.0" width="2.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="604.2" y="1038.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.12%)</title><rect x="601.7" y="1011.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="604.7" y="1022.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.05%)</title><rect x="603.2" y="1027.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="606.2" y="1038.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.10%)</title><rect x="603.8" y="1027.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="606.8" y="1038.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="603.8" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="606.8" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.07%)</title><rect x="604.1" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="607.1" y="1022.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.07%)</title><rect x="604.1" y="995.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="607.1" y="1006.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.07%)</title><rect x="604.1" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="607.1" y="990.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.07%)</title><rect x="604.1" y="963.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="607.1" y="974.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.05%)</title><rect x="604.1" y="947.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="607.1" y="958.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.02%)</title><rect x="604.1" y="931.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="607.1" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="604.3" y="931.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="607.3" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="604.6" y="947.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="607.6" y="958.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.20%)</title><rect x="604.9" y="1027.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="607.9" y="1038.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.02%)</title><rect x="606.4" y="1011.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="609.4" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="606.7" y="1011.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="609.7" y="1022.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.02%)</title><rect x="606.9" y="995.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="609.9" y="1006.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="606.9" y="979.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="609.9" y="990.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="606.9" y="963.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.9" y="974.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="606.9" y="947.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="609.9" y="958.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.02%)</title><rect x="606.9" y="931.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="609.9" y="942.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.05%)</title><rect x="607.2" y="1027.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="610.2" y="1038.0"></text>
</g>
<g>
<title>operator new(unsigned long) (10 samples, 0.25%)</title><rect x="607.8" y="1027.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="610.8" y="1038.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.25%)</title><rect x="607.8" y="1011.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="610.8" y="1022.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.05%)</title><rect x="608.1" y="995.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="611.1" y="1006.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.17%)</title><rect x="608.7" y="995.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="611.7" y="1006.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.15%)</title><rect x="609.0" y="979.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="612.0" y="990.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.12%)</title><rect x="609.3" y="963.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="612.3" y="974.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (68 samples, 1.67%)</title><rect x="610.7" y="1027.0" width="19.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="613.7" y="1038.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.02%)</title><rect x="611.0" y="1011.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="614.0" y="1022.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (65 samples, 1.59%)</title><rect x="611.3" y="1011.0" width="18.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="614.3" y="1022.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.02%)</title><rect x="611.6" y="995.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="614.6" y="1006.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (63 samples, 1.55%)</title><rect x="611.9" y="995.0" width="18.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="614.9" y="1006.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="611.9" y="979.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="614.9" y="990.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (50 samples, 1.23%)</title><rect x="612.2" y="979.0" width="14.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="615.2" y="990.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="614.8" y="963.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="617.8" y="974.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.15%)</title><rect x="615.1" y="963.0" width="1.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="618.1" y="974.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="616.8" y="963.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="619.8" y="974.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (9 samples, 0.22%)</title><rect x="617.1" y="963.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="620.1" y="974.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.07%)</title><rect x="617.4" y="947.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="620.4" y="958.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (4 samples, 0.10%)</title><rect x="618.2" y="947.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="621.2" y="958.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (3 samples, 0.07%)</title><rect x="618.5" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="621.5" y="942.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.02%)</title><rect x="619.4" y="947.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="622.4" y="958.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.02%)</title><rect x="619.4" y="931.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="622.4" y="942.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.05%)</title><rect x="619.7" y="963.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="622.7" y="974.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.05%)</title><rect x="619.7" y="947.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="622.7" y="958.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (3 samples, 0.07%)</title><rect x="620.3" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.3" y="974.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.02%)</title><rect x="621.1" y="963.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="624.1" y="974.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (14 samples, 0.34%)</title><rect x="621.4" y="963.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="624.4" y="974.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="622.9" y="947.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="625.9" y="958.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.02%)</title><rect x="623.2" y="947.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="626.2" y="958.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (2 samples, 0.05%)</title><rect x="623.4" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="626.4" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="623.4" y="931.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="626.4" y="942.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (4 samples, 0.10%)</title><rect x="624.0" y="947.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="627.0" y="958.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (1 samples, 0.02%)</title><rect x="625.2" y="947.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="628.2" y="958.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.10%)</title><rect x="625.5" y="963.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="628.5" y="974.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.10%)</title><rect x="626.6" y="979.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="629.6" y="990.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="627.8" y="979.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="630.8" y="990.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (4 samples, 0.10%)</title><rect x="628.1" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="631.1" y="990.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="629.2" y="979.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="632.2" y="990.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.05%)</title><rect x="629.5" y="979.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="632.5" y="990.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.02%)</title><rect x="630.1" y="1011.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="633.1" y="1022.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.05%)</title><rect x="630.4" y="1027.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="633.4" y="1038.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.02%)</title><rect x="631.0" y="1027.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="634.0" y="1038.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.05%)</title><rect x="631.3" y="1027.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="634.3" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (11 samples, 0.27%)</title><rect x="631.8" y="1091.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.8" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (11 samples, 0.27%)</title><rect x="631.8" y="1075.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="634.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.05%)</title><rect x="632.4" y="1059.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="632.7" y="1043.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.02%)</title><rect x="632.7" y="1027.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="635.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.17%)</title><rect x="633.0" y="1059.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.0" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="633.3" y="1043.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="636.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.10%)</title><rect x="633.9" y="1027.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.9" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (2 samples, 0.05%)</title><rect x="635.0" y="1091.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.0" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="635.0" y="1075.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="638.0" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="635.0" y="1059.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="638.0" y="1070.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="635.0" y="1043.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="638.0" y="1054.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.02%)</title><rect x="635.3" y="1075.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 0.02%)</title><rect x="635.3" y="1059.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.02%)</title><rect x="635.3" y="1043.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.02%)</title><rect x="635.3" y="1027.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.02%)</title><rect x="635.6" y="1091.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.6" y="1102.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (1 samples, 0.02%)</title><rect x="635.9" y="1235.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.9" y="1246.0"></text>
</g>
<g>
<title>one/nio/net/Socket.acceptNonBlocking (1 samples, 0.02%)</title><rect x="635.9" y="1219.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.9" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setBlocking (1 samples, 0.02%)</title><rect x="635.9" y="1203.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.9" y="1214.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.configureBlocking (1 samples, 0.02%)</title><rect x="635.9" y="1187.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.9" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implConfigureBlocking (1 samples, 0.02%)</title><rect x="635.9" y="1171.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.9" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (1 samples, 0.02%)</title><rect x="635.9" y="1155.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.9" y="1166.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_configureBlocking (1 samples, 0.02%)</title><rect x="635.9" y="1139.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="638.9" y="1150.0"></text>
</g>
<g>
<title>__fcntl (1 samples, 0.02%)</title><rect x="635.9" y="1123.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="638.9" y="1134.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,580 samples, 38.76%)</title><rect x="636.2" y="1235.0" width="457.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.2" y="1246.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.05%)</title><rect x="645.2" y="1219.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="648.2" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.05%)</title><rect x="645.7" y="1219.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="648.7" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.02%)</title><rect x="646.3" y="1219.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.3" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.02%)</title><rect x="646.3" y="1203.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.3" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.02%)</title><rect x="646.6" y="1219.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="649.6" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (963 samples, 23.63%)</title><rect x="646.9" y="1219.0" width="278.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.9" y="1230.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="646.9" y="1203.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="649.9" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (14 samples, 0.34%)</title><rect x="647.2" y="1203.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="650.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.05%)</title><rect x="648.6" y="1187.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.6" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.05%)</title><rect x="648.6" y="1171.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="651.6" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (7 samples, 0.17%)</title><rect x="649.2" y="1187.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="652.2" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.12%)</title><rect x="649.8" y="1171.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="652.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.10%)</title><rect x="650.1" y="1155.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="653.1" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.07%)</title><rect x="650.4" y="1139.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="653.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.07%)</title><rect x="650.4" y="1123.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.4" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="651.2" y="1203.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="654.2" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (947 samples, 23.23%)</title><rect x="651.5" y="1203.0" width="274.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="654.5" y="1214.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (946 samples, 23.21%)</title><rect x="651.8" y="1187.0" width="273.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="654.8" y="1198.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (942 samples, 23.11%)</title><rect x="653.0" y="1171.0" width="272.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="656.0" y="1182.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (895 samples, 21.96%)</title><rect x="653.6" y="1155.0" width="259.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="656.6" y="1166.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="663.4" y="1139.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="666.4" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="663.4" y="1123.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="666.4" y="1134.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="663.4" y="1107.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="666.4" y="1118.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="663.4" y="1091.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="666.4" y="1102.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.02%)</title><rect x="663.4" y="1075.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="666.4" y="1086.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.02%)</title><rect x="663.4" y="1059.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="666.4" y="1070.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="663.4" y="1043.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="666.4" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.02%)</title><rect x="663.4" y="1027.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="666.4" y="1038.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.02%)</title><rect x="663.4" y="1011.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="666.4" y="1022.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="663.4" y="995.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="666.4" y="1006.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.02%)</title><rect x="663.4" y="979.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="666.4" y="990.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="663.4" y="963.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="666.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="663.4" y="947.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="666.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="663.4" y="931.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="666.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="663.4" y="915.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="666.4" y="926.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (8 samples, 0.20%)</title><rect x="663.7" y="1139.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="666.7" y="1150.0"></text>
</g>
<g>
<title>kevent (852 samples, 20.90%)</title><rect x="666.0" y="1139.0" width="246.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="669.0" y="1150.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (24 samples, 0.59%)</title><rect x="912.7" y="1155.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="915.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.02%)</title><rect x="913.8" y="1139.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="916.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.05%)</title><rect x="914.1" y="1139.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="917.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.05%)</title><rect x="914.1" y="1123.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="917.1" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (17 samples, 0.42%)</title><rect x="914.7" y="1139.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="917.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.add (12 samples, 0.29%)</title><rect x="915.3" y="1123.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="918.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 0.29%)</title><rect x="915.3" y="1107.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="918.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.29%)</title><rect x="915.3" y="1091.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="918.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.05%)</title><rect x="918.7" y="1123.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.7" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.05%)</title><rect x="918.7" y="1107.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.7" y="1118.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.05%)</title><rect x="918.7" y="1091.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="921.7" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.02%)</title><rect x="919.3" y="1123.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.02%)</title><rect x="919.3" y="1107.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.3" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (1 samples, 0.02%)</title><rect x="919.3" y="1091.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="922.3" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (15 samples, 0.37%)</title><rect x="919.6" y="1155.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.6" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (15 samples, 0.37%)</title><rect x="919.6" y="1139.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="922.6" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.05%)</title><rect x="923.4" y="1123.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="926.4" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.12%)</title><rect x="923.9" y="1155.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="926.9" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.10%)</title><rect x="924.2" y="1139.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.10%)</title><rect x="924.2" y="1123.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="927.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.05%)</title><rect x="924.8" y="1107.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="927.8" y="1118.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.02%)</title><rect x="924.8" y="1091.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="927.8" y="1102.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.02%)</title><rect x="924.8" y="1075.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="927.8" y="1086.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="925.1" y="1091.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="928.1" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.02%)</title><rect x="925.4" y="1155.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.4" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.02%)</title><rect x="925.4" y="1139.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="928.4" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="925.4" y="1123.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="925.4" y="1107.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="925.4" y="1091.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="928.4" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (580 samples, 14.23%)</title><rect x="925.7" y="1219.0" width="167.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="928.7" y="1230.0">one/nio/net/Session.p..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (14 samples, 0.34%)</title><rect x="926.8" y="1203.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="929.8" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (14 samples, 0.34%)</title><rect x="926.8" y="1187.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="929.8" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.25%)</title><rect x="926.8" y="1171.0" width="2.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="929.8" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.07%)</title><rect x="929.7" y="1171.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="932.7" y="1182.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.07%)</title><rect x="929.7" y="1155.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="932.7" y="1166.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.07%)</title><rect x="929.7" y="1139.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="932.7" y="1150.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="930.6" y="1171.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="933.6" y="1182.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.02%)</title><rect x="930.9" y="1203.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="933.9" y="1214.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.12%)</title><rect x="931.2" y="1203.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="934.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.02%)</title><rect x="932.6" y="1203.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="935.6" y="1214.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="932.6" y="1187.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="935.6" y="1198.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="932.6" y="1171.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.6" y="1182.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="932.6" y="1155.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.6" y="1166.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="932.6" y="1139.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.6" y="1150.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.02%)</title><rect x="932.6" y="1123.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.6" y="1134.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.02%)</title><rect x="932.6" y="1107.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="935.6" y="1118.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="932.6" y="1091.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="935.6" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.02%)</title><rect x="932.6" y="1075.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="935.6" y="1086.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.02%)</title><rect x="932.6" y="1059.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.6" y="1070.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="932.6" y="1043.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="935.6" y="1054.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.02%)</title><rect x="932.6" y="1027.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="935.6" y="1038.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.02%)</title><rect x="932.6" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="935.6" y="1022.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="932.6" y="995.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="935.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="932.6" y="979.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="935.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="932.6" y="963.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="935.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="932.6" y="947.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="935.6" y="958.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (549 samples, 13.47%)</title><rect x="932.9" y="1203.0" width="159.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="935.9" y="1214.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (370 samples, 9.08%)</title><rect x="933.2" y="1187.0" width="107.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="936.2" y="1198.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (291 samples, 7.14%)</title><rect x="936.4" y="1171.0" width="84.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="939.4" y="1182.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (290 samples, 7.11%)</title><rect x="936.7" y="1155.0" width="83.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="939.7" y="1166.0">one/nio/h..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.10%)</title><rect x="936.7" y="1139.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="939.7" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.07%)</title><rect x="937.8" y="1139.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="940.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.07%)</title><rect x="937.8" y="1123.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="940.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.05%)</title><rect x="937.8" y="1107.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="940.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.05%)</title><rect x="937.8" y="1091.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="940.8" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="938.1" y="1075.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="941.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="938.4" y="1107.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="941.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="938.4" y="1091.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.02%)</title><rect x="938.4" y="1075.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="941.4" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6 samples, 0.15%)</title><rect x="938.7" y="1139.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="941.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.12%)</title><rect x="939.0" y="1123.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="942.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="939.0" y="1107.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="942.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="939.0" y="1091.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="942.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.10%)</title><rect x="939.3" y="1107.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="942.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="939.9" y="1091.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="942.9" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.handleDefault (277 samples, 6.80%)</title><rect x="940.5" y="1139.0" width="80.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="943.5" y="1150.0">ru/mail/p..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.10%)</title><rect x="940.7" y="1123.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="943.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="941.0" y="1107.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="944.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="941.0" y="1091.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="944.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="941.3" y="1091.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="944.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="941.6" y="1107.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="944.6" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (272 samples, 6.67%)</title><rect x="941.9" y="1123.0" width="78.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="944.9" y="1134.0">ru/mail/p..</text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="942.5" y="1107.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="945.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.05%)</title><rect x="942.8" y="1107.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="945.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.05%)</title><rect x="942.8" y="1091.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="945.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.02%)</title><rect x="943.1" y="1075.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="946.1" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="943.1" y="1059.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="946.1" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title><rect x="943.3" y="1107.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="946.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title><rect x="943.3" y="1091.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="946.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="943.3" y="1075.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="946.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="943.3" y="1059.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="946.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="943.6" y="1043.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="946.6" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="943.6" y="1027.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="946.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="943.6" y="1011.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="946.6" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.20%)</title><rect x="943.9" y="1107.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="946.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.05%)</title><rect x="944.2" y="1091.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="947.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.07%)</title><rect x="944.8" y="1091.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="947.8" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.05%)</title><rect x="945.7" y="1091.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="945.7" y="1075.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="948.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="945.7" y="1059.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="948.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="945.7" y="1043.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="948.7" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/Node.primaryFor (3 samples, 0.07%)</title><rect x="946.2" y="1107.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="949.2" y="1118.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="946.2" y="1091.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="949.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (2 samples, 0.05%)</title><rect x="946.5" y="1091.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="949.5" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.executeAsync (254 samples, 6.23%)</title><rect x="947.1" y="1107.0" width="73.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="950.1" y="1118.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="947.1" y="1091.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="950.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="947.1" y="1075.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="950.1" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$75/990504030.get$Lambda (1 samples, 0.02%)</title><rect x="947.1" y="1059.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (253 samples, 6.21%)</title><rect x="947.4" y="1091.0" width="73.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.4" y="1102.0">java/uti..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="948.0" y="1075.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="951.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (250 samples, 6.13%)</title><rect x="948.3" y="1075.0" width="72.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="951.3" y="1086.0">java/uti..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="948.8" y="1059.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="951.8" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.02%)</title><rect x="949.1" y="1059.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.1" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="949.1" y="1043.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="952.1" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="949.1" y="1027.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="952.1" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="949.1" y="1011.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.1" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="949.1" y="995.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.1" y="1006.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.02%)</title><rect x="949.1" y="979.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="952.1" y="990.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.02%)</title><rect x="949.1" y="963.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="952.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (236 samples, 5.79%)</title><rect x="949.4" y="1059.0" width="68.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="952.4" y="1070.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.17%)</title><rect x="949.4" y="1043.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="952.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.12%)</title><rect x="949.4" y="1027.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="952.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.10%)</title><rect x="949.7" y="1011.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="952.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.02%)</title><rect x="950.0" y="995.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="953.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="950.0" y="979.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="953.0" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="950.0" y="963.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="953.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.02%)</title><rect x="950.0" y="947.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="953.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.05%)</title><rect x="950.3" y="995.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="953.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.initializeSyncQueue (1 samples, 0.02%)</title><rect x="950.6" y="979.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="953.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (2 samples, 0.05%)</title><rect x="950.9" y="1027.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="953.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="951.5" y="1043.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="954.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="951.5" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="954.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.05%)</title><rect x="951.5" y="1011.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="954.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.05%)</title><rect x="951.5" y="995.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="954.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (227 samples, 5.57%)</title><rect x="952.0" y="1043.0" width="65.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="955.0" y="1054.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (227 samples, 5.57%)</title><rect x="952.0" y="1027.0" width="65.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="955.0" y="1038.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (224 samples, 5.50%)</title><rect x="952.0" y="1011.0" width="64.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="955.0" y="1022.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (222 samples, 5.45%)</title><rect x="952.6" y="995.0" width="64.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="955.6" y="1006.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (222 samples, 5.45%)</title><rect x="952.6" y="979.0" width="64.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="955.6" y="990.0">jdk/int..</text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="954.3" y="963.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="957.3" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="954.6" y="963.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.6" y="974.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.07%)</title><rect x="954.9" y="963.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="957.9" y="974.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.05%)</title><rect x="955.8" y="963.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.8" y="974.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.02%)</title><rect x="956.4" y="963.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="959.4" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="956.7" y="963.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="959.7" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (205 samples, 5.03%)</title><rect x="957.0" y="963.0" width="59.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="960.0" y="974.0">Unsafe..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="958.1" y="947.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="961.1" y="958.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="958.4" y="947.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.4" y="958.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.02%)</title><rect x="958.7" y="931.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="961.7" y="942.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="959.0" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.0" y="958.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="959.3" y="947.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.3" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.05%)</title><rect x="959.6" y="947.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.6" y="958.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.05%)</title><rect x="959.6" y="931.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="962.6" y="942.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.05%)</title><rect x="959.6" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.6" y="926.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="959.8" y="899.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.8" y="910.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.07%)</title><rect x="960.1" y="947.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="963.1" y="958.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.05%)</title><rect x="960.1" y="931.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.1" y="942.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="960.7" y="931.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="963.7" y="942.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.05%)</title><rect x="961.0" y="947.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.0" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="961.6" y="947.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="964.6" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.02%)</title><rect x="961.6" y="931.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="964.6" y="942.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.02%)</title><rect x="961.6" y="915.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.6" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.12%)</title><rect x="961.9" y="947.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.9" y="958.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.05%)</title><rect x="962.2" y="931.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="965.2" y="942.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="962.7" y="931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="965.7" y="942.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="963.0" y="931.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.0" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="963.0" y="915.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.0" y="926.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="963.0" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.0" y="910.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="963.3" y="947.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="966.3" y="958.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.02%)</title><rect x="963.3" y="931.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.3" y="942.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (9 samples, 0.22%)</title><rect x="963.6" y="947.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.6" y="958.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.02%)</title><rect x="964.8" y="931.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="967.8" y="942.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.10%)</title><rect x="965.1" y="931.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="968.1" y="942.0"></text>
</g>
<g>
<title>__psynch_cvsignal (165 samples, 4.05%)</title><rect x="966.2" y="947.0" width="47.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="969.2" y="958.0">__ps..</text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="1014.0" y="947.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.0" y="958.0"></text>
</g>
<g>
<title>pthread_cond_signal (4 samples, 0.10%)</title><rect x="1014.6" y="947.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1017.6" y="958.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.05%)</title><rect x="1015.1" y="931.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1018.1" y="942.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.05%)</title><rect x="1015.7" y="947.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1018.7" y="958.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.05%)</title><rect x="1016.3" y="963.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1019.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.07%)</title><rect x="1016.9" y="1011.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1019.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.25%)</title><rect x="1017.7" y="1059.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1020.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.25%)</title><rect x="1017.7" y="1043.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1020.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.15%)</title><rect x="1018.0" y="1027.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1021.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="1019.5" y="1011.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1022.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="1019.5" y="995.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1022.5" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="1019.5" y="979.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1022.5" y="990.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.02%)</title><rect x="1019.5" y="963.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1022.5" y="974.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="1019.5" y="947.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.5" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="1019.5" y="931.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1022.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.07%)</title><rect x="1019.8" y="1027.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1022.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.02%)</title><rect x="1020.4" y="1011.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.4" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (17 samples, 0.42%)</title><rect x="1020.6" y="1171.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1023.6" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.12%)</title><rect x="1021.2" y="1155.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1024.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.12%)</title><rect x="1021.2" y="1139.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1024.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.12%)</title><rect x="1021.2" y="1123.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1024.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="1021.2" y="1107.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1024.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.10%)</title><rect x="1021.5" y="1107.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1024.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.25%)</title><rect x="1022.7" y="1155.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1025.7" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.25%)</title><rect x="1022.7" y="1139.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1025.7" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (44 samples, 1.08%)</title><rect x="1025.6" y="1171.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1028.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="1027.6" y="1155.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1030.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="1027.9" y="1139.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (31 samples, 0.76%)</title><rect x="1028.2" y="1155.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1031.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="1028.7" y="1139.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1031.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (24 samples, 0.59%)</title><rect x="1029.3" y="1139.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1032.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.15%)</title><rect x="1031.9" y="1123.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1034.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.10%)</title><rect x="1032.5" y="1107.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.05%)</title><rect x="1033.1" y="1091.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1036.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.05%)</title><rect x="1033.1" y="1075.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1036.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (8 samples, 0.20%)</title><rect x="1033.7" y="1123.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1036.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (8 samples, 0.20%)</title><rect x="1033.7" y="1107.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1036.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (8 samples, 0.20%)</title><rect x="1033.7" y="1091.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1036.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.02%)</title><rect x="1036.0" y="1123.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.07%)</title><rect x="1036.3" y="1139.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.3" y="1150.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1037.1" y="1155.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1040.1" y="1166.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1037.4" y="1155.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1040.4" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.05%)</title><rect x="1037.7" y="1155.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1040.7" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.17%)</title><rect x="1038.3" y="1171.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1041.3" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.17%)</title><rect x="1038.3" y="1155.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1041.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1040.0" y="1139.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1043.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1040.0" y="1123.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.02%)</title><rect x="1040.0" y="1107.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.0" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (178 samples, 4.37%)</title><rect x="1040.3" y="1187.0" width="51.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1043.3" y="1198.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (177 samples, 4.34%)</title><rect x="1040.6" y="1171.0" width="51.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1043.6" y="1182.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title><rect x="1040.6" y="1155.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.6" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1040.9" y="1139.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1043.9" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (175 samples, 4.29%)</title><rect x="1041.2" y="1155.0" width="50.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1044.2" y="1166.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (18 samples, 0.44%)</title><rect x="1042.9" y="1139.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1045.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (18 samples, 0.44%)</title><rect x="1042.9" y="1123.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1045.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="1042.9" y="1107.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1045.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.02%)</title><rect x="1042.9" y="1091.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1045.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="1043.2" y="1091.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1046.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="1043.2" y="1075.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1046.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="1043.2" y="1059.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1046.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (13 samples, 0.32%)</title><rect x="1043.5" y="1107.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1046.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1044.1" y="1091.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1047.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (8 samples, 0.20%)</title><rect x="1044.4" y="1091.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1047.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (8 samples, 0.20%)</title><rect x="1044.4" y="1075.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1047.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (3 samples, 0.07%)</title><rect x="1044.4" y="1059.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1047.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (3 samples, 0.07%)</title><rect x="1045.3" y="1059.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1048.3" y="1070.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.02%)</title><rect x="1046.1" y="1059.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1049.1" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1046.4" y="1059.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1049.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (2 samples, 0.05%)</title><rect x="1046.7" y="1091.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1049.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.05%)</title><rect x="1046.7" y="1075.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1049.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (2 samples, 0.05%)</title><rect x="1046.7" y="1059.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1049.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.07%)</title><rect x="1047.3" y="1107.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1050.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.07%)</title><rect x="1047.3" y="1091.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1050.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.07%)</title><rect x="1047.3" y="1075.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1050.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.02%)</title><rect x="1048.1" y="1139.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1051.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="1048.1" y="1123.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1051.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.02%)</title><rect x="1048.1" y="1107.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1051.1" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (150 samples, 3.68%)</title><rect x="1048.4" y="1139.0" width="43.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1051.4" y="1150.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (150 samples, 3.68%)</title><rect x="1048.4" y="1123.0" width="43.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1051.4" y="1134.0">sun/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (10 samples, 0.25%)</title><rect x="1048.4" y="1107.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1051.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="1048.7" y="1091.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1051.7" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="1048.7" y="1075.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1051.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.20%)</title><rect x="1049.0" y="1091.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1052.0" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.20%)</title><rect x="1049.0" y="1075.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1052.0" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (3 samples, 0.07%)</title><rect x="1049.0" y="1059.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1052.0" y="1070.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (3 samples, 0.07%)</title><rect x="1049.0" y="1043.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1052.0" y="1054.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="1049.3" y="1027.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.3" y="1038.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1049.6" y="1027.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1052.6" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (5 samples, 0.12%)</title><rect x="1049.9" y="1059.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1052.9" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (5 samples, 0.12%)</title><rect x="1049.9" y="1043.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.9" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (5 samples, 0.12%)</title><rect x="1049.9" y="1027.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (5 samples, 0.12%)</title><rect x="1049.9" y="1011.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1052.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (5 samples, 0.12%)</title><rect x="1049.9" y="995.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1052.9" y="1006.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (5 samples, 0.12%)</title><rect x="1049.9" y="979.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1052.9" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.07%)</title><rect x="1050.2" y="963.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1053.2" y="974.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.07%)</title><rect x="1050.2" y="947.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.2" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.07%)</title><rect x="1050.2" y="931.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.2" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.07%)</title><rect x="1050.2" y="915.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1053.2" y="926.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.07%)</title><rect x="1050.2" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.2" y="910.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.02%)</title><rect x="1050.2" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1053.2" y="894.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.02%)</title><rect x="1050.5" y="883.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.5" y="894.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.02%)</title><rect x="1050.8" y="883.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1053.8" y="894.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.02%)</title><rect x="1051.0" y="963.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.0" y="974.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.02%)</title><rect x="1051.0" y="947.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1054.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (134 samples, 3.29%)</title><rect x="1051.3" y="1107.0" width="38.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1054.3" y="1118.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.address (1 samples, 0.02%)</title><rect x="1051.3" y="1091.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1054.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="1051.6" y="1091.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1054.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="1051.6" y="1075.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1054.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1051.6" y="1059.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1054.6" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (132 samples, 3.24%)</title><rect x="1051.9" y="1091.0" width="38.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1054.9" y="1102.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (132 samples, 3.24%)</title><rect x="1051.9" y="1075.0" width="38.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1054.9" y="1086.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.07%)</title><rect x="1054.5" y="1059.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1057.5" y="1070.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="1055.1" y="1043.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1058.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findNative (1 samples, 0.02%)</title><rect x="1055.4" y="1059.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1058.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.findEntry (1 samples, 0.02%)</title><rect x="1055.4" y="1043.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1058.4" y="1054.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_findEntry (1 samples, 0.02%)</title><rect x="1055.4" y="1027.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1058.4" y="1038.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="1055.4" y="1011.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1058.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="995.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1058.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="979.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1058.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="963.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1058.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="947.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1058.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="931.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1058.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="915.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1058.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="899.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1058.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="883.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1058.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="867.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1058.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="851.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1058.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="835.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1058.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="819.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1058.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1055.4" y="803.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1058.4" y="814.0"></text>
</g>
<g>
<title>read (119 samples, 2.92%)</title><rect x="1055.7" y="1059.0" width="34.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1058.7" y="1070.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.02%)</title><rect x="1090.1" y="1107.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1093.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.02%)</title><rect x="1090.1" y="1091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1093.1" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (5 samples, 0.12%)</title><rect x="1090.4" y="1107.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1093.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.05%)</title><rect x="1090.7" y="1091.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1093.7" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (2 samples, 0.05%)</title><rect x="1091.3" y="1091.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1094.3" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.15%)</title><rect x="1091.9" y="1203.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.9" y="1214.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="1092.1" y="1187.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1095.1" y="1198.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.07%)</title><rect x="1092.1" y="1171.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1095.1" y="1182.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="1092.7" y="1155.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1095.7" y="1166.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.05%)</title><rect x="1093.0" y="1187.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1096.0" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="1093.6" y="1235.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.6" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.05%)</title><rect x="1093.9" y="1235.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.9" y="1246.0"></text>
</g>
<g>
<title>start_wqthread (3 samples, 0.07%)</title><rect x="1094.5" y="1235.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1097.5" y="1246.0"></text>
</g>
<g>
<title>_pthread_wqthread (3 samples, 0.07%)</title><rect x="1094.5" y="1219.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1097.5" y="1230.0"></text>
</g>
<g>
<title>_dispatch_kevent_worker_thread (3 samples, 0.07%)</title><rect x="1094.5" y="1203.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1097.5" y="1214.0"></text>
</g>
<g>
<title>_dispatch_lane_serial_drain (3 samples, 0.07%)</title><rect x="1094.5" y="1187.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1097.5" y="1198.0"></text>
</g>
<g>
<title>_dispatch_source_invoke (3 samples, 0.07%)</title><rect x="1094.5" y="1171.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1097.5" y="1182.0"></text>
</g>
<g>
<title>_dispatch_continuation_pop (3 samples, 0.07%)</title><rect x="1094.5" y="1155.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1097.5" y="1166.0"></text>
</g>
<g>
<title>_dispatch_client_callout (3 samples, 0.07%)</title><rect x="1094.5" y="1139.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1097.5" y="1150.0"></text>
</g>
<g>
<title>malloc_memory_event_handler (3 samples, 0.07%)</title><rect x="1094.5" y="1123.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1097.5" y="1134.0"></text>
</g>
<g>
<title>malloc_zone_pressure_relief (3 samples, 0.07%)</title><rect x="1094.5" y="1107.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1097.5" y="1118.0"></text>
</g>
<g>
<title>szone_pressure_relief (3 samples, 0.07%)</title><rect x="1094.5" y="1091.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1097.5" y="1102.0"></text>
</g>
<g>
<title>tiny_madvise_pressure_relief (3 samples, 0.07%)</title><rect x="1094.5" y="1075.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1097.5" y="1086.0"></text>
</g>
<g>
<title>tiny_free_reattach_region (2 samples, 0.05%)</title><rect x="1094.5" y="1059.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1097.5" y="1070.0"></text>
</g>
<g>
<title>tiny_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="1095.0" y="1059.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1098.0" y="1070.0"></text>
</g>
<g>
<title>thread_start (327 samples, 8.02%)</title><rect x="1095.3" y="1235.0" width="94.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1098.3" y="1246.0">thread_start</text>
</g>
<g>
<title>_pthread_start (327 samples, 8.02%)</title><rect x="1095.3" y="1219.0" width="94.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1098.3" y="1230.0">_pthread_st..</text>
</g>
<g>
<title>_pthread_body (327 samples, 8.02%)</title><rect x="1095.3" y="1203.0" width="94.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1098.3" y="1214.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (327 samples, 8.02%)</title><rect x="1095.3" y="1187.0" width="94.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1098.3" y="1198.0">thread_nati..</text>
</g>
<g>
<title>Thread::call_run() (327 samples, 8.02%)</title><rect x="1095.3" y="1171.0" width="94.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.3" y="1182.0">Thread::cal..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (6 samples, 0.15%)</title><rect x="1095.3" y="1155.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.3" y="1166.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (1 samples, 0.02%)</title><rect x="1095.3" y="1139.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.3" y="1150.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (1 samples, 0.02%)</title><rect x="1095.3" y="1123.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.3" y="1134.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.02%)</title><rect x="1095.3" y="1107.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.3" y="1118.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (1 samples, 0.02%)</title><rect x="1095.3" y="1091.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.3" y="1102.0"></text>
</g>
<g>
<title>G1RefineCardConcurrentlyClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.02%)</title><rect x="1095.3" y="1075.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.3" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (1 samples, 0.02%)</title><rect x="1095.3" y="1059.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.3" y="1070.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (1 samples, 0.02%)</title><rect x="1095.3" y="1043.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.3" y="1054.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.02%)</title><rect x="1095.3" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.3" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.02%)</title><rect x="1095.3" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.3" y="1022.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (5 samples, 0.12%)</title><rect x="1095.6" y="1139.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.6" y="1150.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.02%)</title><rect x="1095.6" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.6" y="1134.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.02%)</title><rect x="1095.6" y="1107.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.6" y="1118.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1095.6" y="1091.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.6" y="1102.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="1095.6" y="1075.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.6" y="1086.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (4 samples, 0.10%)</title><rect x="1095.9" y="1123.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.9" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.07%)</title><rect x="1096.2" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.2" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.07%)</title><rect x="1096.2" y="1091.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.2" y="1102.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.02%)</title><rect x="1096.2" y="1075.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.2" y="1086.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.05%)</title><rect x="1096.5" y="1075.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.5" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="1096.5" y="1059.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1099.5" y="1070.0"></text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 0.22%)</title><rect x="1097.1" y="1155.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.1" y="1166.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 0.22%)</title><rect x="1097.1" y="1139.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.1" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.05%)</title><rect x="1097.1" y="1123.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.1" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.02%)</title><rect x="1097.1" y="1107.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.1" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.02%)</title><rect x="1097.1" y="1091.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.1" y="1102.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1097.1" y="1075.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.1" y="1086.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.02%)</title><rect x="1097.4" y="1107.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.4" y="1118.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::do_spin_master_work(TerminatorTerminator*) (1 samples, 0.02%)</title><rect x="1097.4" y="1091.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1100.4" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1097.6" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.6" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1097.6" y="1107.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1100.6" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.02%)</title><rect x="1097.6" y="1091.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.6" y="1102.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.02%)</title><rect x="1097.6" y="1075.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.6" y="1086.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (1 samples, 0.02%)</title><rect x="1097.6" y="1059.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.6" y="1070.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.02%)</title><rect x="1097.6" y="1043.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.6" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.02%)</title><rect x="1097.6" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.6" y="1038.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1097.6" y="1011.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.6" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.02%)</title><rect x="1097.6" y="995.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.6" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.05%)</title><rect x="1097.9" y="1123.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.9" y="1134.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.05%)</title><rect x="1097.9" y="1107.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.9" y="1118.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.05%)</title><rect x="1097.9" y="1091.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1100.9" y="1102.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2 samples, 0.05%)</title><rect x="1097.9" y="1075.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1100.9" y="1086.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (2 samples, 0.05%)</title><rect x="1097.9" y="1059.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.9" y="1070.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (2 samples, 0.05%)</title><rect x="1097.9" y="1043.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.9" y="1054.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.05%)</title><rect x="1097.9" y="1027.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.9" y="1038.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_size(oopDesc*) const (1 samples, 0.02%)</title><rect x="1098.2" y="1011.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.2" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.10%)</title><rect x="1098.5" y="1123.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.5" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.02%)</title><rect x="1098.5" y="1107.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.5" y="1118.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.02%)</title><rect x="1098.5" y="1091.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.5" y="1102.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.02%)</title><rect x="1098.5" y="1075.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.5" y="1086.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (1 samples, 0.02%)</title><rect x="1098.5" y="1059.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.5" y="1070.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.02%)</title><rect x="1098.5" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.5" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.02%)</title><rect x="1098.5" y="1027.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.5" y="1038.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1098.5" y="1011.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.5" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_string_table_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.07%)</title><rect x="1098.8" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.8" y="1118.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (3 samples, 0.07%)</title><rect x="1098.8" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.8" y="1102.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.07%)</title><rect x="1098.8" y="1075.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.8" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.05%)</title><rect x="1099.1" y="1059.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.1" y="1070.0"></text>
</g>
<g>
<title>JavaThread::run() (289 samples, 7.09%)</title><rect x="1099.7" y="1155.0" width="83.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.7" y="1166.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (289 samples, 7.09%)</title><rect x="1099.7" y="1139.0" width="83.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.7" y="1150.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (286 samples, 7.02%)</title><rect x="1099.7" y="1123.0" width="82.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.7" y="1134.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (285 samples, 6.99%)</title><rect x="1099.7" y="1107.0" width="82.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.7" y="1118.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (257 samples, 6.31%)</title><rect x="1099.7" y="1091.0" width="74.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.7" y="1102.0">C2Compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (257 samples, 6.31%)</title><rect x="1099.7" y="1075.0" width="74.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.7" y="1086.0">Compile:..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.02%)</title><rect x="1100.0" y="1059.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.0" y="1070.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.02%)</title><rect x="1100.0" y="1043.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.0" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1100.0" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.0" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1100.0" y="1011.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.0" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1100.0" y="995.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.0" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1100.0" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.0" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1100.0" y="963.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.0" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1100.0" y="947.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.0" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1100.0" y="931.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.0" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1100.0" y="915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.0" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1100.0" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.0" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1100.0" y="883.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.0" y="894.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1100.0" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.0" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.02%)</title><rect x="1100.0" y="851.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.0" y="862.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.02%)</title><rect x="1100.0" y="835.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.0" y="846.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (136 samples, 3.34%)</title><rect x="1100.3" y="1059.0" width="39.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.3" y="1070.0">Com..</text>
</g>
<g>
<title>Compile::Output() (7 samples, 0.17%)</title><rect x="1100.3" y="1043.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.3" y="1054.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.02%)</title><rect x="1100.3" y="1027.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.3" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (6 samples, 0.15%)</title><rect x="1100.5" y="1027.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.5" y="1038.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (6 samples, 0.15%)</title><rect x="1100.5" y="1011.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.5" y="1022.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.02%)</title><rect x="1101.1" y="995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.1" y="1006.0"></text>
</g>
<g>
<title>MachUEPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.02%)</title><rect x="1101.1" y="979.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.1" y="990.0"></text>
</g>
<g>
<title>MacroAssembler::load_klass(RegisterImpl*, RegisterImpl*) (1 samples, 0.02%)</title><rect x="1101.1" y="963.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.1" y="974.0"></text>
</g>
<g>
<title>MacroAssembler::decode_klass_not_null(RegisterImpl*) (1 samples, 0.02%)</title><rect x="1101.1" y="947.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.1" y="958.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.02%)</title><rect x="1101.4" y="995.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.4" y="1006.0"></text>
</g>
<g>
<title>Compile::record_dead_node(unsigned int) (1 samples, 0.02%)</title><rect x="1101.4" y="979.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.4" y="990.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.05%)</title><rect x="1101.7" y="995.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.7" y="1006.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1102.0" y="979.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.0" y="990.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.02%)</title><rect x="1102.0" y="963.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.0" y="974.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.02%)</title><rect x="1102.0" y="947.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.0" y="958.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.02%)</title><rect x="1102.0" y="931.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.0" y="942.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.02%)</title><rect x="1102.0" y="915.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.0" y="926.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.12%)</title><rect x="1102.3" y="1043.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.3" y="1054.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.05%)</title><rect x="1102.3" y="1027.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.3" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.02%)</title><rect x="1102.6" y="1011.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.6" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.02%)</title><rect x="1102.6" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.6" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1102.6" y="979.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.6" y="990.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.02%)</title><rect x="1102.6" y="963.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.6" y="974.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1102.6" y="947.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.6" y="958.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.02%)</title><rect x="1102.6" y="931.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.6" y="942.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.02%)</title><rect x="1102.9" y="1027.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.9" y="1038.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (2 samples, 0.05%)</title><rect x="1103.2" y="1027.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.2" y="1038.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.02%)</title><rect x="1103.2" y="1011.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.2" y="1022.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.02%)</title><rect x="1103.4" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.4" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.02%)</title><rect x="1103.4" y="995.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.4" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1103.4" y="979.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.4" y="990.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.02%)</title><rect x="1103.4" y="963.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.4" y="974.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1103.4" y="947.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.4" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (15 samples, 0.37%)</title><rect x="1103.7" y="1043.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.7" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.05%)</title><rect x="1103.7" y="1027.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.7" y="1038.0"></text>
</g>
<g>
<title>Matcher::find_shared_visit(Matcher::MStack&amp;, Node*, unsigned int, bool&amp;, int&amp;) (1 samples, 0.02%)</title><rect x="1104.0" y="1011.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.0" y="1022.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (13 samples, 0.32%)</title><rect x="1104.3" y="1027.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.3" y="1038.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.07%)</title><rect x="1104.6" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.6" y="1022.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.02%)</title><rect x="1105.5" y="1011.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.5" y="1022.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (8 samples, 0.20%)</title><rect x="1105.8" y="1011.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.8" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (6 samples, 0.15%)</title><rect x="1105.8" y="995.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.8" y="1006.0"></text>
</g>
<g>
<title>BoolNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1106.3" y="979.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.3" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.05%)</title><rect x="1106.6" y="979.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.6" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.02%)</title><rect x="1106.9" y="963.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.9" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1106.9" y="947.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.9" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1106.9" y="931.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.9" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1106.9" y="915.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.9" y="926.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.02%)</title><rect x="1107.2" y="979.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.2" y="990.0"></text>
</g>
<g>
<title>State::_sub_Op_ClearArray(Node const*) (1 samples, 0.02%)</title><rect x="1107.2" y="963.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.2" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.02%)</title><rect x="1107.5" y="995.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.5" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.02%)</title><rect x="1107.5" y="979.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.5" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.02%)</title><rect x="1107.5" y="963.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.5" y="974.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="1107.8" y="995.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.8" y="1006.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.02%)</title><rect x="1107.8" y="979.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.8" y="990.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.02%)</title><rect x="1107.8" y="963.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.8" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="1107.8" y="947.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1110.8" y="958.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.02%)</title><rect x="1108.1" y="1043.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.1" y="1054.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.02%)</title><rect x="1108.1" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.1" y="1038.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.02%)</title><rect x="1108.1" y="1011.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.1" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (18 samples, 0.44%)</title><rect x="1108.4" y="1043.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.4" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (18 samples, 0.44%)</title><rect x="1108.4" y="1027.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.4" y="1038.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.02%)</title><rect x="1108.4" y="1011.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.4" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.07%)</title><rect x="1108.7" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.7" y="1022.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.02%)</title><rect x="1108.7" y="995.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.7" y="1006.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.02%)</title><rect x="1108.9" y="995.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.9" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.02%)</title><rect x="1109.2" y="995.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.2" y="1006.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.02%)</title><rect x="1109.2" y="979.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.2" y="990.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.02%)</title><rect x="1109.2" y="963.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.2" y="974.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1109.2" y="947.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.2" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1109.2" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.2" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1109.2" y="915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.2" y="926.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.02%)</title><rect x="1109.2" y="899.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.2" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.07%)</title><rect x="1109.5" y="1011.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.5" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (3 samples, 0.07%)</title><rect x="1109.5" y="995.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.5" y="1006.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1109.8" y="979.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.8" y="990.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (1 samples, 0.02%)</title><rect x="1110.1" y="979.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1113.1" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.05%)</title><rect x="1110.4" y="1011.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.4" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.02%)</title><rect x="1111.0" y="1011.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.07%)</title><rect x="1111.3" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.3" y="1022.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.07%)</title><rect x="1111.3" y="995.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.3" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.12%)</title><rect x="1112.1" y="1011.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.1" y="1022.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1113.0" y="995.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.0" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.02%)</title><rect x="1113.3" y="995.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.3" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (1 samples, 0.02%)</title><rect x="1113.3" y="979.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.3" y="990.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1113.3" y="963.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.3" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.02%)</title><rect x="1113.6" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::move_to_end(Block*, unsigned int) (1 samples, 0.02%)</title><rect x="1113.6" y="1027.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.6" y="1038.0"></text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.02%)</title><rect x="1113.6" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (89 samples, 2.18%)</title><rect x="1113.9" y="1043.0" width="25.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.9" y="1054.0">P..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="1113.9" y="1027.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="1038.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1114.2" y="1027.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.2" y="1038.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1114.4" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.4" y="1038.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.02%)</title><rect x="1114.7" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.7" y="1038.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.05%)</title><rect x="1115.0" y="1027.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.05%)</title><rect x="1115.6" y="1027.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.02%)</title><rect x="1115.6" y="1011.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.6" y="1022.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1115.6" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.6" y="1006.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="1115.6" y="979.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1118.6" y="990.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.02%)</title><rect x="1115.9" y="1011.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.07%)</title><rect x="1116.2" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.2" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1116.2" y="1011.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.02%)</title><rect x="1116.8" y="1011.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.02%)</title><rect x="1116.8" y="995.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.25%)</title><rect x="1117.0" y="1027.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.0" y="1038.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1118.8" y="1011.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.8" y="1022.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1118.8" y="995.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1121.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::set_was_spilled(Node*) (1 samples, 0.02%)</title><rect x="1119.1" y="1011.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.02%)</title><rect x="1119.4" y="1011.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.4" y="1022.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="1119.7" y="1011.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (22 samples, 0.54%)</title><rect x="1119.9" y="1027.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.9" y="1038.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.05%)</title><rect x="1120.5" y="1011.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.5" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.02%)</title><rect x="1121.1" y="1011.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.1" y="1022.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.02%)</title><rect x="1121.4" y="1011.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.4" y="1022.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.02%)</title><rect x="1121.4" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.05%)</title><rect x="1121.7" y="1011.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.7" y="1022.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1122.0" y="995.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::assign_high_score_to_immediate_copies(Block*, Node*, LRG&amp;, unsigned int, unsigned int) (1 samples, 0.02%)</title><rect x="1122.3" y="1011.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.05%)</title><rect x="1122.5" y="1011.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.5" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1122.5" y="995.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.5" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.02%)</title><rect x="1122.8" y="995.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (8 samples, 0.20%)</title><rect x="1123.1" y="1011.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.1" y="1022.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.07%)</title><rect x="1123.1" y="995.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.1" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.07%)</title><rect x="1124.0" y="995.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.0" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.05%)</title><rect x="1124.9" y="995.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1125.4" y="1011.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.4" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.02%)</title><rect x="1125.4" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.4" y="1006.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.02%)</title><rect x="1125.4" y="979.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.02%)</title><rect x="1125.7" y="1011.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.7" y="1022.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1126.0" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.02%)</title><rect x="1126.3" y="1027.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.02%)</title><rect x="1126.3" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.3" y="1022.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1126.3" y="995.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (16 samples, 0.39%)</title><rect x="1126.6" y="1027.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.6" y="1038.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.02%)</title><rect x="1128.3" y="1011.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="1022.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.02%)</title><rect x="1128.6" y="1011.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.6" y="1022.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.05%)</title><rect x="1128.9" y="1011.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.9" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.02%)</title><rect x="1129.5" y="1011.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.5" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.02%)</title><rect x="1129.5" y="995.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.5" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (3 samples, 0.07%)</title><rect x="1129.8" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.8" y="1022.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1130.1" y="995.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.1" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.02%)</title><rect x="1130.4" y="995.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.4" y="1006.0"></text>
</g>
<g>
<title>indIndexOper::num_edges() const (1 samples, 0.02%)</title><rect x="1130.7" y="1011.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.7" y="1022.0"></text>
</g>
<g>
<title>loadLNode::oper_input_base() const (1 samples, 0.02%)</title><rect x="1130.9" y="1011.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.05%)</title><rect x="1131.2" y="1027.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.22%)</title><rect x="1131.8" y="1027.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.8" y="1038.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.05%)</title><rect x="1132.1" y="1011.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.1" y="1022.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="1132.1" y="995.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1135.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.10%)</title><rect x="1132.7" y="1011.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.7" y="1022.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (2 samples, 0.05%)</title><rect x="1133.8" y="1011.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.8" y="1022.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 0.05%)</title><rect x="1133.8" y="995.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1136.8" y="1006.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.15%)</title><rect x="1134.4" y="1027.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.4" y="1038.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.02%)</title><rect x="1134.4" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.4" y="1022.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.02%)</title><rect x="1134.4" y="995.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.4" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.12%)</title><rect x="1134.7" y="1011.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.02%)</title><rect x="1134.7" y="995.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.7" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 0.10%)</title><rect x="1135.0" y="995.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.0" y="1006.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.02%)</title><rect x="1135.0" y="979.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.02%)</title><rect x="1135.0" y="963.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.0" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.05%)</title><rect x="1135.3" y="979.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.3" y="990.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1135.3" y="963.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.3" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1135.6" y="963.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.6" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.02%)</title><rect x="1135.9" y="979.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.9" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.02%)</title><rect x="1135.9" y="963.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.9" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.02%)</title><rect x="1136.2" y="1027.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.2" y="1038.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1136.2" y="1011.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.2" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.20%)</title><rect x="1136.4" y="1027.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.4" y="1038.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.02%)</title><rect x="1137.6" y="1011.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.6" y="1022.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1137.9" y="1011.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.9" y="1022.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1137.9" y="995.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.9" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.05%)</title><rect x="1138.2" y="1011.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.2" y="1022.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.02%)</title><rect x="1138.8" y="1027.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.8" y="1038.0"></text>
</g>
<g>
<title>jmpDirNode::oper_input_base() const (1 samples, 0.02%)</title><rect x="1139.0" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.0" y="1038.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.02%)</title><rect x="1139.3" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.3" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (94 samples, 2.31%)</title><rect x="1139.6" y="1059.0" width="27.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.6" y="1070.0">C..</text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (42 samples, 1.03%)</title><rect x="1139.6" y="1043.0" width="12.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (42 samples, 1.03%)</title><rect x="1139.6" y="1027.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.6" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.07%)</title><rect x="1139.6" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.6" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.07%)</title><rect x="1139.6" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.6" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.07%)</title><rect x="1139.6" y="979.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.6" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.07%)</title><rect x="1139.6" y="963.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.6" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1139.6" y="947.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.6" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1139.6" y="931.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.6" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1139.6" y="915.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.6" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1139.6" y="899.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.6" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1139.6" y="883.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.6" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1139.6" y="867.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.6" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1139.6" y="851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.6" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1139.9" y="851.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.9" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1139.9" y="835.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.9" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1139.9" y="819.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.9" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1139.9" y="803.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.9" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1139.9" y="787.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.9" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1139.9" y="771.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.9" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1139.9" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.9" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1139.9" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.9" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1139.9" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.9" y="734.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.02%)</title><rect x="1139.9" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::reorg_offsets(IdealLoopTree*) (1 samples, 0.02%)</title><rect x="1140.2" y="947.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.2" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="1011.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.5" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="995.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.5" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="979.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.5" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="963.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.5" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="947.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.5" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="931.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.5" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="915.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.5" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="899.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.5" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.5" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="867.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.5" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.5" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1140.5" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.02%)</title><rect x="1140.5" y="819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1140.5" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.5" y="814.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="1140.5" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.07%)</title><rect x="1140.8" y="1011.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.8" y="1022.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.02%)</title><rect x="1141.1" y="995.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.1" y="1006.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="1141.4" y="995.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.4" y="1006.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.02%)</title><rect x="1141.4" y="979.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.4" y="990.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.02%)</title><rect x="1141.4" y="963.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.4" y="974.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.02%)</title><rect x="1141.4" y="947.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1144.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.05%)</title><rect x="1141.7" y="1011.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1141.7" y="995.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1141.7" y="979.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1141.7" y="963.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.7" y="974.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.02%)</title><rect x="1141.9" y="995.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 0.37%)</title><rect x="1142.2" y="1011.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (10 samples, 0.25%)</title><rect x="1143.7" y="995.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 0.15%)</title><rect x="1144.0" y="979.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.0" y="990.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.02%)</title><rect x="1144.0" y="963.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.05%)</title><rect x="1144.3" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.05%)</title><rect x="1144.3" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.05%)</title><rect x="1144.3" y="931.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.02%)</title><rect x="1144.3" y="915.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.3" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.02%)</title><rect x="1144.3" y="899.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.02%)</title><rect x="1144.5" y="915.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.07%)</title><rect x="1144.8" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.02%)</title><rect x="1144.8" y="947.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.05%)</title><rect x="1145.1" y="947.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.05%)</title><rect x="1145.1" y="931.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.1" y="942.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.05%)</title><rect x="1145.1" y="915.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.02%)</title><rect x="1145.7" y="979.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.7" y="990.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.02%)</title><rect x="1145.7" y="963.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.05%)</title><rect x="1146.0" y="979.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.02%)</title><rect x="1146.3" y="963.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="974.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.02%)</title><rect x="1146.3" y="947.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.02%)</title><rect x="1146.6" y="1011.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1146.9" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (5 samples, 0.12%)</title><rect x="1147.2" y="1011.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.02%)</title><rect x="1147.4" y="995.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.02%)</title><rect x="1147.4" y="979.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.4" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1147.4" y="963.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.4" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.02%)</title><rect x="1147.4" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.07%)</title><rect x="1147.7" y="995.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1147.7" y="979.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.02%)</title><rect x="1147.7" y="963.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.02%)</title><rect x="1147.7" y="947.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.7" y="958.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.02%)</title><rect x="1147.7" y="931.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.02%)</title><rect x="1148.0" y="979.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1148.0" y="963.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.02%)</title><rect x="1148.0" y="947.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.02%)</title><rect x="1148.3" y="979.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.3" y="990.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1148.3" y="963.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.3" y="974.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*) (1 samples, 0.02%)</title><rect x="1148.3" y="947.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.3" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.27%)</title><rect x="1148.6" y="1011.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.25%)</title><rect x="1148.6" y="995.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.6" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1148.6" y="979.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.6" y="990.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.02%)</title><rect x="1148.6" y="963.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.6" y="974.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*) (1 samples, 0.02%)</title><rect x="1148.6" y="947.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.6" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (7 samples, 0.17%)</title><rect x="1148.9" y="979.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.9" y="990.0"></text>
</g>
<g>
<title>NodeHash::grow() (6 samples, 0.15%)</title><rect x="1149.2" y="963.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.2" y="974.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.02%)</title><rect x="1149.2" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.2" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (4 samples, 0.10%)</title><rect x="1149.5" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.5" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1150.6" y="947.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1153.6" y="958.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1150.9" y="979.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1150.9" y="963.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.9" y="974.0"></text>
</g>
<g>
<title>PhaseValues::hash_delete(Node*) (1 samples, 0.02%)</title><rect x="1150.9" y="947.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.9" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.02%)</title><rect x="1150.9" y="931.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.9" y="942.0"></text>
</g>
<g>
<title>StartNode::Opcode() const (1 samples, 0.02%)</title><rect x="1151.2" y="979.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.02%)</title><rect x="1151.5" y="995.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.5" y="1006.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.07%)</title><rect x="1151.8" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="1152.4" y="1027.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1152.4" y="1011.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1152.4" y="995.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="1006.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.02%)</title><rect x="1152.4" y="979.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.07%)</title><rect x="1152.7" y="1043.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.07%)</title><rect x="1152.7" y="1027.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (2 samples, 0.05%)</title><rect x="1152.7" y="1011.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.7" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (2 samples, 0.05%)</title><rect x="1152.7" y="995.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.7" y="1006.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (2 samples, 0.05%)</title><rect x="1152.7" y="979.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.7" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.02%)</title><rect x="1152.7" y="963.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.7" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.02%)</title><rect x="1152.7" y="947.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.7" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1152.7" y="931.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.7" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.02%)</title><rect x="1152.7" y="915.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.7" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.02%)</title><rect x="1152.7" y="899.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.7" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.02%)</title><rect x="1152.7" y="883.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.7" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.02%)</title><rect x="1152.7" y="867.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.7" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1152.7" y="851.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.7" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.02%)</title><rect x="1152.7" y="835.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.7" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1152.7" y="819.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.7" y="830.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.02%)</title><rect x="1152.7" y="803.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.7" y="814.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.02%)</title><rect x="1152.9" y="963.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.9" y="974.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="1152.9" y="947.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.9" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.02%)</title><rect x="1152.9" y="931.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.9" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1152.9" y="915.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.9" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="1152.9" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.9" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.02%)</title><rect x="1152.9" y="883.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.9" y="894.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="1152.9" y="867.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1155.9" y="878.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.02%)</title><rect x="1153.2" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.2" y="1022.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.02%)</title><rect x="1153.2" y="995.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.05%)</title><rect x="1153.5" y="1043.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.5" y="1054.0"></text>
</g>
<g>
<title>LShiftINode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1153.8" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.8" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1153.8" y="1011.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="1022.0"></text>
</g>
<g>
<title>TypeInt::xdual() const (1 samples, 0.02%)</title><rect x="1153.8" y="995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.8" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.02%)</title><rect x="1154.1" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.02%)</title><rect x="1154.1" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.1" y="1038.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1154.1" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.1" y="1022.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1154.1" y="995.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.1" y="1006.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1154.1" y="979.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1157.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (30 samples, 0.74%)</title><rect x="1154.4" y="1043.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.4" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1154.4" y="1027.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.4" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1154.4" y="1011.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.4" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1154.4" y="995.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.02%)</title><rect x="1154.4" y="979.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.02%)</title><rect x="1154.4" y="963.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.02%)</title><rect x="1154.4" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.4" y="958.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.02%)</title><rect x="1154.4" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.4" y="942.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="1154.4" y="915.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1157.4" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.05%)</title><rect x="1154.7" y="1027.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.7" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1154.7" y="1011.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.7" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1154.7" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.7" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1154.7" y="979.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.02%)</title><rect x="1154.7" y="963.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="1154.7" y="947.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.7" y="958.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.02%)</title><rect x="1154.7" y="931.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="942.0"></text>
</g>
<g>
<title>Invariance::compute_invariance(Node*) (1 samples, 0.02%)</title><rect x="1154.7" y="915.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.7" y="926.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.02%)</title><rect x="1154.7" y="899.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.02%)</title><rect x="1155.0" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="1155.0" y="995.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.0" y="1006.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.02%)</title><rect x="1155.0" y="979.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="990.0"></text>
</g>
<g>
<title>Invariance::compute_invariance(Node*) (1 samples, 0.02%)</title><rect x="1155.0" y="963.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.0" y="974.0"></text>
</g>
<g>
<title>Invariance::visit(Node*, Node*) (1 samples, 0.02%)</title><rect x="1155.0" y="947.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_ctrl(Node*) const (1 samples, 0.02%)</title><rect x="1155.0" y="931.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.0" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate_invariants(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1155.3" y="1027.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="1038.0"></text>
</g>
<g>
<title>Node_Array::at(unsigned int) const (1 samples, 0.02%)</title><rect x="1155.3" y="1011.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.3" y="1022.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.02%)</title><rect x="1155.5" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.05%)</title><rect x="1155.8" y="1027.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.10%)</title><rect x="1156.4" y="1027.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.07%)</title><rect x="1156.4" y="1011.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.4" y="1022.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.02%)</title><rect x="1157.0" y="995.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1157.3" y="1011.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1157.3" y="995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1157.3" y="979.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 0.32%)</title><rect x="1157.6" y="1027.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.6" y="1038.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.02%)</title><rect x="1157.9" y="1011.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (11 samples, 0.27%)</title><rect x="1158.2" y="1011.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 0.17%)</title><rect x="1158.4" y="995.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="1006.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.02%)</title><rect x="1158.7" y="979.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.7" y="990.0"></text>
</g>
<g>
<title>_platform_strcmp (1 samples, 0.02%)</title><rect x="1158.7" y="963.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1161.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.05%)</title><rect x="1159.0" y="979.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.05%)</title><rect x="1159.0" y="963.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.05%)</title><rect x="1159.0" y="947.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.02%)</title><rect x="1159.0" y="931.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.02%)</title><rect x="1159.3" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.02%)</title><rect x="1159.3" y="915.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.3" y="926.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.02%)</title><rect x="1159.3" y="899.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.07%)</title><rect x="1159.6" y="979.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.02%)</title><rect x="1159.6" y="963.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.05%)</title><rect x="1159.9" y="963.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.05%)</title><rect x="1159.9" y="947.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.9" y="958.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.05%)</title><rect x="1159.9" y="931.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.02%)</title><rect x="1160.5" y="995.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.05%)</title><rect x="1160.8" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.05%)</title><rect x="1160.8" y="979.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.8" y="990.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.05%)</title><rect x="1160.8" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.05%)</title><rect x="1161.3" y="1027.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.02%)</title><rect x="1161.6" y="1011.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.07%)</title><rect x="1161.9" y="1027.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.05%)</title><rect x="1161.9" y="1011.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.9" y="1022.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1161.9" y="995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1161.9" y="979.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1161.9" y="963.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.9" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1162.2" y="995.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.2" y="1006.0"></text>
</g>
<g>
<title>TypeTuple::singleton() const (1 samples, 0.02%)</title><rect x="1162.5" y="1011.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.5" y="1022.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.02%)</title><rect x="1162.8" y="1027.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1163.1" y="1043.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.02%)</title><rect x="1163.1" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.1" y="1038.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.02%)</title><rect x="1163.1" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.15%)</title><rect x="1163.4" y="1043.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.15%)</title><rect x="1163.4" y="1027.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.4" y="1038.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1163.7" y="1011.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.7" y="1022.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1163.7" y="995.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1163.7" y="979.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1163.7" y="963.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1163.7" y="947.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="958.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.02%)</title><rect x="1163.7" y="931.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="942.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.05%)</title><rect x="1163.9" y="1011.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="1022.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1164.2" y="995.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.2" y="1006.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.02%)</title><rect x="1164.2" y="979.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.2" y="990.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.02%)</title><rect x="1164.2" y="963.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.2" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1164.5" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="1022.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1164.5" y="995.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.5" y="1006.0"></text>
</g>
<g>
<title>SubINode::sub(Type const*, Type const*) const (1 samples, 0.02%)</title><rect x="1164.8" y="1011.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.8" y="1022.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.02%)</title><rect x="1164.8" y="995.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.8" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.02%)</title><rect x="1165.1" y="1043.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.1" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.02%)</title><rect x="1165.1" y="1027.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.1" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.02%)</title><rect x="1165.1" y="1011.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1165.1" y="995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1165.1" y="979.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.1" y="990.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1165.1" y="963.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.1" y="974.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.02%)</title><rect x="1165.1" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.1" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.07%)</title><rect x="1165.4" y="1043.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.05%)</title><rect x="1165.4" y="1027.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.05%)</title><rect x="1165.4" y="1011.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.4" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.02%)</title><rect x="1165.4" y="995.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="1006.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.02%)</title><rect x="1165.4" y="979.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.4" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1165.7" y="995.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.7" y="1006.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.02%)</title><rect x="1165.7" y="979.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.7" y="990.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1165.7" y="963.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.7" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (1 samples, 0.02%)</title><rect x="1166.0" y="1027.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.0" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (1 samples, 0.02%)</title><rect x="1166.0" y="1011.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.0" y="1022.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1166.0" y="995.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.0" y="1006.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1166.3" y="1043.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.3" y="1054.0"></text>
</g>
<g>
<title>URShiftINode::bottom_type() const (1 samples, 0.02%)</title><rect x="1166.6" y="1043.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="1054.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (3 samples, 0.07%)</title><rect x="1166.8" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="1070.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (2 samples, 0.05%)</title><rect x="1166.8" y="1043.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1166.8" y="1027.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.8" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1166.8" y="1011.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1166.8" y="995.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1166.8" y="979.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1166.8" y="963.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1166.8" y="947.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1166.8" y="931.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1166.8" y="915.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1166.8" y="899.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1166.8" y="883.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1166.8" y="867.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1166.8" y="851.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1166.8" y="835.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1166.8" y="819.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1166.8" y="803.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1166.8" y="787.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1166.8" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1166.8" y="755.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1166.8" y="739.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1166.8" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="734.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1166.8" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.8" y="718.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.02%)</title><rect x="1166.8" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="702.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_min_max(vmIntrinsics::ID, Node*, Node*) (1 samples, 0.02%)</title><rect x="1166.8" y="675.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.8" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1166.8" y="659.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.8" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1166.8" y="643.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="654.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.02%)</title><rect x="1166.8" y="627.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.8" y="638.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.02%)</title><rect x="1166.8" y="611.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1167.1" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.1" y="814.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1167.1" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.1" y="798.0"></text>
</g>
<g>
<title>LoadRangeNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1167.1" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="782.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1167.1" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.1" y="766.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.02%)</title><rect x="1167.1" y="739.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="750.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.02%)</title><rect x="1167.1" y="723.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1167.1" y="707.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1167.1" y="691.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.1" y="702.0"></text>
</g>
<g>
<title>TypeD::hash() const (1 samples, 0.02%)</title><rect x="1167.1" y="675.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.1" y="686.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1167.4" y="1043.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="1054.0"></text>
</g>
<g>
<title>NodeHash::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.02%)</title><rect x="1167.4" y="1027.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="1038.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="1059.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 0.44%)</title><rect x="1168.0" y="1059.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 0.44%)</title><rect x="1168.0" y="1043.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.44%)</title><rect x="1168.0" y="1027.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.44%)</title><rect x="1168.0" y="1011.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 0.44%)</title><rect x="1168.0" y="995.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.0" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.05%)</title><rect x="1168.0" y="979.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.0" y="990.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.05%)</title><rect x="1168.0" y="963.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="974.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.05%)</title><rect x="1168.0" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.05%)</title><rect x="1168.0" y="931.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.0" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.05%)</title><rect x="1168.0" y="915.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.05%)</title><rect x="1168.0" y="899.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.05%)</title><rect x="1168.0" y="883.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1168.3" y="867.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.3" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1168.3" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_ldc(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1168.3" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.3" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_constant() (1 samples, 0.02%)</title><rect x="1168.3" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index(constantPoolHandle const&amp;, int, int, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1168.3" y="803.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index_impl(constantPoolHandle const&amp;, int, int, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1168.3" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="798.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (1 samples, 0.02%)</title><rect x="1168.3" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="782.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (1 samples, 0.02%)</title><rect x="1168.3" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.32%)</title><rect x="1168.6" y="979.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.6" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.32%)</title><rect x="1168.6" y="963.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.32%)</title><rect x="1168.6" y="947.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.32%)</title><rect x="1168.6" y="931.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.27%)</title><rect x="1168.6" y="915.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.6" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1168.6" y="899.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.6" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1168.6" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.6" y="894.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.02%)</title><rect x="1168.6" y="867.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.6" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1168.6" y="851.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.6" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1168.6" y="835.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.6" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1168.6" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.6" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1168.6" y="803.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.6" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1168.6" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.6" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1168.6" y="771.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.6" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.02%)</title><rect x="1168.6" y="755.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1168.6" y="739.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.6" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.02%)</title><rect x="1168.6" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.6" y="734.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::JsrRecord*&gt;::GrowableArray(Arena*, int, int, ciTypeFlow::JsrRecord* const&amp;) (1 samples, 0.02%)</title><rect x="1168.6" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.6" y="718.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1168.6" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.6" y="702.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1168.9" y="899.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="910.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) (1 samples, 0.02%)</title><rect x="1168.9" y="883.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="894.0"></text>
</g>
<g>
<title>LibraryCallKit::make_unsafe_address(Node*&amp;, Node*, unsigned long long, BasicType, bool) (1 samples, 0.02%)</title><rect x="1168.9" y="867.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.9" y="878.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1168.9" y="851.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.9" y="862.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.02%)</title><rect x="1168.9" y="835.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="846.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.02%)</title><rect x="1168.9" y="819.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.9" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.02%)</title><rect x="1168.9" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.9" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1168.9" y="787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.17%)</title><rect x="1169.2" y="899.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.17%)</title><rect x="1169.2" y="883.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.17%)</title><rect x="1169.2" y="867.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.17%)</title><rect x="1169.2" y="851.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.15%)</title><rect x="1169.2" y="835.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.12%)</title><rect x="1169.2" y="819.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.12%)</title><rect x="1169.2" y="803.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.2" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.02%)</title><rect x="1169.2" y="787.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.2" y="798.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.02%)</title><rect x="1169.2" y="771.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.2" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1169.2" y="755.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.10%)</title><rect x="1169.4" y="787.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.10%)</title><rect x="1169.4" y="771.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.10%)</title><rect x="1169.4" y="755.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.10%)</title><rect x="1169.4" y="739.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.10%)</title><rect x="1169.4" y="723.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.10%)</title><rect x="1169.4" y="707.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.10%)</title><rect x="1169.4" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1169.4" y="675.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1169.4" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1169.4" y="643.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1169.4" y="627.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1169.4" y="611.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1169.4" y="595.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1169.4" y="579.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1169.4" y="563.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1169.4" y="547.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1169.4" y="531.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1169.4" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1169.4" y="499.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1169.4" y="483.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1169.4" y="467.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1169.4" y="451.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1169.4" y="435.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.4" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1169.4" y="419.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.4" y="430.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1169.4" y="403.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.4" y="414.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.02%)</title><rect x="1169.4" y="387.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.4" y="398.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1169.4" y="371.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1169.4" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.4" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1169.4" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.4" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.02%)</title><rect x="1169.4" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.4" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1169.4" y="307.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.4" y="318.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1169.4" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1169.7" y="435.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1169.7" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.02%)</title><rect x="1170.0" y="547.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.0" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1170.0" y="531.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.0" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1170.0" y="515.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.0" y="526.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1170.0" y="499.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1173.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1170.3" y="675.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1170.3" y="659.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.3" y="670.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.02%)</title><rect x="1170.3" y="643.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.3" y="654.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1170.3" y="627.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="638.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1170.3" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.3" y="622.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1170.3" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.3" y="606.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.02%)</title><rect x="1170.3" y="579.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.3" y="590.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.02%)</title><rect x="1170.3" y="563.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.3" y="574.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.02%)</title><rect x="1170.3" y="547.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.3" y="558.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.02%)</title><rect x="1170.3" y="531.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="542.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int) (1 samples, 0.02%)</title><rect x="1170.3" y="515.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1170.6" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1170.6" y="803.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1170.6" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1170.6" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1170.6" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1170.6" y="739.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1170.6" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1170.6" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1170.6" y="691.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1170.6" y="675.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1170.6" y="659.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1170.6" y="643.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1170.6" y="627.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1170.6" y="611.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1170.6" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1170.6" y="579.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.6" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1170.6" y="563.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1170.6" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1170.6" y="531.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1170.6" y="515.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1170.6" y="499.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1170.6" y="483.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.6" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1170.6" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1170.6" y="451.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1170.6" y="435.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.6" y="446.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.02%)</title><rect x="1170.6" y="419.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.6" y="430.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.02%)</title><rect x="1170.6" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.6" y="414.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1170.6" y="387.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.6" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.02%)</title><rect x="1170.6" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.6" y="382.0"></text>
</g>
<g>
<title>MergeMemStream::set_memory(Node*) (1 samples, 0.02%)</title><rect x="1170.6" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.6" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.02%)</title><rect x="1170.6" y="339.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.6" y="350.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1170.6" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.6" y="334.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.02%)</title><rect x="1170.6" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_instanceof() (1 samples, 0.02%)</title><rect x="1170.9" y="835.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.9" y="846.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.02%)</title><rect x="1170.9" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.9" y="830.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.02%)</title><rect x="1170.9" y="803.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="814.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.02%)</title><rect x="1170.9" y="787.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.9" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1170.9" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.9" y="782.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1170.9" y="755.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="766.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1170.9" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.9" y="750.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.02%)</title><rect x="1170.9" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="734.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.02%)</title><rect x="1170.9" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.9" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1170.9" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.9" y="702.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1170.9" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.9" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.02%)</title><rect x="1170.9" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.9" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1171.2" y="899.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1171.2" y="883.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1171.2" y="867.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1171.2" y="851.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1171.2" y="835.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1171.2" y="819.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1171.2" y="803.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1171.2" y="787.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1171.2" y="771.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1171.2" y="755.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1171.2" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1171.2" y="723.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1171.2" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1171.2" y="691.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1171.2" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1171.2" y="659.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1171.2" y="643.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1171.2" y="627.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1171.2" y="611.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1171.2" y="595.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1171.2" y="579.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1171.2" y="563.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1171.2" y="547.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1171.2" y="531.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1171.2" y="515.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1171.2" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1171.2" y="483.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1171.2" y="467.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1171.2" y="451.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1171.2" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1171.2" y="419.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1171.2" y="403.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1171.2" y="387.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.2" y="398.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.02%)</title><rect x="1171.2" y="371.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.2" y="382.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1171.2" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="366.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1171.2" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="350.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1171.2" y="323.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="334.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.02%)</title><rect x="1171.2" y="307.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="318.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.02%)</title><rect x="1171.2" y="291.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="302.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1171.2" y="275.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.2" y="286.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.02%)</title><rect x="1171.2" y="259.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.2" y="270.0"></text>
</g>
<g>
<title>MergeMemStream::set_memory(Node*) (1 samples, 0.02%)</title><rect x="1171.2" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.2" y="254.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1171.2" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="238.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.02%)</title><rect x="1171.2" y="211.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="222.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.02%)</title><rect x="1171.2" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="206.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1171.2" y="179.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.2" y="190.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1171.2" y="163.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1171.5" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1171.5" y="643.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.5" y="654.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.02%)</title><rect x="1171.5" y="627.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="638.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1171.5" y="611.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.5" y="622.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1171.5" y="595.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.5" y="606.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1171.5" y="579.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.5" y="590.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1171.5" y="563.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.5" y="574.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.02%)</title><rect x="1171.5" y="547.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.5" y="558.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1171.5" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1171.8" y="915.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1171.8" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.8" y="910.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.02%)</title><rect x="1171.8" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="894.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1171.8" y="867.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="878.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1171.8" y="851.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="862.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1171.8" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1171.8" y="819.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="830.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.02%)</title><rect x="1171.8" y="803.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="814.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1171.8" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="798.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.02%)</title><rect x="1171.8" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::is_inline() const (1 samples, 0.02%)</title><rect x="1172.1" y="915.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.1" y="926.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1172.3" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1172.3" y="963.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1172.3" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1172.3" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1172.3" y="915.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1172.3" y="899.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1172.3" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1172.3" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1172.3" y="851.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1172.3" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1172.3" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.3" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1172.3" y="803.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.3" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1172.3" y="787.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="798.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1172.3" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.3" y="782.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.02%)</title><rect x="1172.3" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.3" y="766.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="1172.3" y="739.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1175.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.6" y="803.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1172.6" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1172.6" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1172.6" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1172.6" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1172.6" y="723.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="734.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.02%)</title><rect x="1172.6" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.6" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1172.6" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1172.6" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="686.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.02%)</title><rect x="1172.6" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.9" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.9" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.9" y="787.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1172.9" y="771.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1172.9" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1172.9" y="739.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1172.9" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.9" y="707.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1172.9" y="691.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1172.9" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1172.9" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1172.9" y="643.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.9" y="627.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1172.9" y="611.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1172.9" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1172.9" y="579.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1172.9" y="563.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.9" y="547.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1172.9" y="531.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1172.9" y="515.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1172.9" y="499.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1172.9" y="483.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.9" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1172.9" y="451.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1172.9" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1172.9" y="419.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1172.9" y="403.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.9" y="387.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1172.9" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1172.9" y="355.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1172.9" y="339.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1172.9" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.9" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1172.9" y="291.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1172.9" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1172.9" y="259.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1172.9" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1172.9" y="227.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1172.9" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1172.9" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1172.9" y="179.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1172.9" y="163.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="174.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.02%)</title><rect x="1172.9" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.9" y="158.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.02%)</title><rect x="1172.9" y="131.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.9" y="142.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1172.9" y="115.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.9" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.02%)</title><rect x="1172.9" y="99.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.9" y="110.0"></text>
</g>
<g>
<title>MergeMemStream::set_memory(Node*) (1 samples, 0.02%)</title><rect x="1172.9" y="83.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="94.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1172.9" y="67.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="78.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.02%)</title><rect x="1172.9" y="51.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="62.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.02%)</title><rect x="1172.9" y="35.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.9" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1173.2" y="1059.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.2" y="1070.0"></text>
</g>
<g>
<title>NodeHash::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.02%)</title><rect x="1173.2" y="1043.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.2" y="1054.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (2 samples, 0.05%)</title><rect x="1173.5" y="1059.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.5" y="1070.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (2 samples, 0.05%)</title><rect x="1173.5" y="1043.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="1054.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.02%)</title><rect x="1173.5" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="1038.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.02%)</title><rect x="1173.5" y="1011.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="1022.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="1173.5" y="995.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1176.5" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1173.8" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="1038.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciMetadata*&gt;::insert_before(int, ciMetadata* const&amp;) (1 samples, 0.02%)</title><rect x="1173.8" y="1011.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.8" y="1022.0"></text>
</g>
<g>
<title>CompilationLog::log_nmethod(JavaThread*, nmethod*) (1 samples, 0.02%)</title><rect x="1174.1" y="1091.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="1102.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.02%)</title><rect x="1174.1" y="1075.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.1" y="1086.0"></text>
</g>
<g>
<title>StringEventLog::logv(Thread*, char const*, __va_list_tag*) (1 samples, 0.02%)</title><rect x="1174.1" y="1059.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="1070.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.02%)</title><rect x="1174.1" y="1043.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1177.1" y="1054.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.02%)</title><rect x="1174.1" y="1027.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="1038.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.02%)</title><rect x="1174.1" y="1011.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1177.1" y="1022.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.02%)</title><rect x="1174.1" y="995.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1177.1" y="1006.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.02%)</title><rect x="1174.1" y="979.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1177.1" y="990.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.02%)</title><rect x="1174.1" y="963.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1177.1" y="974.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.02%)</title><rect x="1174.1" y="947.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1177.1" y="958.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (27 samples, 0.66%)</title><rect x="1174.4" y="1091.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (27 samples, 0.66%)</title><rect x="1174.4" y="1075.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (27 samples, 0.66%)</title><rect x="1174.4" y="1059.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (25 samples, 0.61%)</title><rect x="1174.4" y="1043.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="1054.0"></text>
</g>
<g>
<title>Compilation::build_hir() (19 samples, 0.47%)</title><rect x="1174.4" y="1027.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="1038.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (5 samples, 0.12%)</title><rect x="1174.4" y="1011.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="1022.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (3 samples, 0.07%)</title><rect x="1174.7" y="995.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="1006.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.07%)</title><rect x="1174.7" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="990.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.07%)</title><rect x="1174.7" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.7" y="974.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.07%)</title><rect x="1174.7" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.7" y="958.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.07%)</title><rect x="1174.7" y="931.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="942.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.07%)</title><rect x="1174.7" y="915.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="926.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.07%)</title><rect x="1174.7" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="910.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (3 samples, 0.07%)</title><rect x="1174.7" y="883.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="894.0"></text>
</g>
<g>
<title>BlockBegin::state_values_do(ValueVisitor*) (3 samples, 0.07%)</title><rect x="1174.7" y="867.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.7" y="878.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (3 samples, 0.07%)</title><rect x="1174.7" y="851.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="862.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (3 samples, 0.07%)</title><rect x="1174.7" y="835.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.7" y="846.0"></text>
</g>
<g>
<title>GlobalValueNumbering::substitute(Instruction*) (1 samples, 0.02%)</title><rect x="1175.5" y="995.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="1006.0"></text>
</g>
<g>
<title>LoadField::hash() const (1 samples, 0.02%)</title><rect x="1175.5" y="979.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (12 samples, 0.29%)</title><rect x="1175.8" y="1011.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.8" y="1022.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (12 samples, 0.29%)</title><rect x="1175.8" y="995.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (12 samples, 0.29%)</title><rect x="1175.8" y="979.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="990.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (4 samples, 0.10%)</title><rect x="1175.8" y="963.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="974.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops() (1 samples, 0.02%)</title><rect x="1175.8" y="947.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="958.0"></text>
</g>
<g>
<title>ResourceBitMap::initialize(unsigned long) (1 samples, 0.02%)</title><rect x="1175.8" y="931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="942.0"></text>
</g>
<g>
<title>unsigned long* BitMap::reallocate&lt;ResourceBitMapAllocator&gt;(ResourceBitMapAllocator const&amp;, unsigned long*, unsigned long, unsigned long, bool) (1 samples, 0.02%)</title><rect x="1175.8" y="915.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1175.8" y="899.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (3 samples, 0.07%)</title><rect x="1176.1" y="947.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="958.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.02%)</title><rect x="1176.1" y="931.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="942.0"></text>
</g>
<g>
<title>ResourceBitMap::initialize(unsigned long) (1 samples, 0.02%)</title><rect x="1176.1" y="915.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="926.0"></text>
</g>
<g>
<title>unsigned long* BitMap::reallocate&lt;ResourceBitMapAllocator&gt;(ResourceBitMapAllocator const&amp;, unsigned long*, unsigned long, unsigned long, bool) (1 samples, 0.02%)</title><rect x="1176.1" y="899.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="910.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1176.1" y="883.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="894.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (2 samples, 0.05%)</title><rect x="1176.4" y="931.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="942.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (2 samples, 0.05%)</title><rect x="1176.4" y="915.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="926.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.02%)</title><rect x="1176.4" y="899.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="910.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.02%)</title><rect x="1176.4" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="894.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.02%)</title><rect x="1176.4" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="878.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1176.4" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="862.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.02%)</title><rect x="1176.4" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="846.0"></text>
</g>
<g>
<title>MethodLiveness::init_gen_kill() (1 samples, 0.02%)</title><rect x="1176.7" y="899.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="910.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill(ciMethod*) (1 samples, 0.02%)</title><rect x="1176.7" y="883.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="894.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1176.7" y="867.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="878.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1176.7" y="851.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1179.7" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (7 samples, 0.17%)</title><rect x="1177.0" y="963.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (7 samples, 0.17%)</title><rect x="1177.0" y="947.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (7 samples, 0.17%)</title><rect x="1177.0" y="931.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (7 samples, 0.17%)</title><rect x="1177.0" y="915.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (7 samples, 0.17%)</title><rect x="1177.0" y="899.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::args_list_for_profiling(ciMethod*, int&amp;, bool) (1 samples, 0.02%)</title><rect x="1177.0" y="883.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="894.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.02%)</title><rect x="1177.0" y="867.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 0.12%)</title><rect x="1177.3" y="883.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 0.12%)</title><rect x="1177.3" y="867.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 0.12%)</title><rect x="1177.3" y="851.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.12%)</title><rect x="1177.3" y="835.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.3" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.12%)</title><rect x="1177.3" y="819.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.07%)</title><rect x="1177.3" y="803.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.07%)</title><rect x="1177.3" y="787.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.07%)</title><rect x="1177.3" y="771.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.3" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.07%)</title><rect x="1177.3" y="755.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.07%)</title><rect x="1177.3" y="739.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.3" y="750.0"></text>
</g>
<g>
<title>DirectiveSet::should_inline(ciMethod*) (1 samples, 0.02%)</title><rect x="1177.3" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.3" y="734.0"></text>
</g>
<g>
<title>CompilerOracle::should_inline(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="1177.3" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.05%)</title><rect x="1177.6" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.05%)</title><rect x="1177.6" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.05%)</title><rect x="1177.6" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1177.6" y="675.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1177.6" y="659.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.02%)</title><rect x="1177.6" y="643.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="654.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.02%)</title><rect x="1177.6" y="627.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="638.0"></text>
</g>
<g>
<title>XHandlers::XHandlers(ciMethod*) (1 samples, 0.02%)</title><rect x="1177.6" y="611.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="622.0"></text>
</g>
<g>
<title>ciMethod::load_code() (1 samples, 0.02%)</title><rect x="1177.6" y="595.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1177.8" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1177.8" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1177.8" y="643.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1177.8" y="627.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="638.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1177.8" y="611.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="622.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.02%)</title><rect x="1177.8" y="595.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.02%)</title><rect x="1177.8" y="579.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="590.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.02%)</title><rect x="1177.8" y="563.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="574.0"></text>
</g>
<g>
<title>SymbolTable::lookup_common(char const*, int, unsigned int) (1 samples, 0.02%)</title><rect x="1177.8" y="547.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="558.0"></text>
</g>
<g>
<title>SymbolTable::lookup_shared(char const*, int, unsigned int) (1 samples, 0.02%)</title><rect x="1177.8" y="531.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.02%)</title><rect x="1178.1" y="803.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.1" y="814.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.02%)</title><rect x="1178.1" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="798.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.02%)</title><rect x="1178.4" y="803.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="1178.4" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.02%)</title><rect x="1178.4" y="771.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::is_mature(Method*) (1 samples, 0.02%)</title><rect x="1178.4" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>bool TieredThresholdPolicy::call_predicate_helper&lt;(CompLevel)3&gt;(int, int, double, Method*) (1 samples, 0.02%)</title><rect x="1178.4" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.02%)</title><rect x="1178.7" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.7" y="894.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.02%)</title><rect x="1178.7" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="878.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.02%)</title><rect x="1178.7" y="851.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="862.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.02%)</title><rect x="1178.7" y="835.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="846.0"></text>
</g>
<g>
<title>ResourceBitMap::initialize(unsigned long) (1 samples, 0.02%)</title><rect x="1178.7" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="830.0"></text>
</g>
<g>
<title>unsigned long* BitMap::reallocate&lt;ResourceBitMapAllocator&gt;(ResourceBitMapAllocator const&amp;, unsigned long*, unsigned long, unsigned long, bool) (1 samples, 0.02%)</title><rect x="1178.7" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="814.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.02%)</title><rect x="1179.0" y="963.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="974.0"></text>
</g>
<g>
<title>IR::compute_code() (1 samples, 0.02%)</title><rect x="1179.3" y="1011.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="1022.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (1 samples, 0.02%)</title><rect x="1179.3" y="995.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="1006.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_order(BlockBegin*) (1 samples, 0.02%)</title><rect x="1179.3" y="979.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="990.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::sort_into_work_list(BlockBegin*) (1 samples, 0.02%)</title><rect x="1179.3" y="963.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="974.0"></text>
</g>
<g>
<title>Instruction::as_Throw() (1 samples, 0.02%)</title><rect x="1179.3" y="947.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="958.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.02%)</title><rect x="1179.6" y="1011.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1022.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (1 samples, 0.02%)</title><rect x="1179.6" y="995.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1006.0"></text>
</g>
<g>
<title>UseCountComputer::block_do(BlockBegin*) (1 samples, 0.02%)</title><rect x="1179.6" y="979.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="990.0"></text>
</g>
<g>
<title>UseCountComputer::uses_do(Instruction**) (1 samples, 0.02%)</title><rect x="1179.6" y="963.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="974.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.02%)</title><rect x="1179.6" y="947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="958.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (1 samples, 0.02%)</title><rect x="1179.6" y="931.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="942.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (3 samples, 0.07%)</title><rect x="1179.9" y="1027.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (3 samples, 0.07%)</title><rect x="1179.9" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="1022.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (3 samples, 0.07%)</title><rect x="1179.9" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.02%)</title><rect x="1179.9" y="979.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::const2reg(LIR_OprDesc*, LIR_OprDesc*, LIR_PatchCode, CodeEmitInfo*) (1 samples, 0.02%)</title><rect x="1179.9" y="963.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="974.0"></text>
</g>
<g>
<title>LIR_OprDesc::as_register() const (1 samples, 0.02%)</title><rect x="1179.9" y="947.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.02%)</title><rect x="1180.2" y="979.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="990.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.02%)</title><rect x="1180.2" y="963.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="974.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.02%)</title><rect x="1180.2" y="947.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.2" y="958.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.02%)</title><rect x="1180.2" y="931.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.02%)</title><rect x="1180.4" y="979.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.02%)</title><rect x="1180.4" y="963.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.02%)</title><rect x="1180.4" y="947.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1180.4" y="931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="942.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="915.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="926.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.02%)</title><rect x="1180.4" y="899.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1183.4" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.07%)</title><rect x="1180.7" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="1038.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.02%)</title><rect x="1180.7" y="1011.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1022.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.02%)</title><rect x="1180.7" y="995.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="1006.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.02%)</title><rect x="1180.7" y="979.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="990.0"></text>
</g>
<g>
<title>LIR_List::add(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*) (1 samples, 0.02%)</title><rect x="1180.7" y="963.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="974.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.05%)</title><rect x="1181.0" y="1011.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="1022.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.02%)</title><rect x="1181.0" y="995.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="1006.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.02%)</title><rect x="1181.0" y="979.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="990.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.02%)</title><rect x="1181.3" y="995.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="1006.0"></text>
</g>
<g>
<title>Interval::add_range(int, int) (1 samples, 0.02%)</title><rect x="1181.3" y="979.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="990.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1181.3" y="963.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="974.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (2 samples, 0.05%)</title><rect x="1181.6" y="1043.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="1054.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (2 samples, 0.05%)</title><rect x="1181.6" y="1027.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="1038.0"></text>
</g>
<g>
<title>Method::set_code(methodHandle const&amp;, CompiledMethod*) (1 samples, 0.02%)</title><rect x="1181.6" y="1011.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="1022.0"></text>
</g>
<g>
<title>MethodCounters::highest_comp_level() const (1 samples, 0.02%)</title><rect x="1181.6" y="995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.6" y="1006.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.02%)</title><rect x="1181.9" y="1011.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.9" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.02%)</title><rect x="1181.9" y="995.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1184.9" y="1006.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.02%)</title><rect x="1182.2" y="1107.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="1118.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1182.2" y="1091.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="1102.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.02%)</title><rect x="1182.2" y="1075.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1182.2" y="1059.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="1070.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="1182.2" y="1043.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.02%)</title><rect x="1182.2" y="1027.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="1038.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="1182.2" y="1011.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1185.2" y="1022.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.07%)</title><rect x="1182.5" y="1123.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="1134.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.02%)</title><rect x="1182.5" y="1107.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="1118.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.02%)</title><rect x="1182.5" y="1091.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="1102.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.02%)</title><rect x="1182.5" y="1075.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1185.5" y="1086.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.02%)</title><rect x="1182.5" y="1059.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="1070.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.02%)</title><rect x="1182.5" y="1043.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="1054.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.02%)</title><rect x="1182.5" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="1038.0"></text>
</g>
<g>
<title>JvmtiDeferredEventQueue::dequeue() (1 samples, 0.02%)</title><rect x="1182.8" y="1107.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="1118.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1183.1" y="1107.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1183.1" y="1091.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="1102.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.02%)</title><rect x="1183.1" y="1075.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="1183.1" y="1059.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1186.1" y="1070.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.07%)</title><rect x="1183.3" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="1166.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.07%)</title><rect x="1183.3" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="1150.0"></text>
</g>
<g>
<title>EventMark::EventMark(char const*, ...) (1 samples, 0.02%)</title><rect x="1183.3" y="1123.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="1134.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.02%)</title><rect x="1183.3" y="1107.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1186.3" y="1118.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.02%)</title><rect x="1183.3" y="1091.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="1102.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.02%)</title><rect x="1183.3" y="1075.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1186.3" y="1086.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.02%)</title><rect x="1183.3" y="1059.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1186.3" y="1070.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1183.6" y="1123.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="1134.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1183.6" y="1107.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="1118.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="1183.6" y="1091.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="1102.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="1183.6" y="1075.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1186.6" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.02%)</title><rect x="1183.9" y="1123.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1186.9" y="1134.0"></text>
</g>
<g>
<title>WatcherThread::run() (20 samples, 0.49%)</title><rect x="1184.2" y="1155.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1166.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (20 samples, 0.49%)</title><rect x="1184.2" y="1139.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="1150.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (18 samples, 0.44%)</title><rect x="1184.2" y="1123.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="1134.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (18 samples, 0.44%)</title><rect x="1184.2" y="1107.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="1118.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (18 samples, 0.44%)</title><rect x="1184.2" y="1091.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="1102.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.42%)</title><rect x="1184.5" y="1075.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1187.5" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.05%)</title><rect x="1189.4" y="1123.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.4" y="1134.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="1189.7" y="1107.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1192.7" y="1118.0"></text>
</g>
</g>
</svg>
