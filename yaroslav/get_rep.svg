<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1478" onload="init(evt)" viewBox="0 0 1200 1478" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1461"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1461"> </text>
<g id="frames">
<g>
<title>all (2,694 samples, 100.00%)</title><rect x="10.0" y="1427.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1438.0">all</text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (3 samples, 0.11%)</title><rect x="10.0" y="1411.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="1395.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="1379.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.07%)</title><rect x="10.4" y="1395.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.4" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="10.4" y="1379.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.4" y="1390.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="10.4" y="1363.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.4" y="1374.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.04%)</title><rect x="10.9" y="1379.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.9" y="1390.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.04%)</title><rect x="11.3" y="1411.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.3" y="1422.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.04%)</title><rect x="11.3" y="1395.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.3" y="1406.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="11.3" y="1379.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.3" y="1390.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (2 samples, 0.07%)</title><rect x="11.8" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.8" y="1422.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="11.8" y="1395.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.8" y="1406.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="12.2" y="1395.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.2" y="1406.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (1 samples, 0.04%)</title><rect x="12.2" y="1379.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.2" y="1390.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.04%)</title><rect x="12.6" y="1411.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.6" y="1422.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="13.1" y="1411.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.1" y="1422.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (6 samples, 0.22%)</title><rect x="13.5" y="1411.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.5" y="1422.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.04%)</title><rect x="13.5" y="1395.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="16.5" y="1406.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (4 samples, 0.15%)</title><rect x="13.9" y="1395.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.9" y="1406.0"></text>
</g>
<g>
<title>InstanceKlass::lookup_osr_nmethod(Method const*, int, int, bool) const (1 samples, 0.04%)</title><rect x="13.9" y="1379.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.9" y="1390.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="13.9" y="1363.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.9" y="1374.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="13.9" y="1347.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.9" y="1358.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="14.4" y="1379.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.4" y="1390.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::loop_event(Method*, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="14.4" y="1363.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.4" y="1374.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.04%)</title><rect x="14.4" y="1347.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.4" y="1358.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::loop_predicate(int, int, CompLevel, Method*) (1 samples, 0.04%)</title><rect x="14.4" y="1331.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.4" y="1342.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.07%)</title><rect x="14.8" y="1379.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.8" y="1390.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="14.8" y="1363.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="17.8" y="1374.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.04%)</title><rect x="14.8" y="1347.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="17.8" y="1358.0"></text>
</g>
<g>
<title>Method::is_accessor() const (1 samples, 0.04%)</title><rect x="14.8" y="1331.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.8" y="1342.0"></text>
</g>
<g>
<title>Method::is_getter() const (1 samples, 0.04%)</title><rect x="14.8" y="1315.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.8" y="1326.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::maybe_switch_to_aot(methodHandle const&amp;, CompLevel, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="15.3" y="1363.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.3" y="1374.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="15.7" y="1395.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.7" y="1406.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="15.7" y="1379.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.7" y="1390.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="15.7" y="1363.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="18.7" y="1374.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="15.7" y="1347.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.7" y="1358.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="15.7" y="1331.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.7" y="1342.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.07%)</title><rect x="16.1" y="1411.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.1" y="1422.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.04%)</title><rect x="16.1" y="1395.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.1" y="1406.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.04%)</title><rect x="16.1" y="1379.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.1" y="1390.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.04%)</title><rect x="16.6" y="1395.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.6" y="1406.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (188 samples, 6.98%)</title><rect x="17.0" y="1411.0" width="82.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="20.0" y="1422.0">Runtime1:..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="17.4" y="1395.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.4" y="1406.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (185 samples, 6.87%)</title><rect x="17.9" y="1395.0" width="81.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="20.9" y="1406.0">ObjectMon..</text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (185 samples, 6.87%)</title><rect x="17.9" y="1379.0" width="81.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="20.9" y="1390.0">ObjectMon..</text>
</g>
<g>
<title>os::PlatformEvent::park() (183 samples, 6.79%)</title><rect x="17.9" y="1363.0" width="80.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.9" y="1374.0">os::Platf..</text>
</g>
<g>
<title>__psynch_cvwait (183 samples, 6.79%)</title><rect x="17.9" y="1347.0" width="80.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="20.9" y="1358.0">__psynch_..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="98.0" y="1363.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="101.0" y="1374.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="98.0" y="1347.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="101.0" y="1358.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.04%)</title><rect x="98.5" y="1363.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="101.5" y="1374.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="98.9" y="1395.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="101.9" y="1406.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.04%)</title><rect x="99.4" y="1411.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="102.4" y="1422.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="99.4" y="1395.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="102.4" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="99.4" y="1379.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="102.4" y="1390.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="99.4" y="1363.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="102.4" y="1374.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="99.4" y="1347.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="102.4" y="1358.0"></text>
</g>
<g>
<title>[not_walkable_Java] (23 samples, 0.85%)</title><rect x="99.8" y="1411.0" width="10.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="102.8" y="1422.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (3 samples, 0.11%)</title><rect x="105.9" y="1395.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="108.9" y="1406.0"></text>
</g>
<g>
<title>G1BarrierSet::write_ref_array_work(MemRegion) (3 samples, 0.11%)</title><rect x="105.9" y="1379.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="108.9" y="1390.0"></text>
</g>
<g>
<title>G1BarrierSet::invalidate(MemRegion) (2 samples, 0.07%)</title><rect x="105.9" y="1363.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="108.9" y="1374.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="106.8" y="1363.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="109.8" y="1374.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (1 samples, 0.04%)</title><rect x="107.2" y="1395.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="110.2" y="1406.0"></text>
</g>
<g>
<title>caller_is_deopted() (1 samples, 0.04%)</title><rect x="107.2" y="1379.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="110.2" y="1390.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="107.2" y="1363.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="110.2" y="1374.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.04%)</title><rect x="107.2" y="1347.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="110.2" y="1358.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (4 samples, 0.15%)</title><rect x="107.7" y="1395.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="110.7" y="1406.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.11%)</title><rect x="107.7" y="1379.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="110.7" y="1390.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.07%)</title><rect x="107.7" y="1363.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="110.7" y="1374.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.04%)</title><rect x="108.6" y="1363.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="111.6" y="1374.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="109.0" y="1379.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="112.0" y="1390.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="109.4" y="1395.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="112.4" y="1406.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="109.4" y="1379.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="112.4" y="1390.0"></text>
</g>
<g>
<title>[unknown_Java] (22 samples, 0.82%)</title><rect x="109.9" y="1411.0" width="9.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="112.9" y="1422.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="119.1" y="1395.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="122.1" y="1406.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="119.1" y="1379.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="122.1" y="1390.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.04%)</title><rect x="119.1" y="1363.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="122.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/Thread.run (550 samples, 20.42%)</title><rect x="119.5" y="1411.0" width="240.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.5" y="1422.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (550 samples, 20.42%)</title><rect x="119.5" y="1395.0" width="240.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.5" y="1406.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (550 samples, 20.42%)</title><rect x="119.5" y="1379.0" width="240.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.5" y="1390.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.07%)</title><rect x="121.7" y="1363.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.04%)</title><rect x="122.6" y="1363.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="122.6" y="1347.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="125.6" y="1358.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.04%)</title><rect x="122.6" y="1331.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="125.6" y="1342.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.04%)</title><rect x="122.6" y="1315.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="125.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.11%)</title><rect x="123.0" y="1363.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.04%)</title><rect x="123.9" y="1347.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.9" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.04%)</title><rect x="123.9" y="1331.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.07%)</title><rect x="124.3" y="1363.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="127.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.04%)</title><rect x="124.8" y="1347.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.04%)</title><rect x="124.8" y="1331.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 0.19%)</title><rect x="125.2" y="1363.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="128.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 0.15%)</title><rect x="125.6" y="1347.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="128.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.07%)</title><rect x="126.1" y="1331.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.07%)</title><rect x="126.1" y="1315.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="129.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.07%)</title><rect x="126.1" y="1299.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="129.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.07%)</title><rect x="126.1" y="1283.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.07%)</title><rect x="126.1" y="1267.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="129.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.07%)</title><rect x="126.1" y="1251.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.04%)</title><rect x="126.9" y="1331.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.04%)</title><rect x="126.9" y="1315.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="129.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.04%)</title><rect x="126.9" y="1299.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.04%)</title><rect x="127.4" y="1363.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="130.4" y="1374.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$76/1321306324.run (531 samples, 19.71%)</title><rect x="127.8" y="1363.0" width="232.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="130.8" y="1374.0">ru/mail/polis/service/yaroslav/..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$executeAsync$3 (530 samples, 19.67%)</title><rect x="128.3" y="1347.0" width="232.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.3" y="1358.0">ru/mail/polis/service/yaroslav/..</text>
</g>
<g>
<title>java/util/logging/Logger.log (464 samples, 17.22%)</title><rect x="129.1" y="1331.0" width="203.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.1" y="1342.0">java/util/logging/Logger.log</text>
</g>
<g>
<title>java/util/logging/LogRecord.&lt;init&gt; (10 samples, 0.37%)</title><rect x="129.1" y="1315.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.1" y="1326.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="129.1" y="1299.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="132.1" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="129.1" y="1283.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="132.1" y="1294.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.04%)</title><rect x="129.1" y="1267.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="132.1" y="1278.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.04%)</title><rect x="129.1" y="1251.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="132.1" y="1262.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.04%)</title><rect x="129.1" y="1235.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="132.1" y="1246.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="129.1" y="1219.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="132.1" y="1230.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="129.1" y="1203.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="132.1" y="1214.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.04%)</title><rect x="129.1" y="1187.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="132.1" y="1198.0"></text>
</g>
<g>
<title>SystemDictionary::handle_parallel_super_load(Symbol*, Symbol*, Handle, Handle, Handle, Thread*) (1 samples, 0.04%)</title><rect x="129.1" y="1171.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="132.1" y="1182.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="129.1" y="1155.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="132.1" y="1166.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="129.1" y="1139.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="132.1" y="1150.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="129.1" y="1123.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="132.1" y="1134.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="129.1" y="1107.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="132.1" y="1118.0"></text>
</g>
<g>
<title>java/time/Instant.now (4 samples, 0.15%)</title><rect x="129.6" y="1299.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.6" y="1310.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (2 samples, 0.07%)</title><rect x="130.0" y="1283.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="133.0" y="1294.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (1 samples, 0.04%)</title><rect x="130.0" y="1267.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="133.0" y="1278.0"></text>
</g>
<g>
<title>java/time/Instant.create (1 samples, 0.04%)</title><rect x="130.0" y="1251.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="133.0" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (1 samples, 0.04%)</title><rect x="130.5" y="1267.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="133.5" y="1278.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (1 samples, 0.04%)</title><rect x="130.5" y="1251.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="133.5" y="1262.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="130.5" y="1235.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="133.5" y="1246.0"></text>
</g>
<g>
<title>java/time/Clock.systemUTC (1 samples, 0.04%)</title><rect x="130.9" y="1283.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.9" y="1294.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="130.9" y="1267.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.9" y="1278.0"></text>
</g>
<g>
<title>java/time/ZoneOffset.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="130.9" y="1251.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="133.9" y="1262.0"></text>
</g>
<g>
<title>java/time/ZoneOffset.ofTotalSeconds (1 samples, 0.04%)</title><rect x="130.9" y="1235.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.getAndIncrement (2 samples, 0.07%)</title><rect x="131.3" y="1299.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.3" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndAddLong (2 samples, 0.07%)</title><rect x="131.3" y="1283.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.3" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLongVolatile (1 samples, 0.04%)</title><rect x="131.8" y="1267.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.8" y="1278.0"></text>
</g>
<g>
<title>Unsafe_GetLongVolatile(JNIEnv_*, _jobject*, _jobject*, long) (1 samples, 0.04%)</title><rect x="131.8" y="1251.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="134.8" y="1262.0"></text>
</g>
<g>
<title>MemoryAccess&lt;long&gt;::get_volatile() (1 samples, 0.04%)</title><rect x="131.8" y="1235.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="134.8" y="1246.0"></text>
</g>
<g>
<title>bool AccessInternal::PreRuntimeDispatch::is_hardwired_primitive&lt;542736ull&gt;() (1 samples, 0.04%)</title><rect x="131.8" y="1219.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="134.8" y="1230.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord.defaultThreadID (3 samples, 0.11%)</title><rect x="132.2" y="1299.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.2" y="1310.0"></text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.07%)</title><rect x="132.2" y="1283.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="135.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/Thread.currentThread (1 samples, 0.04%)</title><rect x="133.1" y="1283.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="136.1" y="1294.0"></text>
</g>
<g>
<title>JVM_CurrentThread (1 samples, 0.04%)</title><rect x="133.1" y="1267.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="136.1" y="1278.0"></text>
</g>
<g>
<title>java/util/logging/Logger.doLog (453 samples, 16.82%)</title><rect x="133.5" y="1315.0" width="198.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.5" y="1326.0">java/util/logging/Logger.d..</text>
</g>
<g>
<title>java/util/logging/Logger.getEffectiveLoggerBundle (4 samples, 0.15%)</title><rect x="133.5" y="1299.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="136.5" y="1310.0"></text>
</g>
<g>
<title>java/util/logging/Logger.log (449 samples, 16.67%)</title><rect x="135.3" y="1299.0" width="196.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.3" y="1310.0">java/util/logging/Logger.log</text>
</g>
<g>
<title>java/util/logging/ConsoleHandler.publish (440 samples, 16.33%)</title><rect x="136.1" y="1283.0" width="192.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="139.1" y="1294.0">java/util/logging/Console..</text>
</g>
<g>
<title>java/util/logging/StreamHandler.flush (28 samples, 1.04%)</title><rect x="136.1" y="1267.0" width="12.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.1" y="1278.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (3 samples, 0.11%)</title><rect x="136.6" y="1251.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="139.6" y="1262.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.11%)</title><rect x="136.6" y="1235.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="139.6" y="1246.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.11%)</title><rect x="136.6" y="1219.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="139.6" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.07%)</title><rect x="136.6" y="1203.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="139.6" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.07%)</title><rect x="136.6" y="1187.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="139.6" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="137.5" y="1203.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="140.5" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="137.5" y="1187.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="140.5" y="1198.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (24 samples, 0.89%)</title><rect x="137.9" y="1251.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.9" y="1262.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (24 samples, 0.89%)</title><rect x="137.9" y="1235.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="140.9" y="1246.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (23 samples, 0.85%)</title><rect x="138.3" y="1219.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="141.3" y="1230.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (23 samples, 0.85%)</title><rect x="138.3" y="1203.0" width="10.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="141.3" y="1214.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (23 samples, 0.85%)</title><rect x="138.3" y="1187.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.3" y="1198.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (21 samples, 0.78%)</title><rect x="138.8" y="1171.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="141.8" y="1182.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="138.8" y="1155.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="141.8" y="1166.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (16 samples, 0.59%)</title><rect x="139.2" y="1155.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="142.2" y="1166.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (16 samples, 0.59%)</title><rect x="139.2" y="1139.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.2" y="1150.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (16 samples, 0.59%)</title><rect x="139.2" y="1123.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.2" y="1134.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (16 samples, 0.59%)</title><rect x="139.2" y="1107.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.2" y="1118.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (15 samples, 0.56%)</title><rect x="139.7" y="1091.0" width="6.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="142.7" y="1102.0"></text>
</g>
<g>
<title>writeBytes (15 samples, 0.56%)</title><rect x="139.7" y="1075.0" width="6.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="142.7" y="1086.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.04%)</title><rect x="139.7" y="1059.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="142.7" y="1070.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="140.1" y="1059.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="143.1" y="1070.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (1 samples, 0.04%)</title><rect x="140.5" y="1059.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="143.5" y="1070.0"></text>
</g>
<g>
<title>jni_GetObjectField (3 samples, 0.11%)</title><rect x="141.0" y="1059.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="144.0" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="141.8" y="1043.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="144.8" y="1054.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="141.8" y="1027.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="144.8" y="1038.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="141.8" y="1011.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="144.8" y="1022.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="141.8" y="995.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="144.8" y="1006.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="141.8" y="979.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="144.8" y="990.0"></text>
</g>
<g>
<title>write (9 samples, 0.33%)</title><rect x="142.3" y="1059.0" width="3.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="145.3" y="1070.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (4 samples, 0.15%)</title><rect x="146.2" y="1155.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.2" y="1166.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.clear (1 samples, 0.04%)</title><rect x="148.0" y="1171.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.0" y="1182.0"></text>
</g>
<g>
<title>java/nio/Buffer.clear (1 samples, 0.04%)</title><rect x="148.0" y="1155.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.0" y="1166.0"></text>
</g>
<g>
<title>java/util/logging/StreamHandler.publish (412 samples, 15.29%)</title><rect x="148.4" y="1267.0" width="180.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.4" y="1278.0">java/util/logging/Strea..</text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (101 samples, 3.75%)</title><rect x="149.3" y="1251.0" width="44.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="152.3" y="1262.0">Inte..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (101 samples, 3.75%)</title><rect x="149.3" y="1235.0" width="44.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="152.3" y="1246.0">Obje..</text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (99 samples, 3.67%)</title><rect x="149.3" y="1219.0" width="43.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="152.3" y="1230.0">Obje..</text>
</g>
<g>
<title>os::PlatformEvent::park() (99 samples, 3.67%)</title><rect x="149.3" y="1203.0" width="43.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="152.3" y="1214.0">os::..</text>
</g>
<g>
<title>__psynch_cvwait (99 samples, 3.67%)</title><rect x="149.3" y="1187.0" width="43.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="152.3" y="1198.0">__ps..</text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="192.7" y="1219.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="195.7" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="192.7" y="1203.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="195.7" y="1214.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="192.7" y="1187.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="195.7" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="192.7" y="1171.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="195.7" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="192.7" y="1155.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="195.7" y="1166.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.04%)</title><rect x="193.1" y="1219.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="196.1" y="1230.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="193.1" y="1203.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="196.1" y="1214.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="193.1" y="1187.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="196.1" y="1198.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="193.1" y="1171.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="196.1" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="193.1" y="1155.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="196.1" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="193.1" y="1139.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="196.1" y="1150.0"></text>
</g>
<g>
<title>java/io/Writer.write (14 samples, 0.52%)</title><rect x="193.5" y="1251.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.5" y="1262.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (14 samples, 0.52%)</title><rect x="193.5" y="1235.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.5" y="1246.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (14 samples, 0.52%)</title><rect x="193.5" y="1219.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.getChars (3 samples, 0.11%)</title><rect x="193.5" y="1203.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.getChars (2 samples, 0.07%)</title><rect x="194.0" y="1187.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.0" y="1198.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (11 samples, 0.41%)</title><rect x="194.8" y="1203.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.8" y="1214.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.ensureOpen (1 samples, 0.04%)</title><rect x="196.2" y="1187.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.2" y="1198.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (7 samples, 0.26%)</title><rect x="196.6" y="1187.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.6" y="1198.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (1 samples, 0.04%)</title><rect x="197.0" y="1171.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.0" y="1182.0"></text>
</g>
<g>
<title>java/nio/HeapCharBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="197.0" y="1155.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.0" y="1166.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="197.0" y="1139.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.0" y="1150.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="197.0" y="1123.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.0" y="1134.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (5 samples, 0.19%)</title><rect x="197.5" y="1171.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.5" y="1182.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (5 samples, 0.19%)</title><rect x="197.5" y="1155.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.5" y="1166.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (4 samples, 0.15%)</title><rect x="197.9" y="1139.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.9" y="1150.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (4 samples, 0.15%)</title><rect x="197.9" y="1123.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.9" y="1134.0"></text>
</g>
<g>
<title>java/util/logging/SimpleFormatter.format (293 samples, 10.88%)</title><rect x="199.7" y="1251.0" width="128.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.7" y="1262.0">java/util/loggin..</text>
</g>
<g>
<title>java/lang/String.format (149 samples, 5.53%)</title><rect x="200.1" y="1235.0" width="65.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.1" y="1246.0">java/la..</text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (11 samples, 0.41%)</title><rect x="200.5" y="1219.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.07%)</title><rect x="200.5" y="1203.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.07%)</title><rect x="200.5" y="1187.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.5" y="1198.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (9 samples, 0.33%)</title><rect x="201.4" y="1203.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.4" y="1214.0"></text>
</g>
<g>
<title>java/util/Formatter.getZero (9 samples, 0.33%)</title><rect x="201.4" y="1187.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.4" y="1198.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (7 samples, 0.26%)</title><rect x="201.8" y="1171.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.8" y="1182.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (6 samples, 0.22%)</title><rect x="201.8" y="1155.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.8" y="1166.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.&lt;init&gt; (6 samples, 0.22%)</title><rect x="201.8" y="1139.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.8" y="1150.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.initialize (6 samples, 0.22%)</title><rect x="201.8" y="1123.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="201.8" y="1107.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (1 samples, 0.04%)</title><rect x="201.8" y="1091.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Locale.getUnicodeLocaleType (3 samples, 0.11%)</title><rect x="202.3" y="1107.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Locale.isUnicodeExtensionKey (3 samples, 0.11%)</title><rect x="202.3" y="1091.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.3" y="1102.0"></text>
</g>
<g>
<title>sun/util/locale/LocaleUtils.isAlphaNumericString (2 samples, 0.07%)</title><rect x="202.7" y="1075.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="203.2" y="1059.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.2" y="1070.0"></text>
</g>
<g>
<title>sun/util/locale/provider/CalendarDataUtility.findRegionOverride (1 samples, 0.04%)</title><rect x="203.6" y="1107.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Locale.getUnicodeLocaleType (1 samples, 0.04%)</title><rect x="203.6" y="1091.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.6" y="1102.0"></text>
</g>
<g>
<title>java/util/Locale.isUnicodeExtensionKey (1 samples, 0.04%)</title><rect x="203.6" y="1075.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.6" y="1086.0"></text>
</g>
<g>
<title>sun/util/locale/LocaleUtils.isAlphaNumericString (1 samples, 0.04%)</title><rect x="203.6" y="1059.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.6" y="1070.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleProviderAdapter.getAdapter (1 samples, 0.04%)</title><rect x="204.0" y="1107.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.0" y="1118.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleProviderAdapter.getAdapter (1 samples, 0.04%)</title><rect x="204.5" y="1155.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Locale.equals (1 samples, 0.04%)</title><rect x="204.9" y="1171.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.9" y="1182.0"></text>
</g>
<g>
<title>sun/util/locale/BaseLocale.equals (1 samples, 0.04%)</title><rect x="204.9" y="1155.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Formatter.format (135 samples, 5.01%)</title><rect x="205.4" y="1219.0" width="59.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.4" y="1230.0">java/u..</text>
</g>
<g>
<title>java/util/Formatter.format (135 samples, 5.01%)</title><rect x="205.4" y="1203.0" width="59.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.4" y="1214.0">java/u..</text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.04%)</title><rect x="206.2" y="1187.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.2" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.04%)</title><rect x="206.7" y="1187.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.7" y="1198.0"></text>
</g>
<g>
<title>java/util/Formatter$FixedString.print (9 samples, 0.33%)</title><rect x="207.1" y="1187.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 0.26%)</title><rect x="208.0" y="1171.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 0.26%)</title><rect x="208.0" y="1155.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.22%)</title><rect x="208.4" y="1139.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.appendChars (3 samples, 0.11%)</title><rect x="208.9" y="1123.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.putCharsSB (3 samples, 0.11%)</title><rect x="208.9" y="1107.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (1 samples, 0.04%)</title><rect x="209.7" y="1091.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.checkRange (2 samples, 0.07%)</title><rect x="210.2" y="1123.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (52 samples, 1.93%)</title><rect x="211.0" y="1187.0" width="22.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.0" y="1198.0">j..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="211.0" y="1171.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="214.0" y="1182.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printDateTime (50 samples, 1.86%)</title><rect x="211.5" y="1171.0" width="21.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="214.5" y="1182.0">j..</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (48 samples, 1.78%)</title><rect x="212.4" y="1155.0" width="21.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.4" y="1166.0">j..</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (5 samples, 0.19%)</title><rect x="213.7" y="1139.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.15%)</title><rect x="214.1" y="1123.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.15%)</title><rect x="214.1" y="1107.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.15%)</title><rect x="214.1" y="1091.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.07%)</title><rect x="214.1" y="1075.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.getBytes (1 samples, 0.04%)</title><rect x="214.1" y="1059.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.inflate (1 samples, 0.04%)</title><rect x="214.1" y="1043.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="217.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.inflate (1 samples, 0.04%)</title><rect x="214.1" y="1027.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.04%)</title><rect x="214.1" y="1011.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.length (1 samples, 0.04%)</title><rect x="214.6" y="1059.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.length (1 samples, 0.04%)</title><rect x="214.6" y="1043.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.07%)</title><rect x="215.0" y="1075.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.0" y="1086.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (38 samples, 1.41%)</title><rect x="215.9" y="1139.0" width="16.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.04%)</title><rect x="217.2" y="1123.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (1 samples, 0.04%)</title><rect x="217.2" y="1107.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.04%)</title><rect x="217.2" y="1091.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.15%)</title><rect x="217.6" y="1123.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.15%)</title><rect x="217.6" y="1107.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.04%)</title><rect x="217.6" y="1091.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.getCoder (1 samples, 0.04%)</title><rect x="217.6" y="1075.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (3 samples, 0.11%)</title><rect x="218.1" y="1091.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.inflate (3 samples, 0.11%)</title><rect x="218.1" y="1075.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.inflate (2 samples, 0.07%)</title><rect x="218.5" y="1059.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.inflate (2 samples, 0.07%)</title><rect x="218.5" y="1043.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.5" y="1054.0"></text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.04%)</title><rect x="218.5" y="1027.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="221.5" y="1038.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="218.5" y="1011.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="221.5" y="1022.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="218.5" y="995.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="221.5" y="1006.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="218.5" y="979.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="221.5" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="218.5" y="963.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="221.5" y="974.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="218.5" y="947.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="221.5" y="958.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.04%)</title><rect x="218.9" y="1027.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.9" y="1038.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getAmPmStrings (1 samples, 0.04%)</title><rect x="219.4" y="1123.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="219.4" y="1107.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="219.4" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (1 samples, 0.04%)</title><rect x="219.4" y="1075.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newArray (1 samples, 0.04%)</title><rect x="219.4" y="1059.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.4" y="1070.0"></text>
</g>
<g>
<title>JVM_NewArray (1 samples, 0.04%)</title><rect x="219.4" y="1043.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="222.4" y="1054.0"></text>
</g>
<g>
<title>Reflection::reflect_new_array(oopDesc*, int, Thread*) (1 samples, 0.04%)</title><rect x="219.4" y="1027.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="222.4" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.04%)</title><rect x="219.4" y="1011.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="222.4" y="1022.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getInstance (20 samples, 0.74%)</title><rect x="219.8" y="1123.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.8" y="1134.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getProviderInstance (20 samples, 0.74%)</title><rect x="219.8" y="1107.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.8" y="1118.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DateFormatSymbolsProviderImpl.getInstance (19 samples, 0.71%)</title><rect x="220.2" y="1091.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.2" y="1102.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.&lt;init&gt; (18 samples, 0.67%)</title><rect x="220.7" y="1075.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.7" y="1086.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.initializeData (17 samples, 0.63%)</title><rect x="221.1" y="1059.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.1" y="1070.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.copyMembers (16 samples, 0.59%)</title><rect x="221.6" y="1043.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.6" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 0.59%)</title><rect x="221.6" y="1027.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.48%)</title><rect x="222.9" y="1011.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.11%)</title><rect x="223.7" y="995.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (3 samples, 0.11%)</title><rect x="223.7" y="979.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.7" y="990.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="224.2" y="963.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="227.2" y="974.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (1 samples, 0.04%)</title><rect x="224.6" y="963.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="227.6" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="224.6" y="947.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="227.6" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="224.6" y="931.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="227.6" y="942.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="224.6" y="915.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="227.6" y="926.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="224.6" y="899.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="227.6" y="910.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="224.6" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="227.6" y="894.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="224.6" y="867.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="227.6" y="878.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="224.6" y="851.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="227.6" y="862.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="224.6" y="835.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="227.6" y="846.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="224.6" y="819.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="227.6" y="830.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (6 samples, 0.22%)</title><rect x="225.1" y="995.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newArray (6 samples, 0.22%)</title><rect x="225.1" y="979.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.1" y="990.0"></text>
</g>
<g>
<title>JVM_NewArray (5 samples, 0.19%)</title><rect x="225.5" y="963.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="228.5" y="974.0"></text>
</g>
<g>
<title>Reflection::reflect_new_array(oopDesc*, int, Thread*) (2 samples, 0.07%)</title><rect x="226.4" y="947.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="229.4" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.07%)</title><rect x="226.4" y="931.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="229.4" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.07%)</title><rect x="226.4" y="915.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="229.4" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="226.8" y="899.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="229.8" y="910.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.04%)</title><rect x="226.8" y="883.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="229.8" y="894.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="227.3" y="947.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="230.3" y="958.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.04%)</title><rect x="227.3" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="230.3" y="942.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="227.7" y="995.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="230.7" y="1006.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getShortMonths (1 samples, 0.04%)</title><rect x="228.6" y="1123.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.6" y="1134.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.get (3 samples, 0.11%)</title><rect x="229.0" y="1123.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.0" y="1134.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="229.4" y="1107.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.4" y="1118.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.get (1 samples, 0.04%)</title><rect x="229.9" y="1107.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.9" y="1118.0"></text>
</g>
<g>
<title>java/time/LocalDate.get (1 samples, 0.04%)</title><rect x="229.9" y="1091.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.9" y="1102.0"></text>
</g>
<g>
<title>java/time/LocalDate.get0 (1 samples, 0.04%)</title><rect x="229.9" y="1075.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="232.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.localizedMagnitude (5 samples, 0.19%)</title><rect x="230.3" y="1123.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.04%)</title><rect x="230.3" y="1107.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.04%)</title><rect x="230.3" y="1091.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.04%)</title><rect x="230.3" y="1075.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.localizedMagnitude (4 samples, 0.15%)</title><rect x="230.8" y="1107.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="231.2" y="1091.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="231.6" y="1091.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.04%)</title><rect x="231.6" y="1075.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.getZero (1 samples, 0.04%)</title><rect x="232.1" y="1091.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.toUpperCaseWithLocale (2 samples, 0.07%)</title><rect x="232.5" y="1139.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (1 samples, 0.04%)</title><rect x="232.9" y="1123.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toUpperCase (1 samples, 0.04%)</title><rect x="232.9" y="1107.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printString (1 samples, 0.04%)</title><rect x="233.4" y="1171.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.4" y="1182.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.04%)</title><rect x="233.4" y="1155.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.4" y="1166.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (1 samples, 0.04%)</title><rect x="233.4" y="1139.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="233.4" y="1123.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="233.4" y="1107.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.04%)</title><rect x="233.4" y="1091.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="233.4" y="1075.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (70 samples, 2.60%)</title><rect x="233.8" y="1187.0" width="30.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.8" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="236.0" y="1171.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.0" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="236.0" y="1155.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.0" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="236.0" y="1139.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.0" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="236.0" y="1123.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="236.0" y="1107.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.0" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="236.0" y="1091.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.04%)</title><rect x="236.0" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.0" y="1086.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.&lt;init&gt; (25 samples, 0.93%)</title><rect x="236.5" y="1171.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="237.3" y="1155.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Formatter$Flags.add (1 samples, 0.04%)</title><rect x="237.8" y="1155.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="240.8" y="1166.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkDateTime (6 samples, 0.22%)</title><rect x="238.2" y="1155.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Formatter$DateTime.isValid (1 samples, 0.04%)</title><rect x="239.5" y="1139.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="242.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkBadFlags (2 samples, 0.07%)</title><rect x="240.0" y="1139.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Formatter$Flags.contains (1 samples, 0.04%)</title><rect x="240.4" y="1123.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkGeneral (1 samples, 0.04%)</title><rect x="240.8" y="1155.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.8" y="1166.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkBadFlags (1 samples, 0.04%)</title><rect x="240.8" y="1139.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkText (2 samples, 0.07%)</title><rect x="241.3" y="1155.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.conversion (4 samples, 0.15%)</title><rect x="242.1" y="1155.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/Character.isUpperCase (2 samples, 0.07%)</title><rect x="242.1" y="1139.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Character.isUpperCase (2 samples, 0.07%)</title><rect x="242.1" y="1123.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.isOtherUppercase (1 samples, 0.04%)</title><rect x="242.6" y="1107.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.6" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="242.6" y="1091.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="245.6" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="242.6" y="1075.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="245.6" y="1086.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="242.6" y="1059.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="245.6" y="1070.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="242.6" y="1043.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="245.6" y="1054.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.04%)</title><rect x="242.6" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="245.6" y="1038.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.04%)</title><rect x="242.6" y="1011.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="245.6" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.04%)</title><rect x="242.6" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="245.6" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="242.6" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="245.6" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="242.6" y="963.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="245.6" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="242.6" y="947.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="245.6" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="242.6" y="931.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="245.6" y="942.0"></text>
</g>
<g>
<title>java/util/Formatter$Conversion.isValid (2 samples, 0.07%)</title><rect x="243.0" y="1139.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Formatter$Conversion.isGeneral (2 samples, 0.07%)</title><rect x="243.0" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.index (5 samples, 0.19%)</title><rect x="243.9" y="1155.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.19%)</title><rect x="243.9" y="1139.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.04%)</title><rect x="245.2" y="1123.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.04%)</title><rect x="245.2" y="1107.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.04%)</title><rect x="245.6" y="1123.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.6" y="1134.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.end (1 samples, 0.04%)</title><rect x="246.1" y="1155.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.1" y="1166.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.groupCount (1 samples, 0.04%)</title><rect x="246.1" y="1139.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.1" y="1150.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.start (2 samples, 0.07%)</title><rect x="246.5" y="1155.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Formatter.checkText (2 samples, 0.07%)</title><rect x="247.4" y="1171.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="247.8" y="1155.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="247.8" y="1139.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.8" y="1150.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.find (33 samples, 1.22%)</title><rect x="248.3" y="1171.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.3" y="1182.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.reset (2 samples, 0.07%)</title><rect x="248.7" y="1155.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.7" y="1166.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (30 samples, 1.11%)</title><rect x="249.6" y="1155.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.6" y="1166.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Start.match (26 samples, 0.97%)</title><rect x="251.3" y="1139.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.3" y="1150.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (23 samples, 0.85%)</title><rect x="252.7" y="1123.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.7" y="1134.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$14/783286238.is (1 samples, 0.04%)</title><rect x="253.1" y="1107.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.1" y="1118.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (21 samples, 0.78%)</title><rect x="253.5" y="1107.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.5" y="1118.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.04%)</title><rect x="254.4" y="1091.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.4" y="1102.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.04%)</title><rect x="254.4" y="1075.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.4" y="1086.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.04%)</title><rect x="254.4" y="1059.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.4" y="1070.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (1 samples, 0.04%)</title><rect x="254.4" y="1043.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="257.4" y="1054.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (1 samples, 0.04%)</title><rect x="254.4" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.4" y="1038.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.04%)</title><rect x="254.4" y="1011.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.4" y="1022.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.04%)</title><rect x="254.4" y="995.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.4" y="1006.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (18 samples, 0.67%)</title><rect x="254.8" y="1091.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.8" y="1102.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (17 samples, 0.63%)</title><rect x="255.3" y="1075.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="258.3" y="1086.0"></text>
</g>
<g>
<title>java/util/regex/CharPredicates$$Lambda$15/1500056228.is (2 samples, 0.07%)</title><rect x="255.7" y="1059.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.7" y="1070.0"></text>
</g>
<g>
<title>java/util/regex/CharPredicates.lambda$ASCII_DIGIT$15 (1 samples, 0.04%)</title><rect x="256.2" y="1043.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.2" y="1054.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (14 samples, 0.52%)</title><rect x="256.6" y="1059.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.6" y="1070.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (14 samples, 0.52%)</title><rect x="256.6" y="1043.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.6" y="1054.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (14 samples, 0.52%)</title><rect x="256.6" y="1027.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="259.6" y="1038.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (14 samples, 0.52%)</title><rect x="256.6" y="1011.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.6" y="1022.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (14 samples, 0.52%)</title><rect x="256.6" y="995.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.6" y="1006.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (13 samples, 0.48%)</title><rect x="257.0" y="979.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.0" y="990.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (12 samples, 0.45%)</title><rect x="257.5" y="963.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.5" y="974.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (11 samples, 0.41%)</title><rect x="257.9" y="947.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.9" y="958.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (11 samples, 0.41%)</title><rect x="257.9" y="931.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.9" y="942.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (7 samples, 0.26%)</title><rect x="259.2" y="915.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.2" y="926.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (5 samples, 0.19%)</title><rect x="260.1" y="899.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.1" y="910.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (5 samples, 0.19%)</title><rect x="260.1" y="883.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.1" y="894.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (5 samples, 0.19%)</title><rect x="260.1" y="867.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.1" y="878.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (5 samples, 0.19%)</title><rect x="260.1" y="851.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.1" y="862.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (4 samples, 0.15%)</title><rect x="260.1" y="835.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="263.1" y="846.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (4 samples, 0.15%)</title><rect x="260.1" y="819.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.1" y="830.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (4 samples, 0.15%)</title><rect x="260.1" y="803.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.1" y="814.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$19/392292416.is (3 samples, 0.11%)</title><rect x="260.1" y="787.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.1" y="798.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (3 samples, 0.11%)</title><rect x="260.1" y="771.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.1" y="782.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$19/392292416.is (3 samples, 0.11%)</title><rect x="260.1" y="755.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.1" y="766.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (3 samples, 0.11%)</title><rect x="260.1" y="739.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.1" y="750.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$18/105704967.is (1 samples, 0.04%)</title><rect x="261.0" y="723.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.0" y="734.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$Range$11 (1 samples, 0.04%)</title><rect x="261.0" y="707.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.0" y="718.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.inRange (1 samples, 0.04%)</title><rect x="261.0" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="264.0" y="702.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (1 samples, 0.04%)</title><rect x="261.4" y="787.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.4" y="798.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$LastNode.match (1 samples, 0.04%)</title><rect x="261.9" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.9" y="846.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.04%)</title><rect x="262.3" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.3" y="926.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.04%)</title><rect x="262.3" y="899.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.3" y="910.0"></text>
</g>
<g>
<title>java/util/regex/CharPredicates$$Lambda$15/1500056228.is (1 samples, 0.04%)</title><rect x="262.3" y="883.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.3" y="894.0"></text>
</g>
<g>
<title>java/util/regex/CharPredicates.lambda$ASCII_DIGIT$15 (1 samples, 0.04%)</title><rect x="262.3" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.3" y="878.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.matcher (4 samples, 0.15%)</title><rect x="262.7" y="1171.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="265.7" y="1182.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.&lt;init&gt; (3 samples, 0.11%)</title><rect x="263.2" y="1155.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.2" y="1166.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.reset (1 samples, 0.04%)</title><rect x="264.0" y="1139.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Formatter.toString (2 samples, 0.07%)</title><rect x="264.5" y="1219.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.07%)</title><rect x="264.5" y="1203.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.newString (2 samples, 0.07%)</title><rect x="264.5" y="1187.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="267.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.07%)</title><rect x="264.5" y="1171.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.07%)</title><rect x="264.5" y="1155.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="264.5" y="1139.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="267.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkBoundsOffCount (1 samples, 0.04%)</title><rect x="264.9" y="1139.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (11 samples, 0.41%)</title><rect x="265.4" y="1235.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1543237999.invoke (11 samples, 0.41%)</title><rect x="265.4" y="1219.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.4" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="266.2" y="1203.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="269.2" y="1214.0"></text>
</g>
<g>
<title>_invokeBasic (3 samples, 0.11%)</title><rect x="266.7" y="1203.0" width="1.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="269.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.19%)</title><rect x="268.0" y="1203.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.04%)</title><rect x="268.9" y="1187.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.07%)</title><rect x="269.3" y="1187.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.3" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (2 samples, 0.07%)</title><rect x="269.3" y="1171.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="269.7" y="1155.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="272.7" y="1166.0"></text>
</g>
<g>
<title>java/time/ZoneId.systemDefault (7 samples, 0.26%)</title><rect x="270.2" y="1235.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.2" y="1246.0"></text>
</g>
<g>
<title>java/util/TimeZone.getDefault (6 samples, 0.22%)</title><rect x="270.2" y="1219.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.2" y="1230.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfo.clone (6 samples, 0.22%)</title><rect x="270.2" y="1203.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.2" y="1214.0"></text>
</g>
<g>
<title>java/util/TimeZone.clone (5 samples, 0.19%)</title><rect x="270.6" y="1187.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/Object.clone (5 samples, 0.19%)</title><rect x="270.6" y="1171.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.6" y="1182.0"></text>
</g>
<g>
<title>JVM_Clone (3 samples, 0.11%)</title><rect x="271.5" y="1155.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="274.5" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="271.9" y="1139.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="274.9" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="271.9" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="274.9" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (1 samples, 0.04%)</title><rect x="271.9" y="1107.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="274.9" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="272.4" y="1139.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="275.4" y="1150.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="272.4" y="1123.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="275.4" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="272.4" y="1107.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="275.4" y="1118.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="272.4" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="275.4" y="1102.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="272.4" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="275.4" y="1086.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="272.4" y="1059.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="275.4" y="1070.0"></text>
</g>
<g>
<title>java/util/TimeZone.toZoneId (1 samples, 0.04%)</title><rect x="272.8" y="1219.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.8" y="1230.0"></text>
</g>
<g>
<title>java/util/TimeZone.toZoneId0 (1 samples, 0.04%)</title><rect x="272.8" y="1203.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.8" y="1214.0"></text>
</g>
<g>
<title>java/util/TimeZone.toZoneId (1 samples, 0.04%)</title><rect x="272.8" y="1187.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="275.8" y="1198.0"></text>
</g>
<g>
<title>java/util/TimeZone.toZoneId0 (1 samples, 0.04%)</title><rect x="272.8" y="1171.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.8" y="1182.0"></text>
</g>
<g>
<title>java/time/ZoneId.of (1 samples, 0.04%)</title><rect x="272.8" y="1155.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.8" y="1166.0"></text>
</g>
<g>
<title>java/time/ZoneId.of (1 samples, 0.04%)</title><rect x="272.8" y="1139.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="275.8" y="1150.0"></text>
</g>
<g>
<title>java/time/ZoneId.of (1 samples, 0.04%)</title><rect x="272.8" y="1123.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.8" y="1134.0"></text>
</g>
<g>
<title>java/time/ZoneRegion.ofId (1 samples, 0.04%)</title><rect x="272.8" y="1107.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.8" y="1118.0"></text>
</g>
<g>
<title>java/time/zone/ZoneRulesProvider.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="272.8" y="1091.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.8" y="1102.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.04%)</title><rect x="272.8" y="1075.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.8" y="1086.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.04%)</title><rect x="272.8" y="1059.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.8" y="1070.0"></text>
</g>
<g>
<title>java/time/zone/ZoneRulesProvider$1.run (1 samples, 0.04%)</title><rect x="272.8" y="1043.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="275.8" y="1054.0"></text>
</g>
<g>
<title>java/time/zone/TzdbZoneRulesProvider.&lt;init&gt; (1 samples, 0.04%)</title><rect x="272.8" y="1027.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.8" y="1038.0"></text>
</g>
<g>
<title>java/time/zone/TzdbZoneRulesProvider.load (1 samples, 0.04%)</title><rect x="272.8" y="1011.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.8" y="1022.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readUTF (1 samples, 0.04%)</title><rect x="272.8" y="995.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.8" y="1006.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readUTF (1 samples, 0.04%)</title><rect x="272.8" y="979.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.8" y="990.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readFully (1 samples, 0.04%)</title><rect x="272.8" y="963.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.8" y="974.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (1 samples, 0.04%)</title><rect x="272.8" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.8" y="958.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read1 (1 samples, 0.04%)</title><rect x="272.8" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.8" y="942.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (1 samples, 0.04%)</title><rect x="272.8" y="915.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.8" y="926.0"></text>
</g>
<g>
<title>java/io/FileInputStream.read (1 samples, 0.04%)</title><rect x="272.8" y="899.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.8" y="910.0"></text>
</g>
<g>
<title>java/io/FileInputStream.readBytes (1 samples, 0.04%)</title><rect x="272.8" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="275.8" y="894.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.04%)</title><rect x="272.8" y="867.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="275.8" y="878.0"></text>
</g>
<g>
<title>read (1 samples, 0.04%)</title><rect x="272.8" y="851.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="275.8" y="862.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.ofInstant (5 samples, 0.19%)</title><rect x="273.2" y="1235.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.2" y="1246.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.create (5 samples, 0.19%)</title><rect x="273.2" y="1219.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.2" y="1230.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (1 samples, 0.04%)</title><rect x="273.7" y="1203.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (1 samples, 0.04%)</title><rect x="273.7" y="1187.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.7" y="1198.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.ofEpochSecond (3 samples, 0.11%)</title><rect x="274.1" y="1203.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.1" y="1214.0"></text>
</g>
<g>
<title>java/util/logging/Level.getLocalizedLevelName (2 samples, 0.07%)</title><rect x="275.4" y="1235.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.4" y="1246.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord.getLevel (1 samples, 0.04%)</title><rect x="276.3" y="1235.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.3" y="1246.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord.getSourceClassName (115 samples, 4.27%)</title><rect x="276.7" y="1235.0" width="50.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.7" y="1246.0">java/..</text>
</g>
<g>
<title>java/util/logging/LogRecord.inferCaller (115 samples, 4.27%)</title><rect x="276.7" y="1219.0" width="50.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.7" y="1230.0">java/..</text>
</g>
<g>
<title>java/util/Optional.ifPresent (10 samples, 0.37%)</title><rect x="277.2" y="1203.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.2" y="1214.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$$Lambda$83/1967622887.accept (10 samples, 0.37%)</title><rect x="277.2" y="1187.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.2" y="1198.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord.lambda$inferCaller$0 (10 samples, 0.37%)</title><rect x="277.2" y="1171.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.getMethodName (9 samples, 0.33%)</title><rect x="277.2" y="1155.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl$1.getName (9 samples, 0.33%)</title><rect x="277.2" y="1139.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.getName (9 samples, 0.33%)</title><rect x="277.2" y="1123.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.expandFromVM (9 samples, 0.33%)</title><rect x="277.2" y="1107.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.expand (9 samples, 0.33%)</title><rect x="277.2" y="1091.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.2" y="1102.0"></text>
</g>
<g>
<title>MHN_expand_Mem (9 samples, 0.33%)</title><rect x="277.2" y="1075.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="280.2" y="1086.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 573558ull&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (1 samples, 0.04%)</title><rect x="277.2" y="1059.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="280.2" y="1070.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.04%)</title><rect x="277.6" y="1059.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="280.6" y="1070.0"></text>
</g>
<g>
<title>MethodHandles::expand_MemberName(Handle, int, Thread*) (7 samples, 0.26%)</title><rect x="278.1" y="1059.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="281.1" y="1070.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (4 samples, 0.15%)</title><rect x="278.1" y="1043.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="281.1" y="1054.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short const*, int, unsigned long, Thread*) (3 samples, 0.11%)</title><rect x="278.5" y="1027.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="281.5" y="1038.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::get&lt;StringTableLookupOop, StringTableGet&gt;(Thread*, StringTableLookupOop&amp;, StringTableGet&amp;, bool*) (1 samples, 0.04%)</title><rect x="278.5" y="1011.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="281.5" y="1022.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)1&gt;* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::internal_get&lt;StringTableLookupOop&gt;(Thread*, StringTableLookupOop&amp;, bool*) (1 samples, 0.04%)</title><rect x="278.5" y="995.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="281.5" y="1006.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::Node* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::get_node&lt;StringTableLookupOop&gt;(ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::Bucket const*, StringTableLookupOop&amp;, bool*, unsigned long*) const (1 samples, 0.04%)</title><rect x="278.5" y="979.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="281.5" y="990.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1196148ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="278.5" y="963.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="281.5" y="974.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short const*, int, Thread*) (2 samples, 0.07%)</title><rect x="278.9" y="1011.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="281.9" y="1022.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (2 samples, 0.07%)</title><rect x="278.9" y="995.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="281.9" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="279.4" y="979.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="282.4" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="279.4" y="963.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="282.4" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="279.4" y="947.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="282.4" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="279.4" y="931.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="282.4" y="942.0"></text>
</g>
<g>
<title>java_lang_String::create_from_symbol(Symbol*, Thread*) (3 samples, 0.11%)</title><rect x="279.8" y="1043.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="282.8" y="1054.0"></text>
</g>
<g>
<title>UTF8::unicode_length(char const*, int, bool&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="279.8" y="1027.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="282.8" y="1038.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (2 samples, 0.07%)</title><rect x="280.3" y="1027.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="283.3" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="280.3" y="1011.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="283.3" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="280.3" y="995.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="283.3" y="1006.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="280.3" y="979.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="283.3" y="990.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.04%)</title><rect x="280.7" y="1011.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="283.7" y="1022.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord.setSourceClassName (1 samples, 0.04%)</title><rect x="281.1" y="1155.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.1" y="1166.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.get (104 samples, 3.86%)</title><rect x="281.6" y="1203.0" width="45.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="284.6" y="1214.0">java..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="281.6" y="1187.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="284.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/StackWalker.walk (103 samples, 3.82%)</title><rect x="282.0" y="1187.0" width="45.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.0" y="1198.0">java..</text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.walk (102 samples, 3.79%)</title><rect x="282.4" y="1171.0" width="44.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.4" y="1182.0">java..</text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.beginStackWalk (102 samples, 3.79%)</title><rect x="282.4" y="1155.0" width="44.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.4" y="1166.0">java..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="282.9" y="1139.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="285.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.callStackWalk (97 samples, 3.60%)</title><rect x="283.3" y="1139.0" width="42.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.3" y="1150.0">java..</text>
</g>
<g>
<title>JVM_CallStackWalk (21 samples, 0.78%)</title><rect x="283.3" y="1123.0" width="9.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="286.3" y="1134.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.04%)</title><rect x="283.3" y="1107.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="286.3" y="1118.0"></text>
</g>
<g>
<title>StackWalk::walk(Handle, long, int, int, int, objArrayHandle, Thread*) (20 samples, 0.74%)</title><rect x="283.8" y="1107.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="286.8" y="1118.0"></text>
</g>
<g>
<title>JavaFrameStream::JavaFrameStream(JavaThread*, int) (1 samples, 0.04%)</title><rect x="283.8" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="286.8" y="1102.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="283.8" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="286.8" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="283.8" y="1059.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="286.8" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="283.8" y="1043.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="286.8" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="283.8" y="1027.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="286.8" y="1038.0"></text>
</g>
<g>
<title>StackWalk::fetchFirstBatch(BaseFrameStream&amp;, Handle, long, int, int, int, objArrayHandle, Thread*) (19 samples, 0.71%)</title><rect x="284.2" y="1091.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="287.2" y="1102.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (1 samples, 0.04%)</title><rect x="284.6" y="1075.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="287.6" y="1086.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.04%)</title><rect x="285.1" y="1075.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="288.1" y="1086.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.07%)</title><rect x="285.5" y="1075.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="288.5" y="1086.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.04%)</title><rect x="285.5" y="1059.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="288.5" y="1070.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.04%)</title><rect x="285.5" y="1043.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="288.5" y="1054.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.04%)</title><rect x="285.9" y="1059.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="288.9" y="1070.0"></text>
</g>
<g>
<title>JavaFrameStream::next() (1 samples, 0.04%)</title><rect x="286.4" y="1075.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="289.4" y="1086.0"></text>
</g>
<g>
<title>LatestMethodCache::get_method() (1 samples, 0.04%)</title><rect x="286.8" y="1075.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="289.8" y="1086.0"></text>
</g>
<g>
<title>StackWalk::fill_in_frames(long, BaseFrameStream&amp;, int, int, objArrayHandle, int&amp;, Thread*) (10 samples, 0.37%)</title><rect x="287.3" y="1075.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="290.3" y="1086.0"></text>
</g>
<g>
<title>JavaFrameStream::next() (4 samples, 0.15%)</title><rect x="287.3" y="1059.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="290.3" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.07%)</title><rect x="287.3" y="1043.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="290.3" y="1054.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.07%)</title><rect x="287.3" y="1027.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="290.3" y="1038.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.07%)</title><rect x="287.3" y="1011.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="290.3" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.07%)</title><rect x="287.3" y="995.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="290.3" y="1006.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="287.7" y="979.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="290.7" y="990.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.07%)</title><rect x="288.1" y="1043.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="291.1" y="1054.0"></text>
</g>
<g>
<title>Method::validate_bci_from_bcp(unsigned char*) const (1 samples, 0.04%)</title><rect x="288.6" y="1027.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="291.6" y="1038.0"></text>
</g>
<g>
<title>java_lang_StackFrameInfo::set_method_and_bci(Handle, methodHandle const&amp;, int, Thread*) (6 samples, 0.22%)</title><rect x="289.0" y="1059.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="292.0" y="1070.0"></text>
</g>
<g>
<title>CallInfo::CallInfo(Method*, Klass*, Thread*) (5 samples, 0.19%)</title><rect x="289.0" y="1043.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="292.0" y="1054.0"></text>
</g>
<g>
<title>CallInfo::set_resolved_method_name(Thread*) (2 samples, 0.07%)</title><rect x="289.5" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="292.5" y="1038.0"></text>
</g>
<g>
<title>java_lang_invoke_ResolvedMethodName::find_resolved_method(methodHandle const&amp;, Thread*) (2 samples, 0.07%)</title><rect x="289.5" y="1011.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="292.5" y="1022.0"></text>
</g>
<g>
<title>ResolvedMethodTable::find_method(Method*) (2 samples, 0.07%)</title><rect x="289.5" y="995.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="292.5" y="1006.0"></text>
</g>
<g>
<title>ResolvedMethodTable::compute_hash(Method*) (1 samples, 0.04%)</title><rect x="289.5" y="979.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="292.5" y="990.0"></text>
</g>
<g>
<title>ResolvedMethodTable::lookup(int, unsigned int, Method*) (1 samples, 0.04%)</title><rect x="289.9" y="979.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="292.9" y="990.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="290.3" y="1027.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="293.3" y="1038.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.04%)</title><rect x="290.8" y="1027.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="293.8" y="1038.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="291.2" y="1043.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="294.2" y="1054.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="291.6" y="1075.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="294.6" y="1086.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.04%)</title><rect x="292.1" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="295.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.doStackWalk (76 samples, 2.82%)</title><rect x="292.5" y="1123.0" width="33.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="295.5" y="1134.0">ja..</text>
</g>
<g>
<title>java/lang/StackStreamFactory$FrameBuffer.setBatch (1 samples, 0.04%)</title><rect x="292.5" y="1107.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser$StackFrameBuffer.at (1 samples, 0.04%)</title><rect x="292.5" y="1091.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.declaringClass (1 samples, 0.04%)</title><rect x="292.5" y="1075.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl$1.getDeclaringClass (1 samples, 0.04%)</title><rect x="292.5" y="1059.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.consumeFrames (75 samples, 2.78%)</title><rect x="293.0" y="1107.0" width="32.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.0" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder$$Lambda$82/465793742.apply (73 samples, 2.71%)</title><rect x="293.4" y="1091.0" width="32.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.4" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.lambda$get$1 (73 samples, 2.71%)</title><rect x="293.4" y="1075.0" width="32.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.4" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.04%)</title><rect x="293.4" y="1059.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.04%)</title><rect x="293.4" y="1043.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (1 samples, 0.04%)</title><rect x="293.4" y="1027.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.04%)</title><rect x="293.4" y="1011.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.04%)</title><rect x="293.4" y="995.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.combineOpFlags (1 samples, 0.04%)</title><rect x="293.4" y="979.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.getMask (1 samples, 0.04%)</title><rect x="293.4" y="963.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (72 samples, 2.67%)</title><rect x="293.8" y="1059.0" width="31.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.8" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (71 samples, 2.64%)</title><rect x="294.3" y="1043.0" width="31.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.3" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (70 samples, 2.60%)</title><rect x="294.7" y="1027.0" width="30.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.7" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (66 samples, 2.45%)</title><rect x="295.6" y="1011.0" width="28.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.6" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (64 samples, 2.38%)</title><rect x="295.6" y="995.0" width="28.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.6" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (64 samples, 2.38%)</title><rect x="295.6" y="979.0" width="28.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.6" y="990.0">ja..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (61 samples, 2.26%)</title><rect x="296.9" y="963.0" width="26.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.9" y="974.0">j..</text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.tryAdvance (56 samples, 2.08%)</title><rect x="297.8" y="947.0" width="24.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.8" y="958.0">j..</text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.hasNext (33 samples, 1.22%)</title><rect x="299.5" y="931.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.5" y="942.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.peekFrame (32 samples, 1.19%)</title><rect x="300.0" y="915.0" width="14.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.getNextBatch (22 samples, 0.82%)</title><rect x="300.4" y="899.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.4" y="910.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.fetchStackFrames (20 samples, 0.74%)</title><rect x="300.8" y="883.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.fetchStackFrames (17 samples, 0.63%)</title><rect x="300.8" y="867.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.8" y="878.0"></text>
</g>
<g>
<title>JVM_MoreStackWalk (17 samples, 0.63%)</title><rect x="300.8" y="851.0" width="7.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="303.8" y="862.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="301.3" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="304.3" y="846.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.04%)</title><rect x="301.3" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="304.3" y="830.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.04%)</title><rect x="301.3" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="304.3" y="814.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="301.3" y="787.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="304.3" y="798.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="301.3" y="771.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="304.3" y="782.0"></text>
</g>
<g>
<title>StackWalk::fetchNextBatch(Handle, long, long, int, int, objArrayHandle, Thread*) (15 samples, 0.56%)</title><rect x="301.7" y="835.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="304.7" y="846.0"></text>
</g>
<g>
<title>JavaFrameStream::next() (2 samples, 0.07%)</title><rect x="301.7" y="819.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="304.7" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.07%)</title><rect x="301.7" y="803.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="304.7" y="814.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="302.2" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="305.2" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="302.2" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="305.2" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="302.2" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="305.2" y="766.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="302.2" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="305.2" y="750.0"></text>
</g>
<g>
<title>StackWalk::fill_in_frames(long, BaseFrameStream&amp;, int, int, objArrayHandle, int&amp;, Thread*) (13 samples, 0.48%)</title><rect x="302.6" y="819.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="305.6" y="830.0"></text>
</g>
<g>
<title>JavaFrameStream::fill_frame(int, objArrayHandle, methodHandle const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="303.0" y="803.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="306.0" y="814.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (1 samples, 0.04%)</title><rect x="303.0" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="306.0" y="798.0"></text>
</g>
<g>
<title>AccessInternal::field_addr(oopDesc*, long) (1 samples, 0.04%)</title><rect x="303.0" y="771.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="306.0" y="782.0"></text>
</g>
<g>
<title>JavaFrameStream::next() (3 samples, 0.11%)</title><rect x="303.5" y="803.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="306.5" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.07%)</title><rect x="303.5" y="787.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="306.5" y="798.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="303.9" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="306.9" y="782.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="303.9" y="755.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="306.9" y="766.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="303.9" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="306.9" y="750.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="303.9" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="306.9" y="734.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.04%)</title><rect x="304.3" y="787.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="307.3" y="798.0"></text>
</g>
<g>
<title>java_lang_StackFrameInfo::set_method_and_bci(Handle, methodHandle const&amp;, int, Thread*) (8 samples, 0.30%)</title><rect x="304.8" y="803.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="307.8" y="814.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.07%)</title><rect x="304.8" y="787.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="307.8" y="798.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.07%)</title><rect x="304.8" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="307.8" y="782.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.04%)</title><rect x="305.2" y="755.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="308.2" y="766.0"></text>
</g>
<g>
<title>CallInfo::CallInfo(Method*, Klass*, Thread*) (6 samples, 0.22%)</title><rect x="305.7" y="787.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="308.7" y="798.0"></text>
</g>
<g>
<title>CallInfo::set_resolved_method_name(Thread*) (3 samples, 0.11%)</title><rect x="305.7" y="771.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="308.7" y="782.0"></text>
</g>
<g>
<title>ResolvedMethodTable::find_method(Method*) (1 samples, 0.04%)</title><rect x="305.7" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="308.7" y="766.0"></text>
</g>
<g>
<title>java_lang_invoke_ResolvedMethodName::find_resolved_method(methodHandle const&amp;, Thread*) (2 samples, 0.07%)</title><rect x="306.1" y="755.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="309.1" y="766.0"></text>
</g>
<g>
<title>ResolvedMethodTable::find_method(Method*) (2 samples, 0.07%)</title><rect x="306.1" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="309.1" y="750.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="306.1" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="309.1" y="734.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.04%)</title><rect x="306.1" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="309.1" y="718.0"></text>
</g>
<g>
<title>ResolvedMethodTable::lookup(int, unsigned int, Method*) (1 samples, 0.04%)</title><rect x="306.5" y="723.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="309.5" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="306.5" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="309.5" y="718.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.04%)</title><rect x="307.0" y="771.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="310.0" y="782.0"></text>
</g>
<g>
<title>Method::can_be_statically_bound() const (1 samples, 0.04%)</title><rect x="307.4" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="310.4" y="782.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="307.8" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="310.8" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.04%)</title><rect x="307.8" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="310.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser$StackFrameBuffer.resize (3 samples, 0.11%)</title><rect x="308.3" y="867.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.3" y="878.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="308.7" y="851.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="311.7" y="862.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.getNextBatchSize (1 samples, 0.04%)</title><rect x="309.6" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.6" y="894.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.skipReflectionFrames (2 samples, 0.07%)</title><rect x="310.0" y="899.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.0" y="910.0"></text>
</g>
<g>
<title>java/lang/StackWalker.hasOption (1 samples, 0.04%)</title><rect x="310.5" y="883.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.5" y="894.0"></text>
</g>
<g>
<title>java/util/RegularEnumSet.contains (1 samples, 0.04%)</title><rect x="310.5" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.5" y="878.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory.isReflectionFrame (7 samples, 0.26%)</title><rect x="310.9" y="899.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.9" y="910.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (5 samples, 0.19%)</title><rect x="311.4" y="883.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.4" y="894.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="311.8" y="867.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="314.8" y="878.0"></text>
</g>
<g>
<title>jni_IsAssignableFrom (3 samples, 0.11%)</title><rect x="312.2" y="867.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="315.2" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.11%)</title><rect x="312.2" y="851.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="315.2" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.11%)</title><rect x="312.2" y="835.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="315.2" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.07%)</title><rect x="312.2" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="315.2" y="830.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.07%)</title><rect x="312.2" y="803.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="315.2" y="814.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.07%)</title><rect x="312.2" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="315.2" y="798.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.04%)</title><rect x="312.2" y="771.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="315.2" y="782.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="312.7" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="315.7" y="782.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="313.1" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="316.1" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="313.1" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="316.1" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="313.1" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="316.1" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="313.1" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="316.1" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="313.1" y="755.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="316.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="313.5" y="883.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="313.5" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.5" y="878.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.nextStackFrame (12 samples, 0.45%)</title><rect x="314.0" y="931.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.0" y="942.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.hasNext (9 samples, 0.33%)</title><rect x="314.9" y="915.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.9" y="926.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.peekFrame (8 samples, 0.30%)</title><rect x="315.3" y="899.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="318.3" y="910.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$FrameBuffer.get (1 samples, 0.04%)</title><rect x="315.7" y="883.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.7" y="894.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser$StackFrameBuffer.at (1 samples, 0.04%)</title><rect x="315.7" y="867.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.7" y="878.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.declaringClass (1 samples, 0.04%)</title><rect x="315.7" y="851.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.7" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl$1.getDeclaringClass (1 samples, 0.04%)</title><rect x="315.7" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="318.7" y="846.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory.isReflectionFrame (6 samples, 0.22%)</title><rect x="316.2" y="883.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.2" y="894.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (3 samples, 0.11%)</title><rect x="317.0" y="867.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.0" y="878.0"></text>
</g>
<g>
<title>jni_IsAssignableFrom (2 samples, 0.07%)</title><rect x="317.5" y="851.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="320.5" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="317.5" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="320.5" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="317.5" y="819.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="320.5" y="830.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.04%)</title><rect x="317.9" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="320.9" y="846.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="318.4" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.4" y="878.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="318.4" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.4" y="862.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser$StackFrameBuffer.nextStackFrame (1 samples, 0.04%)</title><rect x="318.8" y="915.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="321.8" y="926.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser$StackFrameBuffer.nextStackFrame (1 samples, 0.04%)</title><rect x="318.8" y="899.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (7 samples, 0.26%)</title><rect x="319.2" y="931.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.2" y="942.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.test (7 samples, 0.26%)</title><rect x="319.2" y="915.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.2" y="926.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.test (5 samples, 0.19%)</title><rect x="320.1" y="899.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.1" y="910.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.getClassName (1 samples, 0.04%)</title><rect x="320.5" y="883.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.5" y="894.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.isLoggerImplFrame (1 samples, 0.04%)</title><rect x="321.0" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.0" y="894.0"></text>
</g>
<g>
<title>jdk/internal/logger/SurrogateLogger.isFilteredFrame (2 samples, 0.07%)</title><rect x="321.4" y="883.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.4" y="894.0"></text>
</g>
<g>
<title>jdk/internal/logger/SimpleConsoleLogger$Formatting.isFilteredFrame (2 samples, 0.07%)</title><rect x="321.4" y="867.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.4" y="878.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (2 samples, 0.07%)</title><rect x="321.4" y="851.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.4" y="862.0"></text>
</g>
<g>
<title>java_lang_Class::as_Klass(oopDesc*) (1 samples, 0.04%)</title><rect x="321.9" y="835.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="324.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (3 samples, 0.11%)</title><rect x="322.3" y="947.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink.cancellationRequested (1 samples, 0.04%)</title><rect x="323.2" y="931.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.07%)</title><rect x="323.6" y="995.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="326.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.04%)</title><rect x="324.1" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="327.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfRef$$Lambda$32/60830820.get (1 samples, 0.04%)</title><rect x="324.5" y="1011.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfRef.&lt;init&gt; (1 samples, 0.04%)</title><rect x="324.5" y="995.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfRef.get (1 samples, 0.04%)</title><rect x="324.9" y="1011.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.04%)</title><rect x="325.4" y="1091.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser$StackFrameBuffer.frames (1 samples, 0.04%)</title><rect x="325.8" y="1139.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.initFrameBuffer (2 samples, 0.07%)</title><rect x="326.2" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser$StackFrameBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="326.2" y="1123.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="329.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.&lt;init&gt; (1 samples, 0.04%)</title><rect x="326.7" y="1107.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl$1.newMemberName (1 samples, 0.04%)</title><rect x="326.7" y="1091.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.7" y="1102.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord.getSourceMethodName (2 samples, 0.07%)</title><rect x="327.1" y="1235.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.1" y="1246.0"></text>
</g>
<g>
<title>java/util/logging/StreamHandler.isLoggable (2 samples, 0.07%)</title><rect x="328.0" y="1251.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="331.0" y="1262.0"></text>
</g>
<g>
<title>java/util/logging/Handler.isLoggable (1 samples, 0.04%)</title><rect x="328.4" y="1235.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="331.4" y="1246.0"></text>
</g>
<g>
<title>java/util/logging/Logger.getHandlers (6 samples, 0.22%)</title><rect x="328.9" y="1283.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.9" y="1294.0"></text>
</g>
<g>
<title>java/util/logging/LogManager$RootLogger.accessCheckedHandlers (4 samples, 0.15%)</title><rect x="328.9" y="1267.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.9" y="1278.0"></text>
</g>
<g>
<title>java/util/logging/Logger.accessCheckedHandlers (4 samples, 0.15%)</title><rect x="328.9" y="1251.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.toArray (4 samples, 0.15%)</title><rect x="328.9" y="1235.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/Object.getClass (2 samples, 0.07%)</title><rect x="328.9" y="1219.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.9" y="1230.0"></text>
</g>
<g>
<title>jni_GetObjectClass (1 samples, 0.04%)</title><rect x="329.3" y="1203.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="332.3" y="1214.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.07%)</title><rect x="329.7" y="1219.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (2 samples, 0.07%)</title><rect x="329.7" y="1203.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newArray (2 samples, 0.07%)</title><rect x="329.7" y="1187.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.7" y="1198.0"></text>
</g>
<g>
<title>Java_java_lang_reflect_Array_newArray (1 samples, 0.04%)</title><rect x="329.7" y="1171.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="332.7" y="1182.0"></text>
</g>
<g>
<title>JvmtiEventCollector::unset_jvmti_thread_state() (1 samples, 0.04%)</title><rect x="330.2" y="1171.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="333.2" y="1182.0"></text>
</g>
<g>
<title>java/util/logging/Logger.accessCheckedHandlers (2 samples, 0.07%)</title><rect x="330.6" y="1267.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.toArray (2 samples, 0.07%)</title><rect x="330.6" y="1251.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.6" y="1262.0"></text>
</g>
<g>
<title>java/util/logging/Logger.getParent (1 samples, 0.04%)</title><rect x="331.5" y="1283.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.5" y="1294.0"></text>
</g>
<g>
<title>java/util/logging/Logger.isLoggable (1 samples, 0.04%)</title><rect x="331.9" y="1315.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.9" y="1326.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (15 samples, 0.56%)</title><rect x="332.4" y="1331.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="335.4" y="1342.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 0.48%)</title><rect x="332.4" y="1315.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="335.4" y="1326.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.15%)</title><rect x="332.4" y="1299.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.4" y="1310.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.11%)</title><rect x="332.8" y="1283.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.8" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.07%)</title><rect x="333.3" y="1267.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.3" y="1278.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.07%)</title><rect x="333.3" y="1251.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="333.7" y="1235.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.7" y="1246.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.33%)</title><rect x="334.1" y="1299.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="337.1" y="1310.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.33%)</title><rect x="334.1" y="1283.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.1" y="1294.0"></text>
</g>
<g>
<title>java/net/SocketException.&lt;init&gt; (9 samples, 0.33%)</title><rect x="334.1" y="1267.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.1" y="1278.0"></text>
</g>
<g>
<title>java/io/IOException.&lt;init&gt; (9 samples, 0.33%)</title><rect x="334.1" y="1251.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (9 samples, 0.33%)</title><rect x="334.1" y="1235.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (9 samples, 0.33%)</title><rect x="334.1" y="1219.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (9 samples, 0.33%)</title><rect x="334.1" y="1203.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (9 samples, 0.33%)</title><rect x="334.1" y="1187.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="337.1" y="1198.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (9 samples, 0.33%)</title><rect x="334.1" y="1171.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="337.1" y="1182.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (9 samples, 0.33%)</title><rect x="334.1" y="1155.0" width="4.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="337.1" y="1166.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (9 samples, 0.33%)</title><rect x="334.1" y="1139.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="337.1" y="1150.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (1 samples, 0.04%)</title><rect x="334.1" y="1123.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="337.1" y="1134.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (8 samples, 0.30%)</title><rect x="334.6" y="1123.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="337.6" y="1134.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (2 samples, 0.07%)</title><rect x="336.8" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="339.8" y="1118.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (2 samples, 0.07%)</title><rect x="336.8" y="1091.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="339.8" y="1102.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (1 samples, 0.04%)</title><rect x="336.8" y="1075.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="339.8" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="336.8" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="339.8" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="336.8" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="339.8" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.04%)</title><rect x="336.8" y="1027.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="339.8" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="337.2" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="340.2" y="1086.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.04%)</title><rect x="337.6" y="1107.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="340.6" y="1118.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.04%)</title><rect x="337.6" y="1091.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="340.6" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.04%)</title><rect x="338.1" y="1315.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.1" y="1326.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (1 samples, 0.04%)</title><rect x="338.5" y="1315.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.5" y="1326.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.04%)</title><rect x="338.5" y="1299.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.5" y="1310.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (22 samples, 0.82%)</title><rect x="338.9" y="1331.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.9" y="1342.0"></text>
</g>
<g>
<title>InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*) (1 samples, 0.04%)</title><rect x="339.8" y="1315.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="342.8" y="1326.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.04%)</title><rect x="340.3" y="1315.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="343.3" y="1326.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="340.3" y="1299.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="343.3" y="1310.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="340.3" y="1283.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="343.3" y="1294.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.04%)</title><rect x="340.3" y="1267.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="343.3" y="1278.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="340.3" y="1251.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="343.3" y="1262.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="340.3" y="1235.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.3" y="1246.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="340.3" y="1219.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="343.3" y="1230.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="340.3" y="1203.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="343.3" y="1214.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (17 samples, 0.63%)</title><rect x="340.7" y="1315.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.7" y="1326.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.15%)</title><rect x="340.7" y="1299.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="343.7" y="1310.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.07%)</title><rect x="341.6" y="1283.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.6" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.48%)</title><rect x="342.4" y="1299.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="345.4" y="1310.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.48%)</title><rect x="342.4" y="1283.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.4" y="1294.0"></text>
</g>
<g>
<title>java/net/SocketException.&lt;init&gt; (13 samples, 0.48%)</title><rect x="342.4" y="1267.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.4" y="1278.0"></text>
</g>
<g>
<title>java/io/IOException.&lt;init&gt; (13 samples, 0.48%)</title><rect x="342.4" y="1251.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="345.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (13 samples, 0.48%)</title><rect x="342.4" y="1235.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (13 samples, 0.48%)</title><rect x="342.4" y="1219.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="345.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (13 samples, 0.48%)</title><rect x="342.4" y="1203.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="345.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (11 samples, 0.41%)</title><rect x="343.3" y="1187.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.3" y="1198.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (10 samples, 0.37%)</title><rect x="343.3" y="1171.0" width="4.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="346.3" y="1182.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (9 samples, 0.33%)</title><rect x="343.8" y="1155.0" width="3.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="346.8" y="1166.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (9 samples, 0.33%)</title><rect x="343.8" y="1139.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="346.8" y="1150.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="343.8" y="1123.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="346.8" y="1134.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (8 samples, 0.30%)</title><rect x="344.2" y="1123.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="347.2" y="1134.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (3 samples, 0.11%)</title><rect x="345.1" y="1107.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="348.1" y="1118.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (3 samples, 0.11%)</title><rect x="345.1" y="1091.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="348.1" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="345.5" y="1075.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="348.5" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="345.5" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="348.5" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="345.5" y="1043.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="348.5" y="1054.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="345.5" y="1027.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="348.5" y="1038.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="345.5" y="1011.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="348.5" y="1022.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.04%)</title><rect x="346.0" y="1075.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="349.0" y="1086.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.04%)</title><rect x="346.4" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="349.4" y="1118.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="346.8" y="1107.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="349.8" y="1118.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="346.8" y="1091.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="349.8" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="346.8" y="1075.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="349.8" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="346.8" y="1059.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="349.8" y="1070.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;574518ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.04%)</title><rect x="347.3" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="350.3" y="1118.0"></text>
</g>
<g>
<title>jsqrt (1 samples, 0.04%)</title><rect x="347.7" y="1171.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="350.7" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="348.1" y="1315.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="351.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="348.1" y="1299.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.1" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="348.1" y="1283.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="351.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="348.1" y="1267.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="348.1" y="1251.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.1" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$73/973053507.act (27 samples, 1.00%)</title><rect x="348.6" y="1331.0" width="11.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="351.6" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$entity$0 (26 samples, 0.97%)</title><rect x="349.0" y="1315.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.0" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.get (26 samples, 0.97%)</title><rect x="349.0" y="1299.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="352.0" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*) (1 samples, 0.04%)</title><rect x="349.5" y="1283.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="352.5" y="1294.0"></text>
</g>
<g>
<title>InterpreterRuntime::set_bcp_and_mdp(unsigned char*, JavaThread*) (1 samples, 0.04%)</title><rect x="349.5" y="1267.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="352.5" y="1278.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.11%)</title><rect x="349.9" y="1283.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="352.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.07%)</title><rect x="350.3" y="1267.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.07%)</title><rect x="350.3" y="1251.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="350.8" y="1235.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.8" y="1246.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="350.8" y="1219.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.8" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (21 samples, 0.78%)</title><rect x="351.2" y="1283.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="354.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.11%)</title><rect x="351.2" y="1267.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1987083830.invoke (3 samples, 0.11%)</title><rect x="351.2" y="1251.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.2" y="1262.0"></text>
</g>
<g>
<title>_invokeBasic (1 samples, 0.04%)</title><rect x="351.2" y="1235.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="354.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.04%)</title><rect x="351.6" y="1235.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="354.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$Stringifiers$ObjectStringifier.valueOf (1 samples, 0.04%)</title><rect x="351.6" y="1219.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.toString (1 samples, 0.04%)</title><rect x="351.6" y="1203.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/257895351.invoke (1 samples, 0.04%)</title><rect x="352.1" y="1235.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.04%)</title><rect x="352.1" y="1219.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.04%)</title><rect x="352.1" y="1203.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.04%)</title><rect x="352.1" y="1187.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.1" y="1198.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="352.1" y="1171.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="355.1" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (6 samples, 0.22%)</title><rect x="352.5" y="1267.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="355.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="352.5" y="1251.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="355.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (4 samples, 0.15%)</title><rect x="353.0" y="1251.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.15%)</title><rect x="353.0" y="1235.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="356.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.07%)</title><rect x="353.0" y="1219.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.getCoder (1 samples, 0.04%)</title><rect x="353.0" y="1203.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.04%)</title><rect x="353.4" y="1203.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.4" y="1214.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="353.4" y="1187.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="356.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.07%)</title><rect x="353.8" y="1219.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.07%)</title><rect x="353.8" y="1203.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="356.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.04%)</title><rect x="354.7" y="1251.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="357.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="354.7" y="1235.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="357.7" y="1246.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.30%)</title><rect x="355.2" y="1267.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.2" y="1278.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.30%)</title><rect x="355.2" y="1251.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.2" y="1262.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (7 samples, 0.26%)</title><rect x="355.6" y="1235.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="358.6" y="1246.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.04%)</title><rect x="356.0" y="1219.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="359.0" y="1230.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (5 samples, 0.19%)</title><rect x="356.5" y="1219.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="359.5" y="1230.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.04%)</title><rect x="356.5" y="1203.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="359.5" y="1214.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.04%)</title><rect x="356.5" y="1187.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="359.5" y="1198.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.04%)</title><rect x="356.5" y="1171.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="359.5" y="1182.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.04%)</title><rect x="356.5" y="1155.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="359.5" y="1166.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.15%)</title><rect x="356.9" y="1203.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="359.9" y="1214.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.15%)</title><rect x="356.9" y="1187.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.9" y="1198.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (4 samples, 0.15%)</title><rect x="356.9" y="1171.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="359.9" y="1182.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (4 samples, 0.15%)</title><rect x="356.9" y="1155.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="359.9" y="1166.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.04%)</title><rect x="357.8" y="1139.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="360.8" y="1150.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.04%)</title><rect x="358.2" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="361.2" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (3 samples, 0.11%)</title><rect x="358.7" y="1267.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.7" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (3 samples, 0.11%)</title><rect x="358.7" y="1251.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="361.7" y="1262.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.11%)</title><rect x="358.7" y="1235.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.7" y="1246.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="359.1" y="1219.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="362.1" y="1230.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="359.1" y="1203.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="362.1" y="1214.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="359.1" y="1187.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.04%)</title><rect x="359.1" y="1171.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="362.1" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="359.5" y="1171.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.5" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (1 samples, 0.04%)</title><rect x="360.0" y="1267.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="363.0" y="1278.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (328 samples, 12.18%)</title><rect x="360.4" y="1411.0" width="143.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="363.4" y="1422.0">one/nio/server/Acc..</text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.isOpen (1 samples, 0.04%)</title><rect x="361.3" y="1395.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.3" y="1406.0"></text>
</g>
<g>
<title>one/nio/net/Socket.acceptNonBlocking (308 samples, 11.43%)</title><rect x="361.7" y="1395.0" width="134.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.7" y="1406.0">one/nio/net/Socke..</text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (300 samples, 11.14%)</title><rect x="362.2" y="1379.0" width="131.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="365.2" y="1390.0">one/nio/net/Java..</text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (300 samples, 11.14%)</title><rect x="362.2" y="1363.0" width="131.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.2" y="1374.0">one/nio/net/Java..</text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (299 samples, 11.10%)</title><rect x="362.6" y="1347.0" width="131.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="365.6" y="1358.0">sun/nio/ch/Serve..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.04%)</title><rect x="364.4" y="1331.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.04%)</title><rect x="364.4" y="1315.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.04%)</title><rect x="364.4" y="1299.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.04%)</title><rect x="364.4" y="1283.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="364.4" y="1267.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.07%)</title><rect x="364.8" y="1331.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.07%)</title><rect x="364.8" y="1315.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="367.8" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (2 samples, 0.07%)</title><rect x="365.7" y="1331.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.7" y="1342.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_configureBlocking (2 samples, 0.07%)</title><rect x="365.7" y="1315.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="368.7" y="1326.0"></text>
</g>
<g>
<title>configureBlocking (2 samples, 0.07%)</title><rect x="365.7" y="1299.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="368.7" y="1310.0"></text>
</g>
<g>
<title>__fcntl (2 samples, 0.07%)</title><rect x="365.7" y="1283.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="368.7" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (268 samples, 9.95%)</title><rect x="366.5" y="1331.0" width="117.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.5" y="1342.0">sun/nio/ch/Ser..</text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept0 (268 samples, 9.95%)</title><rect x="366.5" y="1315.0" width="117.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.5" y="1326.0">sun/nio/ch/Ser..</text>
</g>
<g>
<title>Java_sun_nio_ch_ServerSocketChannelImpl_accept0 (17 samples, 0.63%)</title><rect x="367.0" y="1299.0" width="7.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="370.0" y="1310.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (12 samples, 0.45%)</title><rect x="367.9" y="1283.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="370.9" y="1294.0"></text>
</g>
<g>
<title>jni_NewObject (9 samples, 0.33%)</title><rect x="367.9" y="1267.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="370.9" y="1278.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="368.3" y="1251.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="371.3" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.07%)</title><rect x="368.7" y="1251.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="371.7" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.07%)</title><rect x="368.7" y="1235.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="371.7" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="368.7" y="1219.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="371.7" y="1230.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.07%)</title><rect x="368.7" y="1203.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="371.7" y="1214.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="368.7" y="1187.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="371.7" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.04%)</title><rect x="369.6" y="1251.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="372.6" y="1262.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.04%)</title><rect x="370.0" y="1251.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="373.0" y="1262.0"></text>
</g>
<g>
<title>alloc_object(_jclass*, Thread*) (1 samples, 0.04%)</title><rect x="370.5" y="1251.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="373.5" y="1262.0"></text>
</g>
<g>
<title>java_lang_Class::as_Klass(oopDesc*) (1 samples, 0.04%)</title><rect x="370.5" y="1235.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="373.5" y="1246.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (2 samples, 0.07%)</title><rect x="370.9" y="1251.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="373.9" y="1262.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.07%)</title><rect x="370.9" y="1235.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="373.9" y="1246.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.07%)</title><rect x="370.9" y="1219.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="373.9" y="1230.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.04%)</title><rect x="371.4" y="1203.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="374.4" y="1214.0"></text>
</g>
<g>
<title>setInet6Address_ipaddress (2 samples, 0.07%)</title><rect x="371.8" y="1267.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="374.8" y="1278.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.04%)</title><rect x="371.8" y="1251.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="374.8" y="1262.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.04%)</title><rect x="372.2" y="1251.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="375.2" y="1262.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.04%)</title><rect x="372.2" y="1235.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="375.2" y="1246.0"></text>
</g>
<g>
<title>setInet6Address_scopeid (1 samples, 0.04%)</title><rect x="372.7" y="1267.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="375.7" y="1278.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.04%)</title><rect x="372.7" y="1251.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="375.7" y="1262.0"></text>
</g>
<g>
<title>EnableIf&lt;AccessInternal::MustConvertCompressedOop&lt;802934ull, oopDesc*&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;802934ull&gt;::decode_internal&lt;802934ull, oopDesc*&gt;(HeapOopType&lt;802934ull&gt;::type) (1 samples, 0.04%)</title><rect x="372.7" y="1235.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="375.7" y="1246.0"></text>
</g>
<g>
<title>jni_NewObject (3 samples, 0.11%)</title><rect x="373.1" y="1283.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="376.1" y="1294.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (2 samples, 0.07%)</title><rect x="373.5" y="1267.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="376.5" y="1278.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.04%)</title><rect x="373.5" y="1251.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="376.5" y="1262.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (1 samples, 0.04%)</title><rect x="374.0" y="1251.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="377.0" y="1262.0"></text>
</g>
<g>
<title>__accept (245 samples, 9.09%)</title><rect x="374.4" y="1299.0" width="107.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="377.4" y="1310.0">__accept</text>
</g>
<g>
<title>java/net/Inet6Address.&lt;init&gt; (2 samples, 0.07%)</title><rect x="481.7" y="1299.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.7" y="1310.0"></text>
</g>
<g>
<title>java/net/InetAddress.&lt;init&gt; (1 samples, 0.04%)</title><rect x="482.2" y="1283.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="485.2" y="1294.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (1 samples, 0.04%)</title><rect x="482.6" y="1299.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="485.6" y="1310.0"></text>
</g>
<g>
<title>jni_SetIntField (1 samples, 0.04%)</title><rect x="483.1" y="1299.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="486.1" y="1310.0"></text>
</g>
<g>
<title>jni_SetObjectArrayElement (1 samples, 0.04%)</title><rect x="483.5" y="1299.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="486.5" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.begin (4 samples, 0.15%)</title><rect x="483.9" y="1331.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="486.9" y="1342.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.07%)</title><rect x="484.8" y="1315.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="487.8" y="1326.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="485.2" y="1299.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="488.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="485.2" y="1283.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.2" y="1294.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.04%)</title><rect x="485.2" y="1267.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="488.2" y="1278.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="485.2" y="1251.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="488.2" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.end (1 samples, 0.04%)</title><rect x="485.7" y="1331.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.7" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.&lt;init&gt; (17 samples, 0.63%)</title><rect x="486.1" y="1331.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="489.1" y="1342.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.&lt;init&gt; (1 samples, 0.04%)</title><rect x="486.6" y="1315.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.6" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localAddress (15 samples, 0.56%)</title><rect x="487.0" y="1315.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="490.0" y="1326.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (1 samples, 0.04%)</title><rect x="487.4" y="1299.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.4" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localInetAddress (12 samples, 0.45%)</title><rect x="487.9" y="1299.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="490.9" y="1310.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_Net_localInetAddress (7 samples, 0.26%)</title><rect x="487.9" y="1283.0" width="3.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="490.9" y="1294.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (7 samples, 0.26%)</title><rect x="487.9" y="1267.0" width="3.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="490.9" y="1278.0"></text>
</g>
<g>
<title>jni_NewObject (5 samples, 0.19%)</title><rect x="487.9" y="1251.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="490.9" y="1262.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.04%)</title><rect x="487.9" y="1235.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="490.9" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="488.3" y="1235.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="491.3" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="488.3" y="1219.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="491.3" y="1230.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="488.3" y="1203.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="491.3" y="1214.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.04%)</title><rect x="488.7" y="1235.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="491.7" y="1246.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="489.2" y="1235.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="492.2" y="1246.0"></text>
</g>
<g>
<title>alloc_object(_jclass*, Thread*) (1 samples, 0.04%)</title><rect x="489.6" y="1235.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="492.6" y="1246.0"></text>
</g>
<g>
<title>jni_SetIntField (1 samples, 0.04%)</title><rect x="490.1" y="1251.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="493.1" y="1262.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="490.1" y="1235.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="493.1" y="1246.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="490.1" y="1219.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="493.1" y="1230.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="490.1" y="1203.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="493.1" y="1214.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="490.1" y="1187.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="493.1" y="1198.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="490.1" y="1171.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="493.1" y="1182.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="490.1" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="493.1" y="1166.0"></text>
</g>
<g>
<title>setInet6Address_ipaddress (1 samples, 0.04%)</title><rect x="490.5" y="1251.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="493.5" y="1262.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.04%)</title><rect x="490.5" y="1235.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="493.5" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="490.5" y="1219.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="493.5" y="1230.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="490.5" y="1203.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="493.5" y="1214.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="490.5" y="1187.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="493.5" y="1198.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="490.5" y="1171.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="493.5" y="1182.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="490.5" y="1155.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="493.5" y="1166.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (1 samples, 0.04%)</title><rect x="490.9" y="1283.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="493.9" y="1294.0"></text>
</g>
<g>
<title>__getsockname (3 samples, 0.11%)</title><rect x="491.4" y="1283.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="494.4" y="1294.0"></text>
</g>
<g>
<title>java/net/Inet6Address.&lt;init&gt; (1 samples, 0.04%)</title><rect x="492.7" y="1283.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.7" y="1294.0"></text>
</g>
<g>
<title>java/net/InetAddress.&lt;init&gt; (1 samples, 0.04%)</title><rect x="492.7" y="1267.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.7" y="1278.0"></text>
</g>
<g>
<title>java/net/InetAddress$InetAddressHolder.&lt;init&gt; (1 samples, 0.04%)</title><rect x="492.7" y="1251.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="495.7" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localPort (1 samples, 0.04%)</title><rect x="493.1" y="1299.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="496.1" y="1310.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setBlocking (7 samples, 0.26%)</title><rect x="493.6" y="1379.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.6" y="1390.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.configureBlocking (7 samples, 0.26%)</title><rect x="493.6" y="1363.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.6" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implConfigureBlocking (7 samples, 0.26%)</title><rect x="493.6" y="1347.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.04%)</title><rect x="494.0" y="1331.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="497.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.04%)</title><rect x="494.0" y="1315.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="497.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.04%)</title><rect x="494.0" y="1299.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="497.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.04%)</title><rect x="494.0" y="1283.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.0" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (5 samples, 0.19%)</title><rect x="494.4" y="1331.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.4" y="1342.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_configureBlocking (5 samples, 0.19%)</title><rect x="494.4" y="1315.0" width="2.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="497.4" y="1326.0"></text>
</g>
<g>
<title>__fcntl (4 samples, 0.15%)</title><rect x="494.4" y="1299.0" width="1.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="497.4" y="1310.0"></text>
</g>
<g>
<title>configureBlocking (1 samples, 0.04%)</title><rect x="496.2" y="1299.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="499.2" y="1310.0"></text>
</g>
<g>
<title>fcntl (1 samples, 0.04%)</title><rect x="496.2" y="1283.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="499.2" y="1294.0"></text>
</g>
<g>
<title>one/nio/server/Server.register (13 samples, 0.48%)</title><rect x="496.6" y="1395.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.6" y="1406.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.register (10 samples, 0.37%)</title><rect x="496.6" y="1379.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="499.6" y="1390.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.enable (10 samples, 0.37%)</title><rect x="496.6" y="1363.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.6" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (2 samples, 0.07%)</title><rect x="496.6" y="1347.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (2 samples, 0.07%)</title><rect x="496.6" y="1331.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.6" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.&lt;init&gt; (1 samples, 0.04%)</title><rect x="497.1" y="1315.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="497.1" y="1299.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.1" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.04%)</title><rect x="497.1" y="1283.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.1" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putReference (1 samples, 0.04%)</title><rect x="497.1" y="1267.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.1" y="1278.0"></text>
</g>
<g>
<title>Unsafe_PutReference(JNIEnv_*, _jobject*, _jobject*, long, _jobject*) (1 samples, 0.04%)</title><rect x="497.1" y="1251.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="500.1" y="1262.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ull, false&gt;(_jobject*) (1 samples, 0.04%)</title><rect x="497.1" y="1235.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="500.1" y="1246.0"></text>
</g>
<g>
<title>AccessInternal::OopLoadProxy&lt;oopDesc*, 1048576ull&gt; Access&lt;1048576ull&gt;::oop_load&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="497.1" y="1219.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="500.1" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (8 samples, 0.30%)</title><rect x="497.5" y="1347.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.5" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (7 samples, 0.26%)</title><rect x="497.9" y="1331.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="500.9" y="1342.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="497.9" y="1315.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="500.9" y="1326.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="497.9" y="1299.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="500.9" y="1310.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="497.9" y="1283.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="500.9" y="1294.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="497.9" y="1267.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="500.9" y="1278.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.04%)</title><rect x="497.9" y="1251.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="500.9" y="1262.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.04%)</title><rect x="497.9" y="1235.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="500.9" y="1246.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="497.9" y="1219.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="500.9" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.04%)</title><rect x="497.9" y="1203.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="500.9" y="1214.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.04%)</title><rect x="497.9" y="1187.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="500.9" y="1198.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="497.9" y="1171.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="500.9" y="1182.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.04%)</title><rect x="497.9" y="1155.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="500.9" y="1166.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.04%)</title><rect x="497.9" y="1139.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="500.9" y="1150.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="497.9" y="1123.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="500.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.9" y="1107.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="500.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.9" y="1091.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="500.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.9" y="1075.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="500.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.9" y="1059.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="500.9" y="1070.0"></text>
</g>
<g>
<title>write (6 samples, 0.22%)</title><rect x="498.4" y="1315.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="501.4" y="1326.0"></text>
</g>
<g>
<title>one/nio/server/Server.getSmallestSelector (3 samples, 0.11%)</title><rect x="501.0" y="1379.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextInt (1 samples, 0.04%)</title><rect x="501.4" y="1363.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.4" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSeed (1 samples, 0.04%)</title><rect x="501.4" y="1347.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="504.4" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putLong (1 samples, 0.04%)</title><rect x="501.4" y="1331.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="504.4" y="1342.0"></text>
</g>
<g>
<title>Unsafe_PutLong(JNIEnv_*, _jobject*, _jobject*, long, long) (1 samples, 0.04%)</title><rect x="501.4" y="1315.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="504.4" y="1326.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="501.4" y="1299.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="504.4" y="1310.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="501.4" y="1283.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="504.4" y="1294.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="501.4" y="1267.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="504.4" y="1278.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="501.4" y="1251.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="504.4" y="1262.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="501.4" y="1235.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="504.4" y="1246.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="501.4" y="1219.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="504.4" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.size (1 samples, 0.04%)</title><rect x="501.9" y="1363.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.9" y="1374.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.createSession (4 samples, 0.15%)</title><rect x="502.3" y="1395.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="505.3" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.createSession (4 samples, 0.15%)</title><rect x="502.3" y="1379.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="505.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="502.3" y="1363.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.3" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="502.3" y="1347.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="505.3" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="502.3" y="1331.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="505.3" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="502.3" y="1315.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.3" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="502.3" y="1299.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="505.3" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.04%)</title><rect x="502.3" y="1283.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="505.3" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getLoader (1 samples, 0.04%)</title><rect x="502.3" y="1267.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.3" y="1278.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.04%)</title><rect x="502.3" y="1251.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="505.3" y="1262.0"></text>
</g>
<g>
<title>java/util/Objects.checkIndex (1 samples, 0.04%)</title><rect x="502.3" y="1235.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.3" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/util/Preconditions.checkIndex (1 samples, 0.04%)</title><rect x="502.3" y="1219.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.3" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/StorageSession.&lt;init&gt; (3 samples, 0.11%)</title><rect x="502.8" y="1363.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="505.8" y="1374.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.&lt;init&gt; (3 samples, 0.11%)</title><rect x="502.8" y="1347.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="505.8" y="1358.0"></text>
</g>
<g>
<title>one/nio/net/Session.&lt;init&gt; (3 samples, 0.11%)</title><rect x="502.8" y="1331.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.8" y="1342.0"></text>
</g>
<g>
<title>one/nio/net/Session.&lt;init&gt; (3 samples, 0.11%)</title><rect x="502.8" y="1315.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.8" y="1326.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.07%)</title><rect x="503.2" y="1299.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="506.2" y="1310.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.07%)</title><rect x="503.2" y="1283.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="506.2" y="1294.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.07%)</title><rect x="503.2" y="1267.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="506.2" y="1278.0"></text>
</g>
<g>
<title>_res (1 samples, 0.04%)</title><rect x="503.6" y="1251.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="506.6" y="1262.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (499 samples, 18.52%)</title><rect x="504.1" y="1411.0" width="218.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.1" y="1422.0">one/nio/server/SelectorThread..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="505.4" y="1395.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.4" y="1406.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (261 samples, 9.69%)</title><rect x="505.8" y="1395.0" width="114.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.8" y="1406.0">one/nio/net/Ja..</text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.04%)</title><rect x="506.7" y="1379.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="509.7" y="1390.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (11 samples, 0.41%)</title><rect x="507.1" y="1379.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="510.1" y="1390.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.04%)</title><rect x="508.0" y="1363.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="511.0" y="1374.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="508.5" y="1363.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="511.5" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="508.5" y="1347.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="511.5" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="508.5" y="1331.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="511.5" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="508.5" y="1315.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.5" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="508.5" y="1299.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="511.5" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="508.5" y="1283.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="511.5" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.07%)</title><rect x="508.9" y="1363.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="511.9" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.04%)</title><rect x="509.3" y="1347.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="512.3" y="1358.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.&lt;init&gt; (1 samples, 0.04%)</title><rect x="509.8" y="1363.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="512.8" y="1374.0"></text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.04%)</title><rect x="509.8" y="1347.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="512.8" y="1358.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="509.8" y="1331.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="512.8" y="1342.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="509.8" y="1315.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="512.8" y="1326.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="509.8" y="1299.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="512.8" y="1310.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="509.8" y="1283.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="512.8" y="1294.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="509.8" y="1267.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="512.8" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.readyOps (1 samples, 0.04%)</title><rect x="510.2" y="1363.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="513.2" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.07%)</title><rect x="510.6" y="1363.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="513.6" y="1374.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.04%)</title><rect x="511.1" y="1347.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="514.1" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.04%)</title><rect x="511.1" y="1331.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="514.1" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.size (1 samples, 0.04%)</title><rect x="511.5" y="1363.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.5" y="1374.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (15 samples, 0.56%)</title><rect x="512.0" y="1379.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.0" y="1390.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.register (13 samples, 0.48%)</title><rect x="512.4" y="1363.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.4" y="1374.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="512.8" y="1347.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.8" y="1358.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.addKey (1 samples, 0.04%)</title><rect x="513.3" y="1347.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="516.3" y="1358.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.findKey (1 samples, 0.04%)</title><rect x="513.7" y="1347.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.7" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.register (9 samples, 0.33%)</title><rect x="514.1" y="1347.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="517.1" y="1358.0"></text>
</g>
<g>
<title>java/nio/channels/SelectionKey.attach (3 samples, 0.11%)</title><rect x="514.1" y="1331.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="517.1" y="1342.0"></text>
</g>
<g>
<title>InterpreterRuntime::at_safepoint(JavaThread*) (1 samples, 0.04%)</title><rect x="514.1" y="1315.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="517.1" y="1326.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.04%)</title><rect x="514.1" y="1299.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="517.1" y="1310.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="514.1" y="1283.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="517.1" y="1294.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="514.1" y="1267.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="517.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet (2 samples, 0.07%)</title><rect x="514.6" y="1315.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="517.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.accessCheck (1 samples, 0.04%)</title><rect x="514.6" y="1299.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="517.6" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="514.6" y="1283.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="517.6" y="1294.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="514.6" y="1267.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="517.6" y="1278.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="514.6" y="1251.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="517.6" y="1262.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="514.6" y="1235.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="517.6" y="1246.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.04%)</title><rect x="514.6" y="1219.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="517.6" y="1230.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.04%)</title><rect x="514.6" y="1203.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="517.6" y="1214.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.04%)</title><rect x="514.6" y="1187.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="517.6" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="514.6" y="1171.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="517.6" y="1182.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="514.6" y="1155.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="517.6" y="1166.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="514.6" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="517.6" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="514.6" y="1123.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="517.6" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndSetReference (1 samples, 0.04%)</title><rect x="515.0" y="1299.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="518.0" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.weakCompareAndSetReference (1 samples, 0.04%)</title><rect x="515.0" y="1283.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="518.0" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.compareAndSetReference (1 samples, 0.04%)</title><rect x="515.0" y="1267.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="518.0" y="1278.0"></text>
</g>
<g>
<title>Unsafe_CompareAndSetReference(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, _jobject*) (1 samples, 0.04%)</title><rect x="515.0" y="1251.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="518.0" y="1262.0"></text>
</g>
<g>
<title>G1BarrierSet* barrier_set_cast&lt;G1BarrierSet&gt;(BarrierSet*) (1 samples, 0.04%)</title><rect x="515.0" y="1235.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="518.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.add (2 samples, 0.07%)</title><rect x="515.5" y="1331.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="518.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (2 samples, 0.07%)</title><rect x="515.5" y="1315.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="518.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (1 samples, 0.04%)</title><rect x="515.9" y="1299.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="518.9" y="1310.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.04%)</title><rect x="515.9" y="1283.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="518.9" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (3 samples, 0.11%)</title><rect x="516.3" y="1331.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_I (1 samples, 0.04%)</title><rect x="516.8" y="1315.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.8" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.channel (1 samples, 0.04%)</title><rect x="517.2" y="1315.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="520.2" y="1326.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="517.2" y="1299.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="520.2" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="517.2" y="1283.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="520.2" y="1294.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="517.2" y="1267.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="520.2" y="1278.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="517.2" y="1251.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="520.2" y="1262.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::create_mdo(methodHandle const&amp;, JavaThread*) (1 samples, 0.04%)</title><rect x="517.2" y="1235.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="520.2" y="1246.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="517.2" y="1219.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="520.2" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="517.2" y="1203.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="520.2" y="1214.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="517.2" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="520.2" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="517.2" y="1171.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="520.2" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="517.2" y="1155.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="520.2" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.implRegister (1 samples, 0.04%)</title><rect x="517.7" y="1331.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="520.7" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.04%)</title><rect x="517.7" y="1315.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="520.7" y="1326.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.04%)</title><rect x="517.7" y="1299.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="520.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.04%)</title><rect x="518.1" y="1363.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="521.1" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (231 samples, 8.57%)</title><rect x="518.5" y="1379.0" width="101.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="521.5" y="1390.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (230 samples, 8.54%)</title><rect x="519.0" y="1363.0" width="100.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="522.0" y="1374.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (229 samples, 8.50%)</title><rect x="519.4" y="1347.0" width="100.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="522.4" y="1358.0">sun/nio/ch/K..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (176 samples, 6.53%)</title><rect x="520.3" y="1331.0" width="77.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.3" y="1342.0">sun/nio/c..</text>
</g>
<g>
<title>kevent (175 samples, 6.50%)</title><rect x="520.7" y="1315.0" width="76.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="523.7" y="1326.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (10 samples, 0.37%)</title><rect x="597.4" y="1331.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="600.4" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="597.8" y="1315.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="600.8" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="597.8" y="1299.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="600.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.04%)</title><rect x="597.8" y="1283.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="600.8" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.clearInterrupt (5 samples, 0.19%)</title><rect x="598.2" y="1315.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="601.2" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (5 samples, 0.19%)</title><rect x="598.2" y="1299.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="601.2" y="1310.0"></text>
</g>
<g>
<title>read (5 samples, 0.19%)</title><rect x="598.2" y="1283.0" width="2.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="601.2" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.11%)</title><rect x="600.4" y="1315.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="603.4" y="1326.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.04%)</title><rect x="600.4" y="1299.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.4" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.04%)</title><rect x="600.4" y="1283.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.4" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="600.4" y="1267.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.4" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.07%)</title><rect x="600.9" y="1299.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.9" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.04%)</title><rect x="601.3" y="1283.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="604.3" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (1 samples, 0.04%)</title><rect x="601.3" y="1267.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="604.3" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (1 samples, 0.04%)</title><rect x="601.3" y="1251.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.3" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (8 samples, 0.30%)</title><rect x="601.8" y="1331.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="604.8" y="1342.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.04%)</title><rect x="602.2" y="1315.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.2" y="1326.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (1 samples, 0.04%)</title><rect x="602.2" y="1299.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.2" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.putIfAbsent (2 samples, 0.07%)</title><rect x="602.6" y="1315.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="605.6" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.04%)</title><rect x="603.1" y="1299.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="606.1" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.register (4 samples, 0.15%)</title><rect x="603.5" y="1315.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.5" y="1326.0"></text>
</g>
<g>
<title>kevent (4 samples, 0.15%)</title><rect x="603.5" y="1299.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="606.5" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.15%)</title><rect x="605.3" y="1331.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="608.3" y="1342.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.15%)</title><rect x="605.3" y="1315.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="608.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/Thread.currentThread (1 samples, 0.04%)</title><rect x="605.3" y="1299.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="608.3" y="1310.0"></text>
</g>
<g>
<title>JVM_CurrentThread (1 samples, 0.04%)</title><rect x="605.3" y="1283.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="608.3" y="1294.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="605.3" y="1267.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="608.3" y="1278.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="605.3" y="1251.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="608.3" y="1262.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="605.3" y="1235.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="608.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="605.7" y="1299.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="608.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="605.7" y="1283.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="608.7" y="1294.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.07%)</title><rect x="606.1" y="1299.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.1" y="1310.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="606.1" y="1283.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="606.1" y="1267.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="609.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.currentThread (1 samples, 0.04%)</title><rect x="606.1" y="1251.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="609.1" y="1262.0"></text>
</g>
<g>
<title>JVM_CurrentThread (1 samples, 0.04%)</title><rect x="606.1" y="1235.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="609.1" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="606.1" y="1219.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="609.1" y="1230.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="606.1" y="1203.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="609.1" y="1214.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="606.1" y="1187.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="609.1" y="1198.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="606.1" y="1171.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="609.1" y="1182.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="606.1" y="1155.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="609.1" y="1166.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="606.1" y="1139.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="609.1" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/access/SharedSecrets.getJavaLangAccess (1 samples, 0.04%)</title><rect x="606.6" y="1283.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.6" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (29 samples, 1.08%)</title><rect x="607.0" y="1331.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="610.0" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.remove (3 samples, 0.11%)</title><rect x="608.8" y="1315.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="611.8" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.04%)</title><rect x="609.6" y="1299.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.6" y="1310.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.04%)</title><rect x="610.1" y="1315.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="613.1" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.04%)</title><rect x="610.1" y="1299.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="613.1" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.implDereg (7 samples, 0.26%)</title><rect x="610.5" y="1315.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="613.5" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.04%)</title><rect x="611.0" y="1299.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="614.0" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="611.0" y="1283.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="614.0" y="1294.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="611.0" y="1267.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="614.0" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.register (5 samples, 0.19%)</title><rect x="611.4" y="1299.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="614.4" y="1310.0"></text>
</g>
<g>
<title>kevent (5 samples, 0.19%)</title><rect x="611.4" y="1283.0" width="2.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="614.4" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.kill (14 samples, 0.52%)</title><rect x="613.6" y="1315.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="616.6" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.close (13 samples, 0.48%)</title><rect x="614.0" y="1299.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.0" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.close0 (11 samples, 0.41%)</title><rect x="614.9" y="1283.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.9" y="1294.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (10 samples, 0.37%)</title><rect x="615.3" y="1267.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="618.3" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.04%)</title><rect x="619.7" y="1379.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="622.7" y="1390.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (234 samples, 8.69%)</title><rect x="620.1" y="1395.0" width="102.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.1" y="1406.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (233 samples, 8.65%)</title><rect x="620.6" y="1379.0" width="102.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="623.6" y="1390.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (215 samples, 7.98%)</title><rect x="620.6" y="1363.0" width="94.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="623.6" y="1374.0">one/nio/htt..</text>
</g>
<g>
<title>InterpreterRuntime::at_safepoint(JavaThread*) (1 samples, 0.04%)</title><rect x="620.6" y="1347.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="623.6" y="1358.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.04%)</title><rect x="620.6" y="1331.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="623.6" y="1342.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="620.6" y="1315.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="623.6" y="1326.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="620.6" y="1299.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.6" y="1310.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="620.6" y="1283.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.6" y="1294.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="620.6" y="1267.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="623.6" y="1278.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="620.6" y="1251.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="623.6" y="1262.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (212 samples, 7.87%)</title><rect x="621.0" y="1347.0" width="92.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="624.0" y="1358.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (212 samples, 7.87%)</title><rect x="621.0" y="1331.0" width="92.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.0" y="1342.0">one/nio/htt..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="621.0" y="1315.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="624.0" y="1326.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.04%)</title><rect x="621.5" y="1315.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="624.5" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.handleDefault (210 samples, 7.80%)</title><rect x="621.9" y="1315.0" width="92.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="624.9" y="1326.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (210 samples, 7.80%)</title><rect x="621.9" y="1299.0" width="92.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="624.9" y="1310.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="622.8" y="1283.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="625.8" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="622.8" y="1267.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.8" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="622.8" y="1251.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="625.8" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="622.8" y="1235.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="625.8" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="622.8" y="1219.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="625.8" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="622.8" y="1203.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="625.8" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (1 samples, 0.04%)</title><rect x="622.8" y="1187.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.8" y="1198.0"></text>
</g>
<g>
<title>java/io/FileInputStream.read (1 samples, 0.04%)</title><rect x="622.8" y="1171.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="625.8" y="1182.0"></text>
</g>
<g>
<title>java/io/FileInputStream.readBytes (1 samples, 0.04%)</title><rect x="622.8" y="1155.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="625.8" y="1166.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.04%)</title><rect x="622.8" y="1139.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="625.8" y="1150.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.04%)</title><rect x="622.8" y="1123.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="625.8" y="1134.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.04%)</title><rect x="622.8" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="625.8" y="1118.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="622.8" y="1091.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="625.8" y="1102.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="622.8" y="1075.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="625.8" y="1086.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="622.8" y="1059.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="625.8" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="622.8" y="1043.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="625.8" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="622.8" y="1027.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="625.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.15%)</title><rect x="623.2" y="1283.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.04%)</title><rect x="624.5" y="1267.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="627.5" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="625.0" y="1283.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="628.0" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="625.0" y="1267.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="628.0" y="1278.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="625.0" y="1251.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="628.0" y="1262.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.04%)</title><rect x="625.0" y="1235.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="628.0" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.04%)</title><rect x="625.0" y="1219.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="628.0" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.04%)</title><rect x="625.0" y="1203.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="628.0" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.04%)</title><rect x="625.0" y="1187.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="628.0" y="1198.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.04%)</title><rect x="625.0" y="1171.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="628.0" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="625.4" y="1283.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="628.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="625.4" y="1267.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.4" y="1278.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.04%)</title><rect x="625.8" y="1283.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="628.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="625.8" y="1267.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="625.8" y="1251.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="628.8" y="1262.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="625.8" y="1235.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="628.8" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/Node.getNodes (6 samples, 0.22%)</title><rect x="626.3" y="1283.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="629.3" y="1294.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (5 samples, 0.19%)</title><rect x="626.7" y="1267.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="629.7" y="1278.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (4 samples, 0.15%)</title><rect x="626.7" y="1251.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="629.7" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.04%)</title><rect x="627.2" y="1235.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="630.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.07%)</title><rect x="627.6" y="1235.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.6" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.07%)</title><rect x="627.6" y="1219.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="630.6" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.07%)</title><rect x="627.6" y="1203.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.6" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (2 samples, 0.07%)</title><rect x="627.6" y="1187.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="630.6" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="628.5" y="1251.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="631.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="628.5" y="1235.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="631.5" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/RF.calculateRF (186 samples, 6.90%)</title><rect x="628.9" y="1283.0" width="81.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="631.9" y="1294.0">ru/mail/p..</text>
</g>
<g>
<title>InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*) (1 samples, 0.04%)</title><rect x="628.9" y="1267.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="631.9" y="1278.0"></text>
</g>
<g>
<title>Method::fast_exception_handler_bci_for(methodHandle const&amp;, Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="628.9" y="1251.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="631.9" y="1262.0"></text>
</g>
<g>
<title>ExceptionTable::ExceptionTable(Method const*) (1 samples, 0.04%)</title><rect x="628.9" y="1235.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="631.9" y="1246.0"></text>
</g>
<g>
<title>ConstMethod::exception_table_length_addr() const (1 samples, 0.04%)</title><rect x="628.9" y="1219.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="631.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/IllegalArgumentException.&lt;init&gt; (21 samples, 0.78%)</title><rect x="629.3" y="1267.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (20 samples, 0.74%)</title><rect x="629.8" y="1251.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="632.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (20 samples, 0.74%)</title><rect x="629.8" y="1235.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="632.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (20 samples, 0.74%)</title><rect x="629.8" y="1219.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (19 samples, 0.71%)</title><rect x="630.2" y="1203.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (18 samples, 0.67%)</title><rect x="630.7" y="1187.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="633.7" y="1198.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (17 samples, 0.63%)</title><rect x="631.1" y="1171.0" width="7.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="634.1" y="1182.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (17 samples, 0.63%)</title><rect x="631.1" y="1155.0" width="7.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="634.1" y="1166.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.04%)</title><rect x="631.1" y="1139.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="634.1" y="1150.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (16 samples, 0.59%)</title><rect x="631.5" y="1139.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="634.5" y="1150.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.04%)</title><rect x="631.5" y="1123.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="634.5" y="1134.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="632.0" y="1123.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="635.0" y="1134.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (1 samples, 0.04%)</title><rect x="632.4" y="1123.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="635.4" y="1134.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (1 samples, 0.04%)</title><rect x="632.9" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="635.9" y="1134.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (12 samples, 0.45%)</title><rect x="633.3" y="1123.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="636.3" y="1134.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (4 samples, 0.15%)</title><rect x="634.6" y="1107.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="637.6" y="1118.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (4 samples, 0.15%)</title><rect x="634.6" y="1091.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="637.6" y="1102.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (1 samples, 0.04%)</title><rect x="634.6" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="637.6" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="634.6" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="637.6" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="634.6" y="1043.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="637.6" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.04%)</title><rect x="634.6" y="1027.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="637.6" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.11%)</title><rect x="635.0" y="1075.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="638.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.11%)</title><rect x="635.0" y="1059.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="638.0" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.11%)</title><rect x="635.0" y="1043.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="638.0" y="1054.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.07%)</title><rect x="635.5" y="1027.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="638.5" y="1038.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="635.5" y="1011.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="638.5" y="1022.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (2 samples, 0.07%)</title><rect x="636.4" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="639.4" y="1118.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (1 samples, 0.04%)</title><rect x="636.4" y="1091.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="639.4" y="1102.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="636.8" y="1091.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="639.8" y="1102.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.04%)</title><rect x="636.8" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="639.8" y="1086.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.04%)</title><rect x="636.8" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="639.8" y="1070.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="637.2" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="640.2" y="1118.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="637.2" y="1091.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="640.2" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.04%)</title><rect x="637.2" y="1075.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="640.2" y="1086.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="637.7" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="640.7" y="1118.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.04%)</title><rect x="637.7" y="1091.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="640.7" y="1102.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (1 samples, 0.04%)</title><rect x="638.1" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="641.1" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (147 samples, 5.46%)</title><rect x="638.5" y="1267.0" width="64.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.5" y="1278.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (89 samples, 3.30%)</title><rect x="639.4" y="1251.0" width="39.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="642.4" y="1262.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (89 samples, 3.30%)</title><rect x="639.4" y="1235.0" width="39.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="642.4" y="1246.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (89 samples, 3.30%)</title><rect x="639.4" y="1219.0" width="39.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.4" y="1230.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (88 samples, 3.27%)</title><rect x="639.9" y="1203.0" width="38.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="642.9" y="1214.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (88 samples, 3.27%)</title><rect x="639.9" y="1187.0" width="38.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.9" y="1198.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="639.9" y="1171.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="642.9" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (87 samples, 3.23%)</title><rect x="640.3" y="1171.0" width="38.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="643.3" y="1182.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (87 samples, 3.23%)</title><rect x="640.3" y="1155.0" width="38.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.3" y="1166.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (86 samples, 3.19%)</title><rect x="640.7" y="1139.0" width="37.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.7" y="1150.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.19%)</title><rect x="641.6" y="1123.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="644.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.19%)</title><rect x="641.6" y="1107.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.6" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.19%)</title><rect x="641.6" y="1091.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.6" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.07%)</title><rect x="641.6" y="1075.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.6" y="1086.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (2 samples, 0.07%)</title><rect x="641.6" y="1059.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="644.6" y="1070.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.04%)</title><rect x="641.6" y="1043.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="644.6" y="1054.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.04%)</title><rect x="641.6" y="1027.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="644.6" y="1038.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.04%)</title><rect x="641.6" y="1011.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="644.6" y="1022.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.04%)</title><rect x="641.6" y="995.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="644.6" y="1006.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.04%)</title><rect x="641.6" y="979.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="644.6" y="990.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="642.0" y="1043.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="645.0" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.11%)</title><rect x="642.5" y="1075.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="645.5" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.11%)</title><rect x="642.5" y="1059.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.5" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.04%)</title><rect x="642.5" y="1043.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="645.5" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.07%)</title><rect x="642.9" y="1043.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="645.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.07%)</title><rect x="642.9" y="1027.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (2 samples, 0.07%)</title><rect x="642.9" y="1011.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.9" y="1022.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (2 samples, 0.07%)</title><rect x="642.9" y="995.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="645.9" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="643.4" y="979.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="646.4" y="990.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="643.4" y="963.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="646.4" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (79 samples, 2.93%)</title><rect x="643.8" y="1123.0" width="34.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.8" y="1134.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (79 samples, 2.93%)</title><rect x="643.8" y="1107.0" width="34.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="646.8" y="1118.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (79 samples, 2.93%)</title><rect x="643.8" y="1091.0" width="34.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="646.8" y="1102.0">su..</text>
</g>
<g>
<title>write (79 samples, 2.93%)</title><rect x="643.8" y="1075.0" width="34.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="646.8" y="1086.0">wr..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.04%)</title><rect x="678.4" y="1251.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="681.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="678.4" y="1235.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.04%)</title><rect x="678.4" y="1219.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.04%)</title><rect x="678.4" y="1203.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="681.4" y="1214.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="678.4" y="1187.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="681.4" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (54 samples, 2.00%)</title><rect x="678.8" y="1251.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="681.8" y="1262.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.close (53 samples, 1.97%)</title><rect x="679.3" y="1235.0" width="23.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.3" y="1246.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.unregister (6 samples, 0.22%)</title><rect x="679.3" y="1219.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="682.3" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.disable (5 samples, 0.19%)</title><rect x="679.7" y="1203.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.7" y="1214.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (1 samples, 0.04%)</title><rect x="679.7" y="1187.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.7" y="1198.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.findKey (1 samples, 0.04%)</title><rect x="679.7" y="1171.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="682.7" y="1182.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectionKey.cancel (4 samples, 0.15%)</title><rect x="680.2" y="1187.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.2" y="1198.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancel (3 samples, 0.11%)</title><rect x="680.6" y="1171.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="683.6" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.07%)</title><rect x="681.0" y="1155.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="684.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.07%)</title><rect x="681.0" y="1139.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="684.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.07%)</title><rect x="681.0" y="1123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="684.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (2 samples, 0.07%)</title><rect x="681.0" y="1107.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="684.0" y="1118.0"></text>
</g>
<g>
<title>JVM_IHashCode (2 samples, 0.07%)</title><rect x="681.0" y="1091.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="684.0" y="1102.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (1 samples, 0.04%)</title><rect x="681.0" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="684.0" y="1086.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.04%)</title><rect x="681.5" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="684.5" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.close (47 samples, 1.74%)</title><rect x="681.9" y="1219.0" width="20.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="684.9" y="1230.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.close (47 samples, 1.74%)</title><rect x="681.9" y="1203.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="684.9" y="1214.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.implCloseChannel (46 samples, 1.71%)</title><rect x="682.3" y="1187.0" width="20.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="685.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/Object.clone (2 samples, 0.07%)</title><rect x="682.8" y="1171.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="685.8" y="1182.0"></text>
</g>
<g>
<title>JVM_Clone (1 samples, 0.04%)</title><rect x="682.8" y="1155.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="685.8" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="682.8" y="1139.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="685.8" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="682.8" y="1123.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="685.8" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.04%)</title><rect x="682.8" y="1107.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="685.8" y="1118.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.04%)</title><rect x="682.8" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="685.8" y="1102.0"></text>
</g>
<g>
<title>JvmtiVMObjectAllocEventCollector::JvmtiVMObjectAllocEventCollector() (1 samples, 0.04%)</title><rect x="683.2" y="1155.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="686.2" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectionKey.cancel (1 samples, 0.04%)</title><rect x="683.7" y="1171.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="686.7" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implCloseSelectableChannel (42 samples, 1.56%)</title><rect x="684.1" y="1171.0" width="18.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="687.1" y="1182.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isRegistered (1 samples, 0.04%)</title><rect x="685.9" y="1155.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="688.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.04%)</title><rect x="686.3" y="1155.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.04%)</title><rect x="686.3" y="1139.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="689.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.04%)</title><rect x="686.3" y="1123.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getSocketOption (12 samples, 0.45%)</title><rect x="686.7" y="1155.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="689.7" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="687.6" y="1139.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="690.6" y="1150.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.04%)</title><rect x="687.6" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="690.6" y="1134.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="687.6" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="690.6" y="1118.0"></text>
</g>
<g>
<title>sun/net/ext/ExtendedSocketOptions.isOptionSupported (3 samples, 0.11%)</title><rect x="688.0" y="1139.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="691.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.04%)</title><rect x="688.9" y="1123.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.04%)</title><rect x="688.9" y="1107.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="691.9" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getIntOption0 (4 samples, 0.15%)</title><rect x="689.4" y="1139.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="692.4" y="1150.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_Net_getIntOption0 (4 samples, 0.15%)</title><rect x="689.4" y="1123.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="692.4" y="1134.0"></text>
</g>
<g>
<title>getsockopt (4 samples, 0.15%)</title><rect x="689.4" y="1107.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="692.4" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketOptionRegistry.findOption (2 samples, 0.07%)</title><rect x="691.1" y="1139.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="694.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="691.5" y="1123.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="694.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="691.5" y="1107.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="694.5" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketOptionRegistry$RegistryKey.hashCode (1 samples, 0.04%)</title><rect x="691.5" y="1091.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.5" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.shutdown (24 samples, 0.89%)</title><rect x="692.0" y="1155.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.0" y="1166.0"></text>
</g>
<g>
<title>shutdown (24 samples, 0.89%)</title><rect x="692.0" y="1139.0" width="10.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="695.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsRejected (1 samples, 0.04%)</title><rect x="702.5" y="1251.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="705.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.04%)</title><rect x="702.5" y="1235.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="705.5" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndAddLong (1 samples, 0.04%)</title><rect x="702.5" y="1219.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="705.5" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.weakCompareAndSetLong (1 samples, 0.04%)</title><rect x="702.5" y="1203.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="705.5" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.compareAndSetLong (1 samples, 0.04%)</title><rect x="702.5" y="1187.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="705.5" y="1198.0"></text>
</g>
<g>
<title>Unsafe_CompareAndSetLong(JNIEnv_*, _jobject*, _jobject*, long, long, long) (1 samples, 0.04%)</title><rect x="702.5" y="1171.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="705.5" y="1182.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.04%)</title><rect x="702.5" y="1155.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="705.5" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/RF.of (17 samples, 0.63%)</title><rect x="702.9" y="1267.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="705.9" y="1278.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (3 samples, 0.11%)</title><rect x="703.4" y="1251.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="706.4" y="1262.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (2 samples, 0.07%)</title><rect x="703.4" y="1235.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="706.4" y="1246.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="703.4" y="1219.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="706.4" y="1230.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="703.4" y="1203.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="706.4" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.04%)</title><rect x="703.4" y="1187.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="706.4" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.04%)</title><rect x="703.4" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="706.4" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.04%)</title><rect x="703.4" y="1155.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="706.4" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.04%)</title><rect x="703.4" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="706.4" y="1150.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, bool, Thread*) (1 samples, 0.04%)</title><rect x="703.4" y="1123.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="706.4" y="1134.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.04%)</title><rect x="703.4" y="1107.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="706.4" y="1118.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="703.4" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="706.4" y="1102.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.04%)</title><rect x="703.4" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="706.4" y="1086.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.04%)</title><rect x="703.4" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="706.4" y="1070.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.&lt;init&gt; (1 samples, 0.04%)</title><rect x="703.8" y="1219.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="706.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="704.2" y="1235.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="707.2" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="704.2" y="1219.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="707.2" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="704.2" y="1203.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="707.2" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="704.2" y="1187.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="707.2" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="704.2" y="1171.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="707.2" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="704.2" y="1155.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="707.2" y="1166.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="704.2" y="1139.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="707.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="704.2" y="1123.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="707.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="704.2" y="1107.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="707.2" y="1118.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="704.2" y="1091.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="707.2" y="1102.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="704.2" y="1075.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="707.2" y="1086.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="704.2" y="1059.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="707.2" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="704.2" y="1043.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="707.2" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.04%)</title><rect x="704.2" y="1027.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="707.2" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.04%)</title><rect x="704.2" y="1011.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="707.2" y="1022.0"></text>
</g>
<g>
<title>CodeCache::flush_dependents_on(InstanceKlass*) (1 samples, 0.04%)</title><rect x="704.2" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="707.2" y="1006.0"></text>
</g>
<g>
<title>DepChange::ContextStream::next() (1 samples, 0.04%)</title><rect x="704.2" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="707.2" y="990.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (8 samples, 0.30%)</title><rect x="704.7" y="1251.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="707.7" y="1262.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (6 samples, 0.22%)</title><rect x="704.7" y="1235.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="707.7" y="1246.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (6 samples, 0.22%)</title><rect x="704.7" y="1219.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.7" y="1230.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (6 samples, 0.22%)</title><rect x="704.7" y="1203.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="707.7" y="1214.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (6 samples, 0.22%)</title><rect x="704.7" y="1187.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.7" y="1198.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher$None.matches (1 samples, 0.04%)</title><rect x="706.0" y="1171.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.0" y="1182.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1$1.separatorStart (2 samples, 0.07%)</title><rect x="706.4" y="1171.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.4" y="1182.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.indexIn (1 samples, 0.04%)</title><rect x="706.9" y="1155.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.9" y="1166.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher$Is.matches (1 samples, 0.04%)</title><rect x="706.9" y="1139.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="709.9" y="1150.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (1 samples, 0.04%)</title><rect x="707.3" y="1235.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.3" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="707.8" y="1235.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.8" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="707.8" y="1219.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.8" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="707.8" y="1203.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.8" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="707.8" y="1187.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.8" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="707.8" y="1171.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.8" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="707.8" y="1155.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="710.8" y="1166.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="707.8" y="1139.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="710.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.04%)</title><rect x="708.2" y="1251.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.04%)</title><rect x="708.2" y="1235.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.replace (2 samples, 0.07%)</title><rect x="708.6" y="1251.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="711.6" y="1262.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="708.6" y="1235.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="711.6" y="1246.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="708.6" y="1219.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="711.6" y="1230.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="708.6" y="1203.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="711.6" y="1214.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="708.6" y="1187.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="711.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="709.1" y="1235.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="712.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.04%)</title><rect x="709.1" y="1219.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="712.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.appendChars (1 samples, 0.04%)</title><rect x="709.1" y="1203.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.canEncode (1 samples, 0.04%)</title><rect x="709.1" y="1187.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="712.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.04%)</title><rect x="709.5" y="1251.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.5" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.04%)</title><rect x="709.5" y="1235.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.5" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.04%)</title><rect x="709.9" y="1251.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="712.9" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.04%)</title><rect x="709.9" y="1235.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="712.9" y="1246.0"></text>
</g>
<g>
<title>java/util/Objects.checkIndex (1 samples, 0.04%)</title><rect x="709.9" y="1219.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.9" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/util/Preconditions.checkIndex (1 samples, 0.04%)</title><rect x="709.9" y="1203.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="712.9" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/util/Preconditions.outOfBoundsCheckIndex (1 samples, 0.04%)</title><rect x="709.9" y="1187.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="712.9" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.executeAsync (8 samples, 0.30%)</title><rect x="710.4" y="1283.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="713.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.04%)</title><rect x="710.4" y="1267.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="713.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.04%)</title><rect x="710.4" y="1251.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="713.4" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$76/1321306324.get$Lambda (1 samples, 0.04%)</title><rect x="710.4" y="1235.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="713.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.26%)</title><rect x="710.8" y="1267.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="713.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (7 samples, 0.26%)</title><rect x="710.8" y="1251.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="713.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndIncrement (1 samples, 0.04%)</title><rect x="711.3" y="1235.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="714.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.04%)</title><rect x="711.7" y="1235.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.15%)</title><rect x="712.1" y="1235.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="715.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.15%)</title><rect x="712.1" y="1219.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="715.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.07%)</title><rect x="712.1" y="1203.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="715.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.07%)</title><rect x="712.1" y="1187.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="715.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.07%)</title><rect x="712.1" y="1171.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="715.1" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.07%)</title><rect x="712.1" y="1155.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="715.1" y="1166.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.07%)</title><rect x="712.1" y="1139.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="715.1" y="1150.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.07%)</title><rect x="712.1" y="1123.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="715.1" y="1134.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.07%)</title><rect x="712.1" y="1107.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="715.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.07%)</title><rect x="713.0" y="1203.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="716.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.07%)</title><rect x="713.0" y="1187.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="716.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.07%)</title><rect x="713.0" y="1171.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="716.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.07%)</title><rect x="713.0" y="1155.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="716.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.04%)</title><rect x="713.4" y="1139.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="716.4" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.04%)</title><rect x="713.9" y="1347.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="716.9" y="1358.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.04%)</title><rect x="713.9" y="1331.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="716.9" y="1342.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="714.3" y="1347.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="717.3" y="1358.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="714.3" y="1331.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="717.3" y="1342.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 0.67%)</title><rect x="714.8" y="1363.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.8" y="1374.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (16 samples, 0.59%)</title><rect x="715.6" y="1347.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="718.6" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="716.1" y="1331.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="719.1" y="1342.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="716.1" y="1315.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.1" y="1326.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="716.1" y="1299.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.1" y="1310.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="716.1" y="1283.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (14 samples, 0.52%)</title><rect x="716.5" y="1331.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.5" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/IOStatus.normalize (1 samples, 0.04%)</title><rect x="716.9" y="1315.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.9" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.45%)</title><rect x="717.4" y="1315.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="720.4" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.45%)</title><rect x="717.4" y="1299.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="720.4" y="1310.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.15%)</title><rect x="717.4" y="1283.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="720.4" y="1294.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.11%)</title><rect x="717.8" y="1267.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.8" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.07%)</title><rect x="718.3" y="1251.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.3" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.07%)</title><rect x="718.3" y="1235.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="721.3" y="1246.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (2 samples, 0.07%)</title><rect x="718.3" y="1219.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="721.3" y="1230.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.04%)</title><rect x="718.3" y="1203.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="721.3" y="1214.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.04%)</title><rect x="718.3" y="1187.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="721.3" y="1198.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.04%)</title><rect x="718.3" y="1171.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="721.3" y="1182.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.04%)</title><rect x="718.3" y="1155.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="721.3" y="1166.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.04%)</title><rect x="718.3" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="721.3" y="1150.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.04%)</title><rect x="718.3" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="721.3" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="718.7" y="1203.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="721.7" y="1214.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="718.7" y="1187.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="721.7" y="1198.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="718.7" y="1171.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="721.7" y="1182.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="718.7" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="721.7" y="1166.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="718.7" y="1139.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="721.7" y="1150.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.04%)</title><rect x="718.7" y="1123.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="721.7" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5 samples, 0.19%)</title><rect x="719.1" y="1283.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="722.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (5 samples, 0.19%)</title><rect x="719.1" y="1267.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="722.1" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (5 samples, 0.19%)</title><rect x="719.1" y="1251.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.1" y="1262.0"></text>
</g>
<g>
<title>read (5 samples, 0.19%)</title><rect x="719.1" y="1235.0" width="2.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="722.1" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.07%)</title><rect x="721.3" y="1283.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="724.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.07%)</title><rect x="721.3" y="1267.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="724.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.04%)</title><rect x="721.8" y="1251.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="724.8" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="722.2" y="1283.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.2" y="1294.0"></text>
</g>
<g>
<title>thread_start (1,066 samples, 39.57%)</title><rect x="722.6" y="1411.0" width="467.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="725.6" y="1422.0">thread_start</text>
</g>
<g>
<title>_pthread_start (1,066 samples, 39.57%)</title><rect x="722.6" y="1395.0" width="467.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="725.6" y="1406.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (1,066 samples, 39.57%)</title><rect x="722.6" y="1379.0" width="467.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="725.6" y="1390.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (1,066 samples, 39.57%)</title><rect x="722.6" y="1363.0" width="467.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="725.6" y="1374.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (1,066 samples, 39.57%)</title><rect x="722.6" y="1347.0" width="467.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="725.6" y="1358.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.04%)</title><rect x="722.6" y="1331.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="725.6" y="1342.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (1 samples, 0.04%)</title><rect x="722.6" y="1315.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="725.6" y="1326.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (1 samples, 0.04%)</title><rect x="722.6" y="1299.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="725.6" y="1310.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.04%)</title><rect x="722.6" y="1283.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="725.6" y="1294.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (1 samples, 0.04%)</title><rect x="722.6" y="1267.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="725.6" y="1278.0"></text>
</g>
<g>
<title>G1RefineCardConcurrentlyClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.04%)</title><rect x="722.6" y="1251.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="725.6" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (1 samples, 0.04%)</title><rect x="722.6" y="1235.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="725.6" y="1246.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (1 samples, 0.04%)</title><rect x="722.6" y="1219.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="725.6" y="1230.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.04%)</title><rect x="722.6" y="1203.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="725.6" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.04%)</title><rect x="722.6" y="1187.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="725.6" y="1198.0"></text>
</g>
<g>
<title>GangWorker::loop() (74 samples, 2.75%)</title><rect x="723.1" y="1331.0" width="32.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="726.1" y="1342.0">Ga..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (11 samples, 0.41%)</title><rect x="723.1" y="1315.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="726.1" y="1326.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (11 samples, 0.41%)</title><rect x="723.1" y="1299.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="726.1" y="1310.0"></text>
</g>
<g>
<title>G1CMBitMap::iterate(G1CMBitMapClosure*, MemRegion) (7 samples, 0.26%)</title><rect x="723.1" y="1283.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="726.1" y="1294.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (7 samples, 0.26%)</title><rect x="723.1" y="1267.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="726.1" y="1278.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) (6 samples, 0.22%)</title><rect x="723.1" y="1251.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="726.1" y="1262.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (5 samples, 0.19%)</title><rect x="723.5" y="1235.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="726.5" y="1246.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (5 samples, 0.19%)</title><rect x="723.5" y="1219.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="726.5" y="1230.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate&lt;unsigned int, G1CMOopClosure&gt;(oopDesc*, G1CMOopClosure*) (1 samples, 0.04%)</title><rect x="723.5" y="1203.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="726.5" y="1214.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate_discovery&lt;unsigned int, G1CMOopClosure, AlwaysContains&gt;(oopDesc*, ReferenceType, G1CMOopClosure*, AlwaysContains&amp;) (1 samples, 0.04%)</title><rect x="723.5" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="726.5" y="1198.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (1 samples, 0.04%)</title><rect x="723.5" y="1171.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="726.5" y="1182.0"></text>
</g>
<g>
<title>oopDesc* ModRefBarrierSet::AccessBarrier&lt;567350ull, G1BarrierSet&gt;::oop_atomic_cmpxchg_in_heap&lt;unsigned int&gt;(oopDesc*, unsigned int*, oopDesc*) (1 samples, 0.04%)</title><rect x="723.5" y="1155.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="726.5" y="1166.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (4 samples, 0.15%)</title><rect x="724.0" y="1203.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="727.0" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, int, bool) (1 samples, 0.04%)</title><rect x="724.4" y="1187.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="727.4" y="1198.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.07%)</title><rect x="724.8" y="1187.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="727.8" y="1198.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (2 samples, 0.07%)</title><rect x="724.8" y="1171.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="727.8" y="1182.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, HeapRegion*, oopDesc*) (1 samples, 0.04%)</title><rect x="725.3" y="1155.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="728.3" y="1166.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.04%)</title><rect x="725.7" y="1251.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="728.7" y="1262.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (1 samples, 0.04%)</title><rect x="725.7" y="1235.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="728.7" y="1246.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) (4 samples, 0.15%)</title><rect x="726.1" y="1283.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="729.1" y="1294.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (2 samples, 0.07%)</title><rect x="727.0" y="1267.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="730.0" y="1278.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (2 samples, 0.07%)</title><rect x="727.0" y="1251.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="730.0" y="1262.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate&lt;unsigned int, G1CMOopClosure&gt;(oopDesc*, G1CMOopClosure*) (1 samples, 0.04%)</title><rect x="727.0" y="1235.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="730.0" y="1246.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate_ref_processing&lt;unsigned int, G1CMOopClosure, AlwaysContains&gt;(oopDesc*, G1CMOopClosure*, AlwaysContains&amp;) (1 samples, 0.04%)</title><rect x="727.0" y="1219.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="730.0" y="1230.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="727.5" y="1235.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="730.5" y="1246.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="727.5" y="1219.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="730.5" y="1230.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.04%)</title><rect x="727.5" y="1203.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="730.5" y="1214.0"></text>
</g>
<g>
<title>G1CMBitMap::check_mark(HeapWord*) (1 samples, 0.04%)</title><rect x="727.5" y="1187.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="730.5" y="1198.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (2 samples, 0.07%)</title><rect x="727.9" y="1315.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="730.9" y="1326.0"></text>
</g>
<g>
<title>G1ConcurrentMark::scan_root_region(HeapRegion*, unsigned int) (2 samples, 0.07%)</title><rect x="727.9" y="1299.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="730.9" y="1310.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RootRegionScanClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RootRegionScanClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="728.3" y="1283.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="731.3" y="1294.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::work(unsigned int) (2 samples, 0.07%)</title><rect x="728.8" y="1315.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="731.8" y="1326.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (2 samples, 0.07%)</title><rect x="728.8" y="1299.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="731.8" y="1310.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*) (2 samples, 0.07%)</title><rect x="728.8" y="1283.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="731.8" y="1294.0"></text>
</g>
<g>
<title>MarkBitMap::do_clear(MemRegion, bool) (2 samples, 0.07%)</title><rect x="728.8" y="1267.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="731.8" y="1278.0"></text>
</g>
<g>
<title>BitMap::clear_range(unsigned long, unsigned long) (2 samples, 0.07%)</title><rect x="728.8" y="1251.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="731.8" y="1262.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="728.8" y="1235.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="731.8" y="1246.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="729.7" y="1315.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="732.7" y="1326.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::do_parallel_work_for_region(unsigned int, bool, bool) (1 samples, 0.04%)</title><rect x="729.7" y="1299.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="732.7" y="1310.0"></text>
</g>
<g>
<title>G1CardCounts::clear_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="729.7" y="1283.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="732.7" y="1294.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="729.7" y="1267.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="732.7" y="1278.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 0.67%)</title><rect x="730.1" y="1315.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="733.1" y="1326.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.30%)</title><rect x="730.1" y="1299.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="733.1" y="1310.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.19%)</title><rect x="730.1" y="1283.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="733.1" y="1294.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (5 samples, 0.19%)</title><rect x="730.1" y="1267.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="733.1" y="1278.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (5 samples, 0.19%)</title><rect x="730.1" y="1251.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="733.1" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 0.19%)</title><rect x="730.1" y="1235.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="733.1" y="1246.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="730.5" y="1219.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="733.5" y="1230.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.07%)</title><rect x="731.4" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="734.4" y="1230.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.07%)</title><rect x="731.4" y="1203.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="734.4" y="1214.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.11%)</title><rect x="732.3" y="1283.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="735.3" y="1294.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::do_spin_master_work(TerminatorTerminator*) (3 samples, 0.11%)</title><rect x="732.3" y="1267.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="735.3" y="1278.0"></text>
</g>
<g>
<title>xdrrec_ops (3 samples, 0.11%)</title><rect x="732.3" y="1251.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="735.3" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 0.11%)</title><rect x="733.6" y="1299.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="736.6" y="1310.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.11%)</title><rect x="733.6" y="1283.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="736.6" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 0.11%)</title><rect x="733.6" y="1267.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="736.6" y="1278.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (3 samples, 0.11%)</title><rect x="733.6" y="1251.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="736.6" y="1262.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (3 samples, 0.11%)</title><rect x="733.6" y="1235.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="736.6" y="1246.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.11%)</title><rect x="733.6" y="1219.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="736.6" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (2 samples, 0.07%)</title><rect x="733.6" y="1203.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="736.6" y="1214.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.07%)</title><rect x="733.6" y="1187.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="736.6" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.04%)</title><rect x="734.5" y="1203.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="737.5" y="1214.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.04%)</title><rect x="734.5" y="1187.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="737.5" y="1198.0"></text>
</g>
<g>
<title>G1ContiguousSpace::block_start(void const*) (1 samples, 0.04%)</title><rect x="734.5" y="1171.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="737.5" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.04%)</title><rect x="734.5" y="1155.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="737.5" y="1166.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.04%)</title><rect x="734.5" y="1139.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="737.5" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.04%)</title><rect x="734.9" y="1299.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="737.9" y="1310.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.04%)</title><rect x="734.9" y="1283.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="737.9" y="1294.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="734.9" y="1267.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="737.9" y="1278.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_strong_code_roots(HeapRegion*) (1 samples, 0.04%)</title><rect x="734.9" y="1251.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="737.9" y="1262.0"></text>
</g>
<g>
<title>G1CodeRootSetTable::nmethods_do(CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="734.9" y="1235.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="737.9" y="1246.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.04%)</title><rect x="734.9" y="1219.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.9" y="1230.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.04%)</title><rect x="734.9" y="1203.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="737.9" y="1214.0"></text>
</g>
<g>
<title>void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="734.9" y="1187.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="737.9" y="1198.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="734.9" y="1171.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.9" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.04%)</title><rect x="734.9" y="1155.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="737.9" y="1166.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="734.9" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="737.9" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="734.9" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="737.9" y="1134.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="734.9" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="737.9" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (6 samples, 0.22%)</title><rect x="735.3" y="1299.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="738.3" y="1310.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.15%)</title><rect x="735.3" y="1283.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="738.3" y="1294.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.11%)</title><rect x="735.3" y="1267.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="738.3" y="1278.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (3 samples, 0.11%)</title><rect x="735.3" y="1251.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="738.3" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (3 samples, 0.11%)</title><rect x="735.3" y="1235.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="738.3" y="1246.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.11%)</title><rect x="735.3" y="1219.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="738.3" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="735.3" y="1203.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.3" y="1214.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.04%)</title><rect x="735.3" y="1187.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="738.3" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (2 samples, 0.07%)</title><rect x="735.8" y="1203.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="738.8" y="1214.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="735.8" y="1187.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="738.8" y="1198.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="736.2" y="1187.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="739.2" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="736.2" y="1171.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="739.2" y="1182.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="736.7" y="1267.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="739.7" y="1278.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.04%)</title><rect x="736.7" y="1251.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="739.7" y="1262.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="736.7" y="1235.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="739.7" y="1246.0"></text>
</g>
<g>
<title>frame::oops_code_blob_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) (1 samples, 0.04%)</title><rect x="736.7" y="1219.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="739.7" y="1230.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.04%)</title><rect x="736.7" y="1203.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="739.7" y="1214.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="736.7" y="1187.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="739.7" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.04%)</title><rect x="736.7" y="1171.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="739.7" y="1182.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="736.7" y="1155.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="739.7" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="736.7" y="1139.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="739.7" y="1150.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="736.7" y="1123.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="739.7" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_string_table_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.04%)</title><rect x="737.1" y="1283.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="740.1" y="1294.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.04%)</title><rect x="737.1" y="1267.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="740.1" y="1278.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="737.1" y="1251.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="740.1" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.04%)</title><rect x="737.5" y="1283.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="740.5" y="1294.0"></text>
</g>
<g>
<title>SymbolPropertyTable::oops_do(OopClosure*) (1 samples, 0.04%)</title><rect x="737.5" y="1267.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="740.5" y="1278.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="737.5" y="1251.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="740.5" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.04%)</title><rect x="737.5" y="1235.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="740.5" y="1246.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="737.5" y="1219.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="740.5" y="1230.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (17 samples, 0.63%)</title><rect x="738.0" y="1315.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="741.0" y="1326.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (17 samples, 0.63%)</title><rect x="738.0" y="1299.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="741.0" y="1310.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (17 samples, 0.63%)</title><rect x="738.0" y="1283.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="741.0" y="1294.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator::move_if_below_tams() (3 samples, 0.11%)</title><rect x="738.0" y="1267.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="741.0" y="1278.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::rebuild_rem_set_in_region(G1CMBitMap const*, HeapWord*, HeapWord*, HeapRegion*, MemRegion) (14 samples, 0.52%)</title><rect x="739.3" y="1267.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="742.3" y="1278.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.07%)</title><rect x="739.7" y="1251.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="742.7" y="1262.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator::move_if_below_tams() (2 samples, 0.07%)</title><rect x="740.6" y="1251.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="743.6" y="1262.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::scan_for_references(oopDesc*, MemRegion) (9 samples, 0.33%)</title><rect x="741.5" y="1251.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="744.5" y="1262.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.04%)</title><rect x="742.8" y="1235.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="745.8" y="1246.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate&lt;unsigned int, G1RebuildRemSetClosure&gt;(oopDesc*, G1RebuildRemSetClosure*) (1 samples, 0.04%)</title><rect x="743.2" y="1235.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="746.2" y="1246.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate_ref_processing&lt;unsigned int, G1RebuildRemSetClosure, AlwaysContains&gt;(oopDesc*, G1RebuildRemSetClosure*, AlwaysContains&amp;) (1 samples, 0.04%)</title><rect x="743.2" y="1219.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="746.2" y="1230.0"></text>
</g>
<g>
<title>void ObjArrayKlass::oop_oop_iterate_elements&lt;unsigned int, G1RebuildRemSetClosure&gt;(objArrayOopDesc*, G1RebuildRemSetClosure*) (1 samples, 0.04%)</title><rect x="743.7" y="1235.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="746.7" y="1246.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (3 samples, 0.11%)</title><rect x="744.1" y="1235.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="747.1" y="1246.0"></text>
</g>
<g>
<title>PerRegionTable::add_card_work(int, bool) (1 samples, 0.04%)</title><rect x="744.5" y="1219.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="747.5" y="1230.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (1 samples, 0.04%)</title><rect x="744.5" y="1203.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="747.5" y="1214.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="745.0" y="1219.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="748.0" y="1230.0"></text>
</g>
<g>
<title>G1UpdateRemSetTrackingBeforeRebuildTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="745.4" y="1315.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="748.4" y="1326.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (1 samples, 0.04%)</title><rect x="745.4" y="1299.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="748.4" y="1310.0"></text>
</g>
<g>
<title>G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="745.4" y="1283.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="748.4" y="1294.0"></text>
</g>
<g>
<title>G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild::update_marked_bytes(HeapRegion*) (1 samples, 0.04%)</title><rect x="745.4" y="1267.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="748.4" y="1278.0"></text>
</g>
<g>
<title>ParallelCleaningTask::work(unsigned int) (3 samples, 0.11%)</title><rect x="745.9" y="1315.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="748.9" y="1326.0"></text>
</g>
<g>
<title>CodeCacheUnloadingTask::work(unsigned int) (3 samples, 0.11%)</title><rect x="745.9" y="1299.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="748.9" y="1310.0"></text>
</g>
<g>
<title>CodeCacheUnloadingTask::claim_nmethods(CompiledMethod**, int*) (1 samples, 0.04%)</title><rect x="745.9" y="1283.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="748.9" y="1294.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next() (1 samples, 0.04%)</title><rect x="745.9" y="1267.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="748.9" y="1278.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next_blob() (1 samples, 0.04%)</title><rect x="745.9" y="1251.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="748.9" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::next(void*) const (1 samples, 0.04%)</title><rect x="745.9" y="1235.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="748.9" y="1246.0"></text>
</g>
<g>
<title>nmethod::do_unloading(bool) (2 samples, 0.07%)</title><rect x="746.3" y="1283.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="749.3" y="1294.0"></text>
</g>
<g>
<title>CompiledMethod::unload_nmethod_caches(bool) (1 samples, 0.04%)</title><rect x="746.3" y="1267.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="749.3" y="1278.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool) (1 samples, 0.04%)</title><rect x="746.3" y="1251.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="749.3" y="1262.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.04%)</title><rect x="746.3" y="1235.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.3" y="1246.0"></text>
</g>
<g>
<title>nmethod::is_unloading() (1 samples, 0.04%)</title><rect x="746.7" y="1267.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="749.7" y="1278.0"></text>
</g>
<g>
<title>ClosureIsUnloadingBehaviour::is_unloading(CompiledMethod*) const (1 samples, 0.04%)</title><rect x="746.7" y="1251.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="749.7" y="1262.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.04%)</title><rect x="746.7" y="1235.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="749.7" y="1246.0"></text>
</g>
<g>
<title>CompiledMethod::oops_reloc_begin() const (1 samples, 0.04%)</title><rect x="746.7" y="1219.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="749.7" y="1230.0"></text>
</g>
<g>
<title>nmethod::verified_entry_point() const (1 samples, 0.04%)</title><rect x="746.7" y="1203.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="749.7" y="1214.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 0.11%)</title><rect x="747.2" y="1315.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="750.2" y="1326.0"></text>
</g>
<g>
<title>InlineCacheBuffer::update_inline_caches() (1 samples, 0.04%)</title><rect x="747.2" y="1299.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="750.2" y="1310.0"></text>
</g>
<g>
<title>StubQueue::remove_all() (1 samples, 0.04%)</title><rect x="747.2" y="1283.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="750.2" y="1294.0"></text>
</g>
<g>
<title>StubQueue::remove_first() (1 samples, 0.04%)</title><rect x="747.2" y="1267.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="750.2" y="1278.0"></text>
</g>
<g>
<title>ICStub::finalize() (1 samples, 0.04%)</title><rect x="747.2" y="1251.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="750.2" y="1262.0"></text>
</g>
<g>
<title>CompiledIC::CompiledIC(CompiledMethod*, NativeCall*) (1 samples, 0.04%)</title><rect x="747.2" y="1235.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="750.2" y="1246.0"></text>
</g>
<g>
<title>RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*) (1 samples, 0.04%)</title><rect x="747.2" y="1219.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="750.2" y="1230.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.07%)</title><rect x="747.6" y="1299.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="750.6" y="1310.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.07%)</title><rect x="747.6" y="1283.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="750.6" y="1294.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.07%)</title><rect x="747.6" y="1267.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="750.6" y="1278.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="747.6" y="1251.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="750.6" y="1262.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.04%)</title><rect x="747.6" y="1235.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="750.6" y="1246.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.04%)</title><rect x="747.6" y="1219.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="750.6" y="1230.0"></text>
</g>
<g>
<title>OopMapValue::read_from(CompressedReadStream*) (1 samples, 0.04%)</title><rect x="747.6" y="1203.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="750.6" y="1214.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="748.0" y="1251.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="751.0" y="1262.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="748.0" y="1235.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="751.0" y="1246.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (11 samples, 0.41%)</title><rect x="748.5" y="1315.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.5" y="1326.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (11 samples, 0.41%)</title><rect x="748.5" y="1299.0" width="4.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="751.5" y="1310.0"></text>
</g>
<g>
<title>WeakProcessorPhaseTimes::record_worker_time_sec(unsigned int, WeakProcessorPhases::Phase, double) (1 samples, 0.04%)</title><rect x="753.3" y="1315.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="756.3" y="1326.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.07%)</title><rect x="753.7" y="1315.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="756.7" y="1326.0"></text>
</g>
<g>
<title>void WeakProcessor::Task::work&lt;G1STWIsAliveClosure, G1KeepAliveClosure&gt;(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*) (2 samples, 0.07%)</title><rect x="754.6" y="1315.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="757.6" y="1326.0"></text>
</g>
<g>
<title>G1KeepAliveClosure::do_oop(oopDesc**) (1 samples, 0.04%)</title><rect x="754.6" y="1299.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="757.6" y="1310.0"></text>
</g>
<g>
<title>WeakProcessorPhaseTimeTracker::WeakProcessorPhaseTimeTracker(WeakProcessorPhaseTimes*, WeakProcessorPhases::Phase) (1 samples, 0.04%)</title><rect x="755.1" y="1299.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="758.1" y="1310.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.04%)</title><rect x="755.1" y="1283.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="758.1" y="1294.0"></text>
</g>
<g>
<title>JavaThread::run() (961 samples, 35.67%)</title><rect x="755.5" y="1331.0" width="420.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="758.5" y="1342.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (961 samples, 35.67%)</title><rect x="755.5" y="1315.0" width="420.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="758.5" y="1326.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (947 samples, 35.15%)</title><rect x="755.5" y="1299.0" width="414.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="758.5" y="1310.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CodeCache::unallocated_capacity(int) (1 samples, 0.04%)</title><rect x="755.5" y="1283.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="758.5" y="1294.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (934 samples, 34.67%)</title><rect x="755.9" y="1283.0" width="409.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="758.9" y="1294.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (781 samples, 28.99%)</title><rect x="755.9" y="1267.0" width="342.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="758.9" y="1278.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Arena::~Arena() (3 samples, 0.11%)</title><rect x="755.9" y="1251.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="758.9" y="1262.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (3 samples, 0.11%)</title><rect x="755.9" y="1235.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="758.9" y="1246.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.11%)</title><rect x="755.9" y="1219.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="758.9" y="1230.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.11%)</title><rect x="755.9" y="1203.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="758.9" y="1214.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (3 samples, 0.11%)</title><rect x="755.9" y="1187.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="758.9" y="1198.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (3 samples, 0.11%)</title><rect x="755.9" y="1171.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="758.9" y="1182.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (775 samples, 28.77%)</title><rect x="757.2" y="1251.0" width="339.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="760.2" y="1262.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.04%)</title><rect x="757.2" y="1235.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="760.2" y="1246.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="757.2" y="1219.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="760.2" y="1230.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="757.2" y="1203.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.2" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="757.2" y="1187.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="760.2" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="757.2" y="1171.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="760.2" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="757.2" y="1155.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.2" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="757.2" y="1139.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="760.2" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="757.2" y="1123.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="760.2" y="1134.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (508 samples, 18.86%)</title><rect x="757.7" y="1235.0" width="222.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="760.7" y="1246.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (11 samples, 0.41%)</title><rect x="757.7" y="1219.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.7" y="1230.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (6 samples, 0.22%)</title><rect x="757.7" y="1203.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="760.7" y="1214.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.04%)</title><rect x="759.9" y="1187.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="762.9" y="1198.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.04%)</title><rect x="759.9" y="1171.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="762.9" y="1182.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (5 samples, 0.19%)</title><rect x="760.3" y="1203.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="763.3" y="1214.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.04%)</title><rect x="760.7" y="1187.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="763.7" y="1198.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.04%)</title><rect x="760.7" y="1171.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="763.7" y="1182.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, int, int) (1 samples, 0.04%)</title><rect x="760.7" y="1155.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="763.7" y="1166.0"></text>
</g>
<g>
<title>NMethodSweeper::notify(int) (1 samples, 0.04%)</title><rect x="760.7" y="1139.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="763.7" y="1150.0"></text>
</g>
<g>
<title>CodeCache::reverse_free_ratio(int) (1 samples, 0.04%)</title><rect x="760.7" y="1123.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="763.7" y="1134.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.11%)</title><rect x="761.2" y="1187.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="764.2" y="1198.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.07%)</title><rect x="761.2" y="1171.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="764.2" y="1182.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.04%)</title><rect x="761.2" y="1155.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="764.2" y="1166.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (1 samples, 0.04%)</title><rect x="761.2" y="1139.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="764.2" y="1150.0"></text>
</g>
<g>
<title>storePNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.04%)</title><rect x="761.6" y="1155.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.6" y="1166.0"></text>
</g>
<g>
<title>encode_RegMem(CodeBuffer&amp;, int, int, int, int, int, relocInfo::relocType) (1 samples, 0.04%)</title><rect x="761.6" y="1139.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="764.6" y="1150.0"></text>
</g>
<g>
<title>jmpConNode::short_branch_version() (1 samples, 0.04%)</title><rect x="762.1" y="1171.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="765.1" y="1182.0"></text>
</g>
<g>
<title>labelOper::clone() const (1 samples, 0.04%)</title><rect x="762.1" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="765.1" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.11%)</title><rect x="762.5" y="1219.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="765.5" y="1230.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.07%)</title><rect x="762.5" y="1203.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="765.5" y="1214.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.07%)</title><rect x="762.5" y="1187.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="765.5" y="1198.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="762.9" y="1171.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="765.9" y="1182.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.04%)</title><rect x="763.4" y="1203.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="766.4" y="1214.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.04%)</title><rect x="763.4" y="1187.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="766.4" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="763.4" y="1171.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.4" y="1182.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int(int) (1 samples, 0.04%)</title><rect x="763.4" y="1155.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="766.4" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (32 samples, 1.19%)</title><rect x="763.8" y="1219.0" width="14.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="766.8" y="1230.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.07%)</title><rect x="763.8" y="1203.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="766.8" y="1214.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (28 samples, 1.04%)</title><rect x="764.7" y="1203.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.7" y="1214.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.26%)</title><rect x="766.4" y="1187.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="769.4" y="1198.0"></text>
</g>
<g>
<title>Compile::check_node_count(unsigned int, char const*) (1 samples, 0.04%)</title><rect x="769.5" y="1187.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="772.5" y="1198.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.07%)</title><rect x="769.9" y="1187.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="772.9" y="1198.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.07%)</title><rect x="769.9" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="772.9" y="1182.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="769.9" y="1155.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="772.9" y="1166.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.04%)</title><rect x="769.9" y="1139.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="772.9" y="1150.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="769.9" y="1123.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="772.9" y="1134.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="770.4" y="1155.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="773.4" y="1166.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.04%)</title><rect x="770.4" y="1139.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="773.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (12 samples, 0.45%)</title><rect x="770.8" y="1187.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="773.8" y="1198.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.11%)</title><rect x="771.7" y="1171.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="774.7" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.11%)</title><rect x="771.7" y="1155.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="774.7" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.07%)</title><rect x="771.7" y="1139.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.7" y="1150.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="771.7" y="1123.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="774.7" y="1134.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="771.7" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="774.7" y="1118.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="771.7" y="1091.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="774.7" y="1102.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.04%)</title><rect x="772.1" y="1123.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="775.1" y="1134.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.04%)</title><rect x="772.1" y="1107.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="775.1" y="1118.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.04%)</title><rect x="772.6" y="1139.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="775.6" y="1150.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.04%)</title><rect x="772.6" y="1123.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="775.6" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (6 samples, 0.22%)</title><rect x="773.0" y="1171.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.0" y="1182.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (4 samples, 0.15%)</title><rect x="773.0" y="1155.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="776.0" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.07%)</title><rect x="773.9" y="1139.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="776.9" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.04%)</title><rect x="773.9" y="1123.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="776.9" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="773.9" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.04%)</title><rect x="773.9" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="776.9" y="1102.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.04%)</title><rect x="774.3" y="1123.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.3" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.04%)</title><rect x="774.8" y="1155.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="777.8" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.04%)</title><rect x="774.8" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="777.8" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.04%)</title><rect x="774.8" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="777.8" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.04%)</title><rect x="774.8" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.8" y="1118.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="775.2" y="1155.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="778.2" y="1166.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.04%)</title><rect x="775.2" y="1139.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.2" y="1150.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.04%)</title><rect x="775.6" y="1171.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="778.6" y="1182.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.04%)</title><rect x="776.1" y="1187.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="779.1" y="1198.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="776.5" y="1187.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="779.5" y="1198.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.04%)</title><rect x="776.5" y="1171.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="779.5" y="1182.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="777.0" y="1203.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="780.0" y="1214.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="777.0" y="1187.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="780.0" y="1198.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.04%)</title><rect x="777.4" y="1203.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="780.4" y="1214.0"></text>
</g>
<g>
<title>Node::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.04%)</title><rect x="777.8" y="1219.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="780.8" y="1230.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.04%)</title><rect x="778.3" y="1219.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="781.3" y="1230.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.04%)</title><rect x="778.3" y="1203.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="781.3" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (24 samples, 0.89%)</title><rect x="778.7" y="1219.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="781.7" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.04%)</title><rect x="778.7" y="1203.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="781.7" y="1214.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.04%)</title><rect x="778.7" y="1187.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.7" y="1198.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.04%)</title><rect x="778.7" y="1171.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="781.7" y="1182.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.04%)</title><rect x="778.7" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="781.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (23 samples, 0.85%)</title><rect x="779.1" y="1203.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="782.1" y="1214.0"></text>
</g>
<g>
<title>CProjNode::out_RegMask() const (1 samples, 0.04%)</title><rect x="779.1" y="1187.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="782.1" y="1198.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.04%)</title><rect x="779.6" y="1187.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="782.6" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (2 samples, 0.07%)</title><rect x="780.0" y="1187.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="783.0" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.04%)</title><rect x="780.0" y="1171.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="783.0" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_use(Node*, Node const*, Node*) (1 samples, 0.04%)</title><rect x="780.0" y="1155.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="783.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_use(Node*, Node const*, Node*) (1 samples, 0.04%)</title><rect x="780.0" y="1139.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.0" y="1150.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.04%)</title><rect x="780.5" y="1171.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.04%)</title><rect x="780.9" y="1187.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="783.9" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.19%)</title><rect x="781.3" y="1187.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.3" y="1198.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.11%)</title><rect x="781.8" y="1171.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="784.8" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.04%)</title><rect x="783.1" y="1171.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="786.1" y="1182.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.04%)</title><rect x="783.1" y="1155.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="786.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.07%)</title><rect x="783.5" y="1187.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="786.5" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.04%)</title><rect x="783.5" y="1171.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="786.5" y="1182.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (1 samples, 0.04%)</title><rect x="783.5" y="1155.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="786.5" y="1166.0"></text>
</g>
<g>
<title>testI_regNode::ideal_Opcode() const (1 samples, 0.04%)</title><rect x="784.0" y="1171.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="787.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.15%)</title><rect x="784.4" y="1187.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="787.4" y="1198.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.04%)</title><rect x="785.7" y="1171.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="788.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.07%)</title><rect x="786.2" y="1187.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="789.2" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.04%)</title><rect x="786.2" y="1171.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="789.2" y="1182.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="786.6" y="1171.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="789.6" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.19%)</title><rect x="787.0" y="1187.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="790.0" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.04%)</title><rect x="787.0" y="1171.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="790.0" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.07%)</title><rect x="787.5" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="790.5" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="787.9" y="1155.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="790.9" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (2 samples, 0.07%)</title><rect x="788.3" y="1171.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="791.3" y="1182.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (2 samples, 0.07%)</title><rect x="788.3" y="1155.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="791.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (436 samples, 16.18%)</title><rect x="789.2" y="1219.0" width="191.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="792.2" y="1230.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.04%)</title><rect x="789.2" y="1203.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="792.2" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.15%)</title><rect x="789.7" y="1203.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="792.7" y="1214.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (13 samples, 0.48%)</title><rect x="791.4" y="1203.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.4" y="1214.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.07%)</title><rect x="796.2" y="1187.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="799.2" y="1198.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.07%)</title><rect x="796.2" y="1171.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="799.2" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (50 samples, 1.86%)</title><rect x="797.1" y="1203.0" width="21.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="800.1" y="1214.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.22%)</title><rect x="800.6" y="1187.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="803.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.11%)</title><rect x="803.2" y="1187.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="806.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.04%)</title><rect x="804.6" y="1187.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="807.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (23 samples, 0.85%)</title><rect x="805.0" y="1187.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="808.0" y="1198.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (10 samples, 0.37%)</title><rect x="805.4" y="1171.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="808.4" y="1182.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.07%)</title><rect x="808.9" y="1155.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="811.9" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.04%)</title><rect x="809.8" y="1171.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="812.8" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (8 samples, 0.30%)</title><rect x="810.2" y="1171.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="813.2" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.11%)</title><rect x="813.7" y="1171.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="816.7" y="1182.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (5 samples, 0.19%)</title><rect x="815.1" y="1187.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="818.1" y="1198.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (4 samples, 0.15%)</title><rect x="817.3" y="1187.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="820.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (35 samples, 1.30%)</title><rect x="819.0" y="1203.0" width="15.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="822.0" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.22%)</title><rect x="821.6" y="1187.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="824.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.19%)</title><rect x="824.3" y="1187.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="827.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (18 samples, 0.67%)</title><rect x="826.5" y="1187.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="829.5" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.22%)</title><rect x="830.8" y="1171.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.8" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.07%)</title><rect x="833.5" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="836.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (67 samples, 2.49%)</title><rect x="834.3" y="1203.0" width="29.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="837.3" y="1214.0">Ph..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.04%)</title><rect x="851.0" y="1187.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="854.0" y="1198.0"></text>
</g>
<g>
<title>MachSpillCopyNode::in_RegMask(unsigned int) const (1 samples, 0.04%)</title><rect x="851.4" y="1187.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.4" y="1198.0"></text>
</g>
<g>
<title>Node::rematerialize() const (5 samples, 0.19%)</title><rect x="851.9" y="1187.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="854.9" y="1198.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (5 samples, 0.19%)</title><rect x="854.0" y="1187.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="857.0" y="1198.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.04%)</title><rect x="854.0" y="1171.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="857.0" y="1182.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.04%)</title><rect x="854.0" y="1155.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="857.0" y="1166.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.04%)</title><rect x="854.0" y="1139.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="857.0" y="1150.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (4 samples, 0.15%)</title><rect x="854.5" y="1171.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.04%)</title><rect x="856.2" y="1187.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="859.2" y="1198.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::raw_at_put_grow(int, unsigned int const&amp;, unsigned int const&amp;) (1 samples, 0.04%)</title><rect x="856.2" y="1171.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="859.2" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (14 samples, 0.52%)</title><rect x="856.7" y="1187.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="859.7" y="1198.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (6 samples, 0.22%)</title><rect x="857.6" y="1171.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="860.6" y="1182.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (6 samples, 0.22%)</title><rect x="857.6" y="1155.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="860.6" y="1166.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.04%)</title><rect x="859.7" y="1139.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="862.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (5 samples, 0.19%)</title><rect x="860.2" y="1171.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="863.2" y="1182.0"></text>
</g>
<g>
<title>MachSpillCopyNode::MachSpillCopyNode(MachSpillCopyNode::SpillType, Node*, RegMask const&amp;, RegMask const&amp;) (1 samples, 0.04%)</title><rect x="860.2" y="1155.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="863.2" y="1166.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.04%)</title><rect x="860.2" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="863.2" y="1150.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="860.6" y="1155.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.6" y="1166.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (2 samples, 0.07%)</title><rect x="861.1" y="1155.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="864.1" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.04%)</title><rect x="861.9" y="1155.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="864.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.04%)</title><rect x="862.4" y="1171.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="865.4" y="1182.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="862.4" y="1155.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="865.4" y="1166.0"></text>
</g>
<g>
<title>convI2L_reg_regNode::rule() const (1 samples, 0.04%)</title><rect x="862.8" y="1187.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="865.8" y="1198.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.04%)</title><rect x="863.2" y="1187.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (83 samples, 3.08%)</title><rect x="863.7" y="1203.0" width="36.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="866.7" y="1214.0">Pha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.11%)</title><rect x="866.3" y="1187.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="869.3" y="1198.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.07%)</title><rect x="867.6" y="1187.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="870.6" y="1198.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.04%)</title><rect x="868.5" y="1187.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="871.5" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (9 samples, 0.33%)</title><rect x="868.9" y="1187.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="871.9" y="1198.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.04%)</title><rect x="868.9" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="871.9" y="1182.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (2 samples, 0.07%)</title><rect x="869.4" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.4" y="1182.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.04%)</title><rect x="870.3" y="1171.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.3" y="1182.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.04%)</title><rect x="870.7" y="1171.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="873.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.04%)</title><rect x="871.1" y="1171.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="874.1" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.04%)</title><rect x="871.1" y="1155.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="874.1" y="1166.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.04%)</title><rect x="871.1" y="1139.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="874.1" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.04%)</title><rect x="871.6" y="1171.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.6" y="1182.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="872.0" y="1171.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.0" y="1182.0"></text>
</g>
<g>
<title>checkCastPPNode::two_adr() const (1 samples, 0.04%)</title><rect x="872.4" y="1171.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="875.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::assign_high_score_to_immediate_copies(Block*, Node*, LRG&amp;, unsigned int, unsigned int) (2 samples, 0.07%)</title><rect x="872.9" y="1187.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.07%)</title><rect x="873.8" y="1187.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="876.8" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="874.2" y="1171.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.2" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (49 samples, 1.82%)</title><rect x="874.6" y="1187.0" width="21.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="877.6" y="1198.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.04%)</title><rect x="879.0" y="1171.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="882.0" y="1182.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (18 samples, 0.67%)</title><rect x="879.5" y="1171.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.5" y="1182.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (3 samples, 0.11%)</title><rect x="886.0" y="1155.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.0" y="1166.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (2 samples, 0.07%)</title><rect x="886.5" y="1139.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (8 samples, 0.30%)</title><rect x="887.3" y="1171.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="890.3" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.07%)</title><rect x="890.8" y="1171.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="893.8" y="1182.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (10 samples, 0.37%)</title><rect x="891.7" y="1171.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="894.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.07%)</title><rect x="896.1" y="1187.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="899.1" y="1198.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.04%)</title><rect x="896.1" y="1171.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="899.1" y="1182.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.04%)</title><rect x="896.1" y="1155.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="899.1" y="1166.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.04%)</title><rect x="896.5" y="1171.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="899.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.15%)</title><rect x="897.0" y="1187.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="900.0" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="897.0" y="1171.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="900.0" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="897.4" y="1171.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.4" y="1182.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.07%)</title><rect x="897.8" y="1171.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="900.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.04%)</title><rect x="898.7" y="1187.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="901.7" y="1198.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="899.2" y="1187.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="902.2" y="1198.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.04%)</title><rect x="899.6" y="1187.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="902.6" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.11%)</title><rect x="900.0" y="1203.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="903.0" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="900.9" y="1187.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.04%)</title><rect x="901.4" y="1203.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="904.4" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (36 samples, 1.34%)</title><rect x="901.8" y="1203.0" width="15.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="904.8" y="1214.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.04%)</title><rect x="908.8" y="1187.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="911.8" y="1198.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="908.8" y="1171.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="911.8" y="1182.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.04%)</title><rect x="909.2" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.2" y="1198.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.04%)</title><rect x="909.7" y="1187.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="912.7" y="1198.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (5 samples, 0.19%)</title><rect x="910.1" y="1187.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="913.1" y="1198.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.11%)</title><rect x="912.3" y="1187.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.3" y="1198.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.04%)</title><rect x="913.6" y="1187.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.6" y="1198.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (8 samples, 0.30%)</title><rect x="914.1" y="1187.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="917.1" y="1198.0"></text>
</g>
<g>
<title>RegMask::Size() const (6 samples, 0.22%)</title><rect x="914.5" y="1171.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.5" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.04%)</title><rect x="917.1" y="1171.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (4 samples, 0.15%)</title><rect x="917.6" y="1203.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="920.6" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.04%)</title><rect x="918.9" y="1187.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (36 samples, 1.34%)</title><rect x="919.3" y="1203.0" width="15.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="922.3" y="1214.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.07%)</title><rect x="922.4" y="1187.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="925.4" y="1198.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="922.4" y="1171.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="925.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (23 samples, 0.85%)</title><rect x="923.3" y="1187.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="926.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (3 samples, 0.11%)</title><rect x="930.7" y="1171.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.7" y="1182.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="930.7" y="1155.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.7" y="1166.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.04%)</title><rect x="930.7" y="1139.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.7" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (2 samples, 0.07%)</title><rect x="931.1" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.1" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="931.6" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (3 samples, 0.11%)</title><rect x="932.0" y="1171.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="935.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.04%)</title><rect x="932.9" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="935.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.04%)</title><rect x="932.9" y="1139.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.04%)</title><rect x="933.3" y="1187.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="936.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.04%)</title><rect x="933.3" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="936.3" y="1182.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.04%)</title><rect x="933.3" y="1155.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.3" y="1166.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.04%)</title><rect x="933.3" y="1139.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="936.3" y="1150.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (3 samples, 0.11%)</title><rect x="933.8" y="1187.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="936.8" y="1198.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.04%)</title><rect x="934.6" y="1171.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="937.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.07%)</title><rect x="935.1" y="1203.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.1" y="1214.0"></text>
</g>
<g>
<title>IndexSet::clear() (1 samples, 0.04%)</title><rect x="935.5" y="1187.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.5" y="1198.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (12 samples, 0.45%)</title><rect x="936.0" y="1203.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.0" y="1214.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.07%)</title><rect x="936.0" y="1187.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.0" y="1198.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.04%)</title><rect x="936.4" y="1171.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.4" y="1182.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.04%)</title><rect x="936.4" y="1155.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.4" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 0.37%)</title><rect x="936.8" y="1187.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.8" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.04%)</title><rect x="936.8" y="1171.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.8" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 0.33%)</title><rect x="937.3" y="1171.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.3" y="1182.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 0.15%)</title><rect x="937.3" y="1155.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.3" y="1166.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.04%)</title><rect x="937.3" y="1139.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="940.3" y="1150.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.11%)</title><rect x="937.7" y="1139.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="940.7" y="1150.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.04%)</title><rect x="939.0" y="1155.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.0" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.11%)</title><rect x="939.5" y="1155.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.5" y="1166.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.07%)</title><rect x="939.5" y="1139.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="940.3" y="1139.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="943.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.04%)</title><rect x="940.8" y="1155.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="943.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (30 samples, 1.11%)</title><rect x="941.2" y="1203.0" width="13.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.2" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.07%)</title><rect x="941.2" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (28 samples, 1.04%)</title><rect x="942.1" y="1187.0" width="12.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.1" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.07%)</title><rect x="944.7" y="1171.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="947.7" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (15 samples, 0.56%)</title><rect x="945.6" y="1171.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="948.6" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.19%)</title><rect x="952.2" y="1171.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="955.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (20 samples, 0.74%)</title><rect x="954.4" y="1203.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="957.4" y="1214.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (10 samples, 0.37%)</title><rect x="954.4" y="1187.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="957.4" y="1198.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.07%)</title><rect x="957.9" y="1171.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.9" y="1182.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (2 samples, 0.07%)</title><rect x="957.9" y="1155.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="960.9" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.04%)</title><rect x="958.7" y="1187.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.7" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.15%)</title><rect x="959.2" y="1187.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.2" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.19%)</title><rect x="960.9" y="1187.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (14 samples, 0.52%)</title><rect x="963.1" y="1203.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.1" y="1214.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (5 samples, 0.19%)</title><rect x="963.5" y="1187.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.5" y="1198.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="965.7" y="1187.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="968.7" y="1198.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (7 samples, 0.26%)</title><rect x="966.2" y="1187.0" width="3.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="969.2" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (20 samples, 0.74%)</title><rect x="969.2" y="1203.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.2" y="1214.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.04%)</title><rect x="972.3" y="1187.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.3" y="1198.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="972.3" y="1171.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="975.3" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (10 samples, 0.37%)</title><rect x="972.7" y="1187.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="975.7" y="1198.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.22%)</title><rect x="973.2" y="1171.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="976.2" y="1182.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.07%)</title><rect x="974.9" y="1155.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="977.9" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.07%)</title><rect x="975.8" y="1171.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="978.8" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="976.7" y="1171.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.7" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (2 samples, 0.07%)</title><rect x="977.1" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.1" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (2 samples, 0.07%)</title><rect x="977.1" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.1" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.04%)</title><rect x="978.0" y="1203.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.0" y="1214.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="978.4" y="1203.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.4" y="1214.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="978.4" y="1187.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.4" y="1198.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="978.4" y="1171.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.4" y="1182.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.04%)</title><rect x="978.4" y="1155.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="981.4" y="1166.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="978.9" y="1203.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.9" y="1214.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.04%)</title><rect x="979.3" y="1203.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="982.3" y="1214.0"></text>
</g>
<g>
<title>compP_rRegNode::cisc_operand() const (1 samples, 0.04%)</title><rect x="979.8" y="1203.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.8" y="1214.0"></text>
</g>
<g>
<title>Compile::Optimize() (236 samples, 8.76%)</title><rect x="980.2" y="1235.0" width="103.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.2" y="1246.0">Compile::Opt..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.07%)</title><rect x="980.2" y="1219.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.2" y="1230.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.07%)</title><rect x="980.2" y="1203.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="983.2" y="1214.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.04%)</title><rect x="980.2" y="1187.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.2" y="1198.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.04%)</title><rect x="980.6" y="1187.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="983.6" y="1198.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (137 samples, 5.09%)</title><rect x="981.1" y="1219.0" width="60.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.1" y="1230.0">Compil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (137 samples, 5.09%)</title><rect x="981.1" y="1203.0" width="60.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.1" y="1214.0">PhaseI..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.15%)</title><rect x="981.1" y="1187.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.1" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.15%)</title><rect x="981.1" y="1171.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.1" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.11%)</title><rect x="981.1" y="1155.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.1" y="1166.0"></text>
</g>
<g>
<title>CmpUNode::Opcode() const (1 samples, 0.04%)</title><rect x="981.1" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.1" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="981.5" y="1139.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="984.5" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="981.5" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.5" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="981.5" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="984.5" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="981.5" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="981.5" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.04%)</title><rect x="981.5" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.04%)</title><rect x="981.5" y="1043.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.04%)</title><rect x="981.5" y="1027.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="981.5" y="1011.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="984.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="981.5" y="995.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="984.5" y="1006.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="981.5" y="979.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.5" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="981.9" y="1139.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="981.9" y="1123.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.04%)</title><rect x="981.9" y="1107.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="984.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.04%)</title><rect x="981.9" y="1091.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="984.9" y="1102.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="981.9" y="1075.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.9" y="1086.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="981.9" y="1059.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="984.9" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="982.4" y="1155.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.04%)</title><rect x="982.4" y="1139.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::update_skeleton_predicates(Node*, CountedLoopNode*, Node*, int) (1 samples, 0.04%)</title><rect x="982.4" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_skeleton_predicate(Node*, Node*, Node*, Node*, Node*, IdealLoopTree*, Node*) (1 samples, 0.04%)</title><rect x="982.4" y="1107.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.4" y="1118.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.04%)</title><rect x="982.4" y="1091.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.4" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (7 samples, 0.26%)</title><rect x="982.8" y="1187.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.8" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (7 samples, 0.26%)</title><rect x="982.8" y="1171.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.8" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (7 samples, 0.26%)</title><rect x="982.8" y="1155.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.8" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (7 samples, 0.26%)</title><rect x="982.8" y="1139.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.8" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (7 samples, 0.26%)</title><rect x="982.8" y="1123.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="985.8" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (7 samples, 0.26%)</title><rect x="982.8" y="1107.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.8" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (7 samples, 0.26%)</title><rect x="982.8" y="1091.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.8" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (6 samples, 0.22%)</title><rect x="982.8" y="1075.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="985.8" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (5 samples, 0.19%)</title><rect x="982.8" y="1059.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.8" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (5 samples, 0.19%)</title><rect x="982.8" y="1043.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.8" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (5 samples, 0.19%)</title><rect x="982.8" y="1027.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.8" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (4 samples, 0.15%)</title><rect x="982.8" y="1011.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.8" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (4 samples, 0.15%)</title><rect x="982.8" y="995.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.8" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="982.8" y="979.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="985.8" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="982.8" y="963.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.8" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="982.8" y="947.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.8" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="982.8" y="931.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.8" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="982.8" y="915.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.8" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="982.8" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.8" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="982.8" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="982.8" y="867.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.8" y="878.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.04%)</title><rect x="982.8" y="851.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.8" y="862.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.04%)</title><rect x="982.8" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.8" y="846.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.04%)</title><rect x="982.8" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.8" y="830.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="982.8" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="985.8" y="814.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="982.8" y="787.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.8" y="798.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.04%)</title><rect x="982.8" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.8" y="782.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.04%)</title><rect x="982.8" y="755.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.8" y="766.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.04%)</title><rect x="982.8" y="739.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="985.8" y="750.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.04%)</title><rect x="982.8" y="723.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="985.8" y="734.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="982.8" y="707.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="985.8" y="718.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.04%)</title><rect x="982.8" y="691.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="985.8" y="702.0"></text>
</g>
<g>
<title>mvm_allocate_pages (1 samples, 0.04%)</title><rect x="982.8" y="675.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="985.8" y="686.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.04%)</title><rect x="982.8" y="659.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="985.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (3 samples, 0.11%)</title><rect x="983.3" y="979.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.3" y="990.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (3 samples, 0.11%)</title><rect x="983.3" y="963.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.3" y="974.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.04%)</title><rect x="984.1" y="947.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.1" y="958.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.04%)</title><rect x="984.1" y="931.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="984.6" y="1011.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.04%)</title><rect x="984.6" y="995.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.6" y="1006.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.04%)</title><rect x="984.6" y="979.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.6" y="990.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.04%)</title><rect x="984.6" y="963.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.6" y="974.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.04%)</title><rect x="984.6" y="947.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="985.0" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.04%)</title><rect x="985.0" y="1043.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.0" y="1054.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.04%)</title><rect x="985.0" y="1027.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.0" y="1038.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.04%)</title><rect x="985.0" y="1011.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.0" y="1022.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.04%)</title><rect x="985.0" y="995.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.0" y="1006.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="985.0" y="979.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.0" y="990.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="985.0" y="963.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.0" y="974.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.04%)</title><rect x="985.0" y="947.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.0" y="958.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.04%)</title><rect x="985.0" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.0" y="942.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.04%)</title><rect x="985.0" y="915.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="988.0" y="926.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.04%)</title><rect x="985.0" y="899.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="988.0" y="910.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="985.0" y="883.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="988.0" y="894.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.04%)</title><rect x="985.0" y="867.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="988.0" y="878.0"></text>
</g>
<g>
<title>mvm_allocate_pages (1 samples, 0.04%)</title><rect x="985.0" y="851.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="988.0" y="862.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.04%)</title><rect x="985.0" y="835.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="988.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="985.4" y="1075.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.04%)</title><rect x="985.4" y="1059.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.4" y="1070.0"></text>
</g>
<g>
<title>Invariance::clone(Node*, Node*) (1 samples, 0.04%)</title><rect x="985.4" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.4" y="1054.0"></text>
</g>
<g>
<title>Invariance::clone_nodes(Node*, Node*) (1 samples, 0.04%)</title><rect x="985.4" y="1027.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.4" y="1038.0"></text>
</g>
<g>
<title>Invariance::clone_visit(Node*) (1 samples, 0.04%)</title><rect x="985.4" y="1011.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.4" y="1022.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="985.4" y="995.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.4" y="1006.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="985.4" y="979.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.4" y="990.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="985.4" y="963.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="988.4" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_range_check(PhaseIdealLoop*) const (1 samples, 0.04%)</title><rect x="985.9" y="1187.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.9" y="1198.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="985.9" y="1171.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.9" y="1182.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="986.3" y="1187.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.3" y="1198.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="986.3" y="1171.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="989.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (17 samples, 0.63%)</title><rect x="986.8" y="1187.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.8" y="1198.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (5 samples, 0.19%)</title><rect x="990.3" y="1171.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.3" y="1182.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (1 samples, 0.04%)</title><rect x="991.1" y="1155.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="994.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.07%)</title><rect x="991.6" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.6" y="1166.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.07%)</title><rect x="991.6" y="1139.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.6" y="1150.0"></text>
</g>
<g>
<title>NTarjan::setdepth(unsigned int, unsigned int*) (2 samples, 0.07%)</title><rect x="992.5" y="1171.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.5" y="1182.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.04%)</title><rect x="993.3" y="1171.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.3" y="1182.0"></text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.04%)</title><rect x="993.8" y="1171.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.30%)</title><rect x="994.2" y="1187.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="997.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (4 samples, 0.15%)</title><rect x="994.6" y="1171.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="997.6" y="1182.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (4 samples, 0.15%)</title><rect x="994.6" y="1155.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (2 samples, 0.07%)</title><rect x="996.4" y="1171.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="999.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.07%)</title><rect x="996.4" y="1155.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.04%)</title><rect x="996.4" y="1139.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="996.8" y="1139.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="996.8" y="1123.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.8" y="1134.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.04%)</title><rect x="997.3" y="1171.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1000.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (69 samples, 2.56%)</title><rect x="997.7" y="1187.0" width="30.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.7" y="1198.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (61 samples, 2.26%)</title><rect x="1001.2" y="1171.0" width="26.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1004.2" y="1182.0">P..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="1001.7" y="1155.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.7" y="1166.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1001.7" y="1139.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.7" y="1150.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1001.7" y="1123.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1004.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.11%)</title><rect x="1002.1" y="1155.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1005.1" y="1166.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1002.1" y="1139.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.07%)</title><rect x="1002.5" y="1139.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.5" y="1150.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1002.5" y="1123.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.04%)</title><rect x="1003.0" y="1123.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1006.0" y="1134.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1003.0" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1006.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (50 samples, 1.86%)</title><rect x="1003.4" y="1155.0" width="21.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1006.4" y="1166.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (6 samples, 0.22%)</title><rect x="1004.7" y="1139.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1007.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (5 samples, 0.19%)</title><rect x="1004.7" y="1123.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1007.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (5 samples, 0.19%)</title><rect x="1004.7" y="1107.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1007.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (4 samples, 0.15%)</title><rect x="1005.2" y="1091.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (4 samples, 0.15%)</title><rect x="1005.2" y="1075.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1008.2" y="1086.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (3 samples, 0.11%)</title><rect x="1005.6" y="1059.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1006.9" y="1123.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1009.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.04%)</title><rect x="1006.9" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.04%)</title><rect x="1007.3" y="1139.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1007.8" y="1139.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1010.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1007.8" y="1123.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.04%)</title><rect x="1007.8" y="1107.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.04%)</title><rect x="1007.8" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1010.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (39 samples, 1.45%)</title><rect x="1008.2" y="1139.0" width="17.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 0.30%)</title><rect x="1009.1" y="1123.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (27 samples, 1.00%)</title><rect x="1012.6" y="1123.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.6" y="1134.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1014.8" y="1107.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (21 samples, 0.78%)</title><rect x="1015.2" y="1107.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1018.2" y="1118.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (16 samples, 0.59%)</title><rect x="1017.4" y="1091.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1020.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.07%)</title><rect x="1024.4" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1027.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.07%)</title><rect x="1025.3" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1028.3" y="1166.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1025.7" y="1139.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1028.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (4 samples, 0.15%)</title><rect x="1026.2" y="1155.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1029.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.11%)</title><rect x="1026.6" y="1139.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.6" y="1150.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1027.5" y="1123.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1030.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (7 samples, 0.26%)</title><rect x="1027.9" y="1187.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.04%)</title><rect x="1030.6" y="1171.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_intrinsify_fill() (2 samples, 0.07%)</title><rect x="1031.0" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::intrinsify_fill(IdealLoopTree*) (2 samples, 0.07%)</title><rect x="1031.0" y="1171.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.0" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::is_counted() (1 samples, 0.04%)</title><rect x="1031.0" y="1155.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::match_fill_loop(IdealLoopTree*, Node*&amp;, Node*&amp;, Node*&amp;, Node*&amp;) (1 samples, 0.04%)</title><rect x="1031.4" y="1155.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.4" y="1166.0"></text>
</g>
<g>
<title>Node::outcnt() const (1 samples, 0.04%)</title><rect x="1031.4" y="1139.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (16 samples, 0.59%)</title><rect x="1031.9" y="1187.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (3 samples, 0.11%)</title><rect x="1033.2" y="1171.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.07%)</title><rect x="1033.2" y="1155.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1033.6" y="1139.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.04%)</title><rect x="1033.6" y="1123.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.04%)</title><rect x="1034.1" y="1155.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1034.1" y="1139.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (10 samples, 0.37%)</title><rect x="1034.5" y="1171.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.04%)</title><rect x="1034.5" y="1155.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1037.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.04%)</title><rect x="1034.9" y="1155.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1034.9" y="1139.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1037.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1034.9" y="1123.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.04%)</title><rect x="1034.9" y="1107.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1037.9" y="1118.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1034.9" y="1091.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (5 samples, 0.19%)</title><rect x="1035.4" y="1155.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (4 samples, 0.15%)</title><rect x="1035.4" y="1139.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (4 samples, 0.15%)</title><rect x="1035.4" y="1123.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (4 samples, 0.15%)</title><rect x="1035.4" y="1107.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.4" y="1118.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (3 samples, 0.11%)</title><rect x="1035.8" y="1091.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1038.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1037.1" y="1139.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1040.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.07%)</title><rect x="1037.6" y="1155.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1040.6" y="1166.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.04%)</title><rect x="1037.6" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.6" y="1150.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1037.6" y="1123.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1040.6" y="1134.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1037.6" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.6" y="1118.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1037.6" y="1091.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1038.0" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.0" y="1150.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.04%)</title><rect x="1038.0" y="1123.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1038.4" y="1155.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1041.4" y="1166.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.04%)</title><rect x="1038.4" y="1139.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1041.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.15%)</title><rect x="1038.9" y="1187.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1041.9" y="1198.0"></text>
</g>
<g>
<title>CmpUNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1038.9" y="1171.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.11%)</title><rect x="1039.3" y="1171.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1042.3" y="1182.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1039.3" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1042.3" y="1166.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1039.3" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.3" y="1150.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.07%)</title><rect x="1039.3" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1042.3" y="1134.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.07%)</title><rect x="1039.3" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.3" y="1118.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1040.2" y="1155.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.2" y="1166.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1040.2" y="1139.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1043.2" y="1150.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1040.6" y="1187.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1043.6" y="1198.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1040.6" y="1171.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.6" y="1182.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1040.6" y="1155.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.6" y="1166.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.04%)</title><rect x="1040.6" y="1139.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1043.6" y="1150.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="1040.6" y="1123.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1043.6" y="1134.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.04%)</title><rect x="1040.6" y="1107.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1043.6" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (5 samples, 0.19%)</title><rect x="1041.1" y="1219.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1044.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.04%)</title><rect x="1041.5" y="1203.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1044.5" y="1214.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.04%)</title><rect x="1041.5" y="1187.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1044.5" y="1198.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (3 samples, 0.11%)</title><rect x="1042.0" y="1203.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.0" y="1214.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.04%)</title><rect x="1042.0" y="1187.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1045.0" y="1198.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1042.0" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1045.0" y="1182.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (2 samples, 0.07%)</title><rect x="1042.4" y="1187.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1043.3" y="1219.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.3" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.04%)</title><rect x="1043.3" y="1203.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.3" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.04%)</title><rect x="1043.3" y="1187.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.3" y="1198.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (11 samples, 0.41%)</title><rect x="1043.7" y="1219.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1046.7" y="1230.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1046.8" y="1203.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.8" y="1214.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="1046.8" y="1187.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.8" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1046.8" y="1171.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.8" y="1182.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.04%)</title><rect x="1046.8" y="1155.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1049.8" y="1166.0"></text>
</g>
<g>
<title>HaltNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1047.2" y="1203.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1050.2" y="1214.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1047.6" y="1203.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1050.6" y="1214.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.04%)</title><rect x="1048.1" y="1203.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1051.1" y="1214.0"></text>
</g>
<g>
<title>Node_List::size() const (1 samples, 0.04%)</title><rect x="1048.1" y="1187.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.04%)</title><rect x="1048.5" y="1219.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.5" y="1230.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1048.5" y="1203.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.5" y="1214.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="1048.5" y="1187.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.5" y="1198.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1048.5" y="1171.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1051.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (59 samples, 2.19%)</title><rect x="1049.0" y="1219.0" width="25.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.0" y="1230.0">P..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.07%)</title><rect x="1049.0" y="1203.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1052.0" y="1214.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.07%)</title><rect x="1049.0" y="1187.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.0" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.07%)</title><rect x="1049.0" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.0" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.07%)</title><rect x="1049.0" y="1155.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (2 samples, 0.07%)</title><rect x="1049.0" y="1139.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1052.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode) (2 samples, 0.07%)</title><rect x="1049.0" y="1123.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (2 samples, 0.07%)</title><rect x="1049.0" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (2 samples, 0.07%)</title><rect x="1049.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1052.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.04%)</title><rect x="1049.4" y="1075.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.04%)</title><rect x="1049.4" y="1059.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.4" y="1070.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1049.4" y="1043.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.4" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.07%)</title><rect x="1049.8" y="1203.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.8" y="1214.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1187.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.8" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1171.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.8" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1155.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.8" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1139.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1052.8" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1123.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.8" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1107.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.8" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1091.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.8" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1075.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1052.8" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1059.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.8" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.8" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1027.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.8" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="1011.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1052.8" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="995.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.8" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="979.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1052.8" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.8" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="947.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.8" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="931.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.8" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1049.8" y="915.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="1049.8" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1052.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1049.8" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.8" y="894.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.04%)</title><rect x="1049.8" y="867.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1052.8" y="878.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.04%)</title><rect x="1049.8" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.8" y="862.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.04%)</title><rect x="1049.8" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="1050.3" y="1187.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.04%)</title><rect x="1050.3" y="1171.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.3" y="1182.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.04%)</title><rect x="1050.3" y="1155.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1053.3" y="1166.0"></text>
</g>
<g>
<title>Invariance::compute_invariance(Node*) (1 samples, 0.04%)</title><rect x="1050.3" y="1139.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.3" y="1150.0"></text>
</g>
<g>
<title>Invariance::visit(Node*, Node*) (1 samples, 0.04%)</title><rect x="1050.3" y="1123.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.04%)</title><rect x="1050.3" y="1107.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.04%)</title><rect x="1050.3" y="1091.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.3" y="1102.0"></text>
</g>
<g>
<title>IfNode::pinned() const (1 samples, 0.04%)</title><rect x="1050.7" y="1203.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.7" y="1214.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.04%)</title><rect x="1051.2" y="1203.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.11%)</title><rect x="1051.6" y="1203.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.6" y="1214.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.07%)</title><rect x="1052.0" y="1187.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.15%)</title><rect x="1052.9" y="1203.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1054.2" y="1187.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (29 samples, 1.08%)</title><rect x="1054.7" y="1203.0" width="12.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1057.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (23 samples, 0.85%)</title><rect x="1057.3" y="1187.0" width="10.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (21 samples, 0.78%)</title><rect x="1057.3" y="1171.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1060.3" y="1182.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.04%)</title><rect x="1057.7" y="1155.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.7" y="1166.0"></text>
</g>
<g>
<title>_platform_strcmp (1 samples, 0.04%)</title><rect x="1057.7" y="1139.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1060.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.07%)</title><rect x="1058.2" y="1155.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.07%)</title><rect x="1058.2" y="1139.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.07%)</title><rect x="1058.2" y="1123.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.07%)</title><rect x="1058.2" y="1107.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.07%)</title><rect x="1058.2" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1061.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1059.0" y="1155.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1059.0" y="1139.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.04%)</title><rect x="1059.0" y="1123.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1062.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.04%)</title><rect x="1059.0" y="1107.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1062.0" y="1118.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1059.0" y="1091.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1062.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1059.5" y="1155.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1059.5" y="1139.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.5" y="1150.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1059.5" y="1123.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (15 samples, 0.56%)</title><rect x="1059.9" y="1155.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (15 samples, 0.56%)</title><rect x="1059.9" y="1139.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1062.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (15 samples, 0.56%)</title><rect x="1059.9" y="1123.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.9" y="1134.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (10 samples, 0.37%)</title><rect x="1062.1" y="1107.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1065.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1066.5" y="1171.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.5" y="1182.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1066.5" y="1155.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1069.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.04%)</title><rect x="1066.9" y="1171.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1069.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.04%)</title><rect x="1066.9" y="1155.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1069.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.07%)</title><rect x="1067.4" y="1203.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.04%)</title><rect x="1068.2" y="1203.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (5 samples, 0.19%)</title><rect x="1068.7" y="1203.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.04%)</title><rect x="1069.5" y="1187.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1069.5" y="1171.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.04%)</title><rect x="1069.5" y="1155.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.04%)</title><rect x="1069.5" y="1139.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.07%)</title><rect x="1070.0" y="1187.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.0" y="1198.0"></text>
</g>
<g>
<title>ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const (1 samples, 0.04%)</title><rect x="1070.0" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.0" y="1182.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1070.0" y="1155.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1073.0" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.04%)</title><rect x="1070.0" y="1139.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.0" y="1150.0"></text>
</g>
<g>
<title>ciKlass::least_common_ancestor(ciKlass*) (1 samples, 0.04%)</title><rect x="1070.0" y="1123.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1070.4" y="1171.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1070.4" y="1155.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1070.4" y="1139.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.4" y="1150.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.04%)</title><rect x="1070.4" y="1123.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.22%)</title><rect x="1070.9" y="1203.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.22%)</title><rect x="1070.9" y="1187.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.9" y="1198.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (3 samples, 0.11%)</title><rect x="1070.9" y="1171.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.9" y="1182.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (3 samples, 0.11%)</title><rect x="1070.9" y="1155.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.9" y="1166.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.07%)</title><rect x="1071.3" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1074.3" y="1150.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.07%)</title><rect x="1071.3" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.3" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1072.2" y="1171.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.2" y="1182.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1072.2" y="1155.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.2" y="1166.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1072.6" y="1171.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.6" y="1182.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1072.6" y="1155.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.6" y="1166.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseGVN*) (1 samples, 0.04%)</title><rect x="1073.1" y="1171.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.1" y="1182.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.07%)</title><rect x="1073.5" y="1203.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.5" y="1214.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.07%)</title><rect x="1073.5" y="1187.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.5" y="1198.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1073.5" y="1171.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.5" y="1182.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.04%)</title><rect x="1073.5" y="1155.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1076.5" y="1166.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.04%)</title><rect x="1073.9" y="1171.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.9" y="1182.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.04%)</title><rect x="1073.9" y="1155.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.9" y="1166.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="1073.9" y="1139.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1076.9" y="1150.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="1073.9" y="1123.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1076.9" y="1134.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1074.4" y="1203.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1077.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 0.59%)</title><rect x="1074.8" y="1219.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 0.59%)</title><rect x="1074.8" y="1203.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.8" y="1214.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (4 samples, 0.15%)</title><rect x="1074.8" y="1187.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.8" y="1198.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (4 samples, 0.15%)</title><rect x="1074.8" y="1171.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.8" y="1182.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.07%)</title><rect x="1075.7" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.7" y="1166.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.07%)</title><rect x="1075.7" y="1139.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.7" y="1150.0"></text>
</g>
<g>
<title>CmpUNode::sub(Type const*, Type const*) const (1 samples, 0.04%)</title><rect x="1076.6" y="1187.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.6" y="1198.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1077.0" y="1187.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.0" y="1198.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1077.0" y="1171.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.0" y="1182.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1077.0" y="1155.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.0" y="1166.0"></text>
</g>
<g>
<title>IfNode::fold_compares(PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1077.4" y="1171.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.4" y="1182.0"></text>
</g>
<g>
<title>IfNode::reroute_side_effect_free_unc(ProjNode*, ProjNode*, PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1077.4" y="1155.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1077.4" y="1139.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1077.4" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.4" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1077.9" y="1187.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.9" y="1198.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.04%)</title><rect x="1077.9" y="1171.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.9" y="1182.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1077.9" y="1155.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.9" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="1077.9" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.9" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1077.9" y="1123.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.9" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.04%)</title><rect x="1078.3" y="1187.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.3" y="1198.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.04%)</title><rect x="1078.3" y="1171.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.3" y="1182.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1078.3" y="1155.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.3" y="1166.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1078.3" y="1139.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.3" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.04%)</title><rect x="1078.7" y="1187.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.7" y="1198.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.07%)</title><rect x="1079.2" y="1187.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.2" y="1198.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.04%)</title><rect x="1079.6" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.6" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.04%)</title><rect x="1079.6" y="1155.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1082.6" y="1166.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.04%)</title><rect x="1079.6" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.6" y="1150.0"></text>
</g>
<g>
<title>ConvI2LNode::Opcode() const (1 samples, 0.04%)</title><rect x="1079.6" y="1123.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.07%)</title><rect x="1080.1" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.1" y="1198.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.04%)</title><rect x="1080.5" y="1171.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.5" y="1182.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.04%)</title><rect x="1080.5" y="1155.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.5" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1080.9" y="1187.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.9" y="1198.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1081.4" y="1187.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1081.4" y="1171.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1081.4" y="1155.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.4" y="1166.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1081.4" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.4" y="1150.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.04%)</title><rect x="1081.4" y="1123.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.4" y="1134.0"></text>
</g>
<g>
<title>ciEnv::compiler_data() (1 samples, 0.04%)</title><rect x="1081.4" y="1107.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.4" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.04%)</title><rect x="1081.8" y="1219.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.8" y="1230.0"></text>
</g>
<g>
<title>OuterStripMinedLoopNode::adjust_strip_mined_loop(PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1081.8" y="1203.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.8" y="1214.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.04%)</title><rect x="1081.8" y="1187.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1084.8" y="1198.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.04%)</title><rect x="1081.8" y="1171.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.8" y="1182.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.04%)</title><rect x="1081.8" y="1155.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.8" y="1166.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.04%)</title><rect x="1081.8" y="1139.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.8" y="1150.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="1081.8" y="1123.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.8" y="1134.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.07%)</title><rect x="1082.2" y="1219.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1085.2" y="1230.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.07%)</title><rect x="1082.2" y="1203.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.2" y="1214.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.07%)</title><rect x="1082.2" y="1187.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.2" y="1198.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1083.1" y="1219.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.1" y="1230.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1083.1" y="1203.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.1" y="1214.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1083.1" y="1187.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1086.1" y="1198.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.04%)</title><rect x="1083.1" y="1171.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1086.1" y="1182.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="1083.1" y="1155.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1086.1" y="1166.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.04%)</title><rect x="1083.1" y="1139.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1086.1" y="1150.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1083.6" y="1235.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1086.6" y="1246.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.04%)</title><rect x="1084.0" y="1235.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.0" y="1246.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.04%)</title><rect x="1084.0" y="1219.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.0" y="1230.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1084.0" y="1203.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.0" y="1214.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.04%)</title><rect x="1084.0" y="1187.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.0" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (24 samples, 0.89%)</title><rect x="1084.4" y="1235.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1087.4" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (24 samples, 0.89%)</title><rect x="1084.4" y="1219.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (24 samples, 0.89%)</title><rect x="1084.4" y="1203.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (24 samples, 0.89%)</title><rect x="1084.4" y="1187.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.4" y="1198.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.04%)</title><rect x="1084.4" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.4" y="1182.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1084.4" y="1155.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1087.4" y="1166.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1084.4" y="1139.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.4" y="1150.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1084.4" y="1123.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.4" y="1134.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1084.4" y="1107.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.4" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.04%)</title><rect x="1084.4" y="1091.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (21 samples, 0.78%)</title><rect x="1084.9" y="1171.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.9" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.26%)</title><rect x="1084.9" y="1155.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.9" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.26%)</title><rect x="1084.9" y="1139.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.26%)</title><rect x="1084.9" y="1123.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.26%)</title><rect x="1084.9" y="1107.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.22%)</title><rect x="1084.9" y="1091.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.9" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.19%)</title><rect x="1084.9" y="1075.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.9" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.19%)</title><rect x="1084.9" y="1059.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.19%)</title><rect x="1084.9" y="1043.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1087.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.19%)</title><rect x="1084.9" y="1027.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.9" y="1038.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.04%)</title><rect x="1084.9" y="1011.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.9" y="1022.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1084.9" y="995.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.9" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1084.9" y="979.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.9" y="990.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1084.9" y="963.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.9" y="974.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1084.9" y="947.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.9" y="958.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="1084.9" y="931.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.9" y="942.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.04%)</title><rect x="1084.9" y="915.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.9" y="926.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1084.9" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.9" y="910.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1084.9" y="883.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1087.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.11%)</title><rect x="1085.3" y="1011.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.3" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1085.3" y="995.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.3" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.11%)</title><rect x="1085.3" y="979.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.11%)</title><rect x="1085.3" y="963.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.11%)</title><rect x="1085.3" y="947.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.11%)</title><rect x="1085.3" y="931.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1088.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1085.3" y="915.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.3" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.11%)</title><rect x="1085.3" y="899.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.11%)</title><rect x="1085.3" y="883.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.11%)</title><rect x="1085.3" y="867.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.11%)</title><rect x="1085.3" y="851.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1085.3" y="835.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.11%)</title><rect x="1085.3" y="819.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.11%)</title><rect x="1085.3" y="803.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.11%)</title><rect x="1085.3" y="787.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.11%)</title><rect x="1085.3" y="771.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1085.3" y="755.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1088.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.11%)</title><rect x="1085.3" y="739.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1085.3" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1085.3" y="707.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1088.3" y="718.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1085.3" y="691.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.3" y="702.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.04%)</title><rect x="1085.3" y="675.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.3" y="686.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.04%)</title><rect x="1085.3" y="659.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.3" y="670.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.04%)</title><rect x="1085.3" y="643.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1085.8" y="691.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1085.8" y="675.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1085.8" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_method_entry() (1 samples, 0.04%)</title><rect x="1085.8" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.8" y="654.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_parameters_for_speculation() (1 samples, 0.04%)</title><rect x="1085.8" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.8" y="638.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.04%)</title><rect x="1086.2" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.2" y="734.0"></text>
</g>
<g>
<title>RegionNode::RegionNode(unsigned int) (1 samples, 0.04%)</title><rect x="1086.2" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.2" y="718.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.04%)</title><rect x="1086.2" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.2" y="702.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1086.2" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1086.6" y="1011.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1086.6" y="995.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.6" y="1006.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1086.6" y="979.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.6" y="990.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1086.6" y="963.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.6" y="974.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1086.6" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.6" y="958.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1086.6" y="931.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.6" y="942.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1086.6" y="915.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.6" y="926.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1086.6" y="899.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.6" y="910.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1086.6" y="883.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.6" y="894.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.04%)</title><rect x="1086.6" y="867.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.6" y="878.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*) (1 samples, 0.04%)</title><rect x="1086.6" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.6" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1087.1" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.1" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1087.1" y="1059.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.1" y="1070.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.04%)</title><rect x="1087.1" y="1043.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.1" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.04%)</title><rect x="1087.1" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.1" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.04%)</title><rect x="1087.1" y="1011.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.1" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="1087.1" y="995.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.1" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.04%)</title><rect x="1087.1" y="979.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.1" y="990.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.04%)</title><rect x="1087.1" y="963.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.1" y="974.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.04%)</title><rect x="1087.1" y="947.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1087.5" y="1091.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1087.5" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.5" y="1086.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1087.5" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.5" y="1070.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1087.5" y="1043.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.5" y="1054.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1087.5" y="1027.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.5" y="1038.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1087.5" y="1011.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.5" y="1022.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1087.5" y="995.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.5" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (14 samples, 0.52%)</title><rect x="1087.9" y="1155.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.9" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.37%)</title><rect x="1087.9" y="1139.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.9" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.37%)</title><rect x="1087.9" y="1123.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.37%)</title><rect x="1087.9" y="1107.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.37%)</title><rect x="1087.9" y="1091.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.37%)</title><rect x="1087.9" y="1075.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.9" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (10 samples, 0.37%)</title><rect x="1087.9" y="1059.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.9" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.37%)</title><rect x="1087.9" y="1043.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1090.9" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.37%)</title><rect x="1087.9" y="1027.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.37%)</title><rect x="1087.9" y="1011.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.37%)</title><rect x="1087.9" y="995.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1090.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.37%)</title><rect x="1087.9" y="979.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.9" y="990.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (10 samples, 0.37%)</title><rect x="1087.9" y="963.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.9" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (10 samples, 0.37%)</title><rect x="1087.9" y="947.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1090.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.37%)</title><rect x="1087.9" y="931.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.37%)</title><rect x="1087.9" y="915.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.37%)</title><rect x="1087.9" y="899.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.37%)</title><rect x="1087.9" y="883.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.37%)</title><rect x="1087.9" y="867.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.9" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (10 samples, 0.37%)</title><rect x="1087.9" y="851.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1087.9" y="835.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1087.9" y="819.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1087.9" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1087.9" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1087.9" y="771.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1090.9" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1087.9" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.9" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1087.9" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1087.9" y="723.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1087.9" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1087.9" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1087.9" y="675.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.9" y="686.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.04%)</title><rect x="1087.9" y="659.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1090.9" y="670.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1087.9" y="643.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.9" y="654.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.04%)</title><rect x="1087.9" y="627.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.9" y="638.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1087.9" y="611.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1087.9" y="595.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.9" y="606.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*, Node*) (1 samples, 0.04%)</title><rect x="1087.9" y="579.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.9" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1087.9" y="563.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.9" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1087.9" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.9" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (9 samples, 0.33%)</title><rect x="1088.4" y="835.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.33%)</title><rect x="1088.4" y="819.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.33%)</title><rect x="1088.4" y="803.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.33%)</title><rect x="1088.4" y="787.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.33%)</title><rect x="1088.4" y="771.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.33%)</title><rect x="1088.4" y="755.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.4" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (9 samples, 0.33%)</title><rect x="1088.4" y="739.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1088.4" y="723.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.15%)</title><rect x="1088.4" y="707.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.15%)</title><rect x="1088.4" y="691.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.15%)</title><rect x="1088.4" y="675.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.15%)</title><rect x="1088.4" y="659.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.4" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1088.4" y="643.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1088.4" y="627.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1088.4" y="611.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1088.4" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1088.4" y="579.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1088.4" y="563.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.4" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1088.4" y="547.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="531.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1088.4" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1088.4" y="499.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1088.4" y="483.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1088.4" y="467.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.4" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="451.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.4" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="419.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1088.4" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1088.4" y="387.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1088.4" y="371.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1088.4" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.4" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="339.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.4" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="323.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="307.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1088.4" y="291.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1088.4" y="275.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1088.4" y="259.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1088.4" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.4" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="227.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.4" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="211.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.4" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.4" y="195.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.4" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1088.4" y="179.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1088.4" y="163.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.4" y="174.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.04%)</title><rect x="1088.4" y="147.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.4" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.8" y="531.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.8" y="515.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1088.8" y="499.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1088.8" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1088.8" y="467.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1091.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1088.8" y="451.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.8" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.8" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.8" y="419.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1088.8" y="403.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1088.8" y="387.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1088.8" y="371.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1088.8" y="355.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.8" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1088.8" y="339.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.8" y="350.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1088.8" y="323.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.8" y="334.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.04%)</title><rect x="1088.8" y="307.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.8" y="318.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.04%)</title><rect x="1088.8" y="291.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.8" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1089.3" y="627.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1092.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1089.3" y="611.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1089.3" y="595.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1089.3" y="579.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1089.3" y="563.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1092.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1089.3" y="547.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.3" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1089.3" y="531.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.3" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1089.3" y="515.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1089.3" y="499.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1089.3" y="483.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1089.3" y="467.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1089.3" y="451.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1089.3" y="435.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.3" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1089.3" y="419.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.3" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1089.3" y="403.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1089.3" y="387.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1089.3" y="371.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1089.3" y="355.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1089.3" y="339.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1089.3" y="323.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.3" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1089.3" y="307.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.3" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1089.3" y="291.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.3" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1089.3" y="275.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1089.3" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1089.3" y="243.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1089.3" y="227.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1089.3" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.3" y="222.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1089.3" y="195.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.3" y="206.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1089.3" y="179.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.3" y="190.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="1089.3" y="163.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.3" y="174.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="1089.3" y="147.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.3" y="158.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="1089.3" y="131.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.3" y="142.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.04%)</title><rect x="1089.3" y="115.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1089.7" y="323.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.7" y="334.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.04%)</title><rect x="1089.7" y="307.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.7" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.19%)</title><rect x="1090.1" y="723.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.19%)</title><rect x="1090.1" y="707.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.19%)</title><rect x="1090.1" y="691.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.19%)</title><rect x="1090.1" y="675.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.19%)</title><rect x="1090.1" y="659.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.19%)</title><rect x="1090.1" y="643.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.1" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.19%)</title><rect x="1090.1" y="627.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1090.1" y="611.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.11%)</title><rect x="1090.1" y="595.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.11%)</title><rect x="1090.1" y="579.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.11%)</title><rect x="1090.1" y="563.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.11%)</title><rect x="1090.1" y="547.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.1" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1090.1" y="531.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1090.1" y="515.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1090.1" y="499.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1090.1" y="483.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1090.1" y="467.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1090.1" y="451.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.1" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1090.1" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1090.1" y="419.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1090.1" y="403.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1090.1" y="387.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1090.1" y="371.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.1" y="382.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.04%)</title><rect x="1090.1" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.1" y="366.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1090.1" y="339.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.1" y="350.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.04%)</title><rect x="1090.1" y="323.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.1" y="334.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1090.1" y="307.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.1" y="318.0"></text>
</g>
<g>
<title>PhaseTransform::set_type_bottom(Node const*) (1 samples, 0.04%)</title><rect x="1090.1" y="291.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.1" y="302.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="1090.1" y="275.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.1" y="286.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1090.1" y="259.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.1" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1090.1" y="243.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1093.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1090.6" y="355.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.6" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1090.6" y="339.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1090.6" y="323.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1090.6" y="307.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1090.6" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1090.6" y="275.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1090.6" y="259.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.6" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1090.6" y="243.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1090.6" y="227.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.6" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1090.6" y="211.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1090.6" y="195.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1090.6" y="179.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1090.6" y="163.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.6" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.04%)</title><rect x="1090.6" y="147.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.6" y="158.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1090.6" y="131.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.6" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.0" y="515.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.0" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1091.0" y="483.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1094.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1091.0" y="467.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.0" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1091.4" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1091.4" y="595.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1091.4" y="579.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1091.4" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1091.4" y="547.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1094.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1091.4" y="531.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.4" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1091.4" y="515.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.4" y="499.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1091.4" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1091.4" y="467.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1091.4" y="451.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1091.4" y="435.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.4" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.4" y="419.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.4" y="403.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1091.4" y="387.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1091.4" y="371.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1091.4" y="355.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1091.4" y="339.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.4" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.4" y="323.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.4" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.4" y="307.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.4" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.4" y="291.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.4" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1091.4" y="275.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1091.4" y="259.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1091.4" y="243.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1091.4" y="227.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.4" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.4" y="211.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.4" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.4" y="195.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.4" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.4" y="179.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.4" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1091.4" y="163.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1091.4" y="147.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.4" y="158.0"></text>
</g>
<g>
<title>ciMethod::is_initializer() const (1 samples, 0.04%)</title><rect x="1091.4" y="131.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.4" y="142.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.04%)</title><rect x="1091.4" y="115.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.4" y="126.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="1091.4" y="99.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.4" y="110.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="1091.4" y="83.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.4" y="94.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1091.4" y="67.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.4" y="78.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1091.4" y="51.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.4" y="62.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1091.4" y="35.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1094.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.9" y="499.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.9" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1091.9" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1091.9" y="451.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1091.9" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1091.9" y="419.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.9" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.9" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1091.9" y="387.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1091.9" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1091.9" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1091.9" y="339.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.9" y="350.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.04%)</title><rect x="1091.9" y="323.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.9" y="334.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.04%)</title><rect x="1091.9" y="307.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.9" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1092.3" y="1139.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.3" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1092.3" y="1123.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.15%)</title><rect x="1092.3" y="1107.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.15%)</title><rect x="1092.3" y="1091.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.15%)</title><rect x="1092.3" y="1075.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.15%)</title><rect x="1092.3" y="1059.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.3" y="1070.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1092.3" y="1043.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.3" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1092.3" y="1027.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.3" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1092.3" y="1011.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.3" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.15%)</title><rect x="1092.3" y="995.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.15%)</title><rect x="1092.3" y="979.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.15%)</title><rect x="1092.3" y="963.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.15%)</title><rect x="1092.3" y="947.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.3" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1092.3" y="931.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.3" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1092.3" y="915.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.3" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1092.3" y="899.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.15%)</title><rect x="1092.3" y="883.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.15%)</title><rect x="1092.3" y="867.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.15%)</title><rect x="1092.3" y="851.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.15%)</title><rect x="1092.3" y="835.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1092.3" y="819.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1092.3" y="803.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1092.3" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1092.3" y="771.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1092.3" y="755.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1092.3" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.3" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1092.3" y="723.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1092.3" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1092.3" y="691.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1092.3" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1092.3" y="659.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1092.3" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1092.3" y="627.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.3" y="611.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1092.3" y="595.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1092.3" y="579.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1092.3" y="563.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1092.3" y="547.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.3" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.3" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.3" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.3" y="515.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.3" y="499.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1092.3" y="483.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1092.3" y="467.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1092.3" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1092.3" y="435.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.3" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.3" y="419.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.3" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.3" y="403.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.3" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1092.3" y="387.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1092.3" y="371.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1092.3" y="355.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1092.3" y="339.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.3" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.3" y="323.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.3" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.3" y="307.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.3" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1092.3" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1092.3" y="275.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1092.3" y="259.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.3" y="270.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.04%)</title><rect x="1092.3" y="243.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.3" y="254.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1092.3" y="227.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.3" y="238.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.04%)</title><rect x="1092.3" y="211.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.3" y="222.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.04%)</title><rect x="1092.3" y="195.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.3" y="206.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1092.3" y="179.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.3" y="190.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.04%)</title><rect x="1092.3" y="163.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.3" y="174.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.04%)</title><rect x="1092.3" y="147.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.3" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.8" y="611.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.8" y="595.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1092.8" y="579.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1092.8" y="563.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1092.8" y="547.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1092.8" y="531.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.8" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.8" y="515.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.8" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.8" y="499.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1092.8" y="483.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1092.8" y="467.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1092.8" y="451.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1092.8" y="435.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1092.8" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1092.8" y="403.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.8" y="414.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1092.8" y="387.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.8" y="398.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1092.8" y="371.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.8" y="382.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1092.8" y="355.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.8" y="366.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1092.8" y="339.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.8" y="350.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1092.8" y="323.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.8" y="334.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.04%)</title><rect x="1092.8" y="307.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.8" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1092.8" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.8" y="302.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1092.8" y="275.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.8" y="286.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1092.8" y="259.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.8" y="270.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1092.8" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.8" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.04%)</title><rect x="1092.8" y="227.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.8" y="238.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1092.8" y="211.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.8" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1093.2" y="803.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1093.2" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1093.2" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1093.2" y="755.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1093.2" y="739.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1093.2" y="723.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.2" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1093.2" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.2" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1093.2" y="691.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1093.2" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1093.2" y="659.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1093.2" y="643.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1093.2" y="627.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.2" y="638.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.04%)</title><rect x="1093.2" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.2" y="622.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1093.2" y="595.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.2" y="606.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.04%)</title><rect x="1093.2" y="579.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.04%)</title><rect x="1093.2" y="563.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.2" y="574.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.04%)</title><rect x="1093.2" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1093.6" y="611.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.6" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1093.6" y="595.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.6" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1093.6" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1093.6" y="563.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1093.6" y="547.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1093.6" y="531.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1093.6" y="515.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1093.6" y="499.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.6" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1093.6" y="483.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.6" y="494.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.04%)</title><rect x="1093.6" y="467.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.6" y="478.0"></text>
</g>
<g>
<title>GraphKit::create_and_xform_if(Node*, Node*, float, float) (1 samples, 0.04%)</title><rect x="1093.6" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.6" y="462.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1093.6" y="435.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1094.1" y="1171.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1094.1" y="1155.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.1" y="1166.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1094.1" y="1139.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.1" y="1150.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1094.1" y="1123.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.1" y="1134.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1094.1" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.1" y="1118.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1094.1" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.1" y="1102.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1094.1" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.1" y="1086.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.04%)</title><rect x="1094.1" y="1059.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.1" y="1070.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1094.1" y="1043.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.1" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.04%)</title><rect x="1094.1" y="1027.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1094.5" y="1171.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.5" y="1182.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1095.0" y="1235.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.0" y="1246.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1095.0" y="1219.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.0" y="1230.0"></text>
</g>
<g>
<title>ReplacedNodes::reset() (1 samples, 0.04%)</title><rect x="1095.4" y="1235.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.4" y="1246.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (2 samples, 0.07%)</title><rect x="1095.8" y="1235.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.8" y="1246.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (2 samples, 0.07%)</title><rect x="1095.8" y="1219.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.8" y="1230.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.07%)</title><rect x="1095.8" y="1203.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1098.8" y="1214.0"></text>
</g>
<g>
<title>Compile::~Compile() (3 samples, 0.11%)</title><rect x="1096.7" y="1251.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.7" y="1262.0"></text>
</g>
<g>
<title>Arena::~Arena() (3 samples, 0.11%)</title><rect x="1096.7" y="1235.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.7" y="1246.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (3 samples, 0.11%)</title><rect x="1096.7" y="1219.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.7" y="1230.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.11%)</title><rect x="1096.7" y="1203.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.7" y="1214.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.11%)</title><rect x="1096.7" y="1187.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1099.7" y="1198.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (3 samples, 0.11%)</title><rect x="1096.7" y="1171.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1099.7" y="1182.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (3 samples, 0.11%)</title><rect x="1096.7" y="1155.0" width="1.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1099.7" y="1166.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (1 samples, 0.04%)</title><rect x="1098.0" y="1267.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.0" y="1278.0"></text>
</g>
<g>
<title>CompileTask::print(outputStream*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1098.0" y="1251.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.0" y="1262.0"></text>
</g>
<g>
<title>CompileTask::print_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1098.0" y="1235.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.0" y="1246.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.04%)</title><rect x="1098.0" y="1219.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.0" y="1230.0"></text>
</g>
<g>
<title>Symbol::print_symbol_on(outputStream*) const (1 samples, 0.04%)</title><rect x="1098.0" y="1203.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.0" y="1214.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.04%)</title><rect x="1098.0" y="1187.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1101.0" y="1198.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (148 samples, 5.49%)</title><rect x="1098.5" y="1267.0" width="64.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.5" y="1278.0">Compile..</text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.04%)</title><rect x="1098.5" y="1251.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.5" y="1262.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (147 samples, 5.46%)</title><rect x="1098.9" y="1251.0" width="64.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.9" y="1262.0">Compila..</text>
</g>
<g>
<title>Compilation::compile_method() (147 samples, 5.46%)</title><rect x="1098.9" y="1235.0" width="64.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.9" y="1246.0">Compila..</text>
</g>
<g>
<title>Compilation::compile_java_method() (130 samples, 4.83%)</title><rect x="1098.9" y="1219.0" width="56.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.9" y="1230.0">Compil..</text>
</g>
<g>
<title>Compilation::build_hir() (58 samples, 2.15%)</title><rect x="1098.9" y="1203.0" width="25.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.9" y="1214.0">C..</text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (2 samples, 0.07%)</title><rect x="1098.9" y="1187.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.9" y="1198.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1171.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.9" y="1182.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1155.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.9" y="1166.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1139.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.9" y="1150.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1123.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.9" y="1134.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.9" y="1118.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.9" y="1102.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1075.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.9" y="1086.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1059.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.9" y="1070.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1043.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.9" y="1054.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1027.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.9" y="1038.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="1011.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.9" y="1022.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="995.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.9" y="1006.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="979.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.9" y="990.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="963.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.9" y="974.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="947.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.9" y="958.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1098.9" y="931.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.9" y="942.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.04%)</title><rect x="1098.9" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.9" y="926.0"></text>
</g>
<g>
<title>Invoke::state_values_do(ValueVisitor*) (1 samples, 0.04%)</title><rect x="1098.9" y="899.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.9" y="910.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.04%)</title><rect x="1098.9" y="883.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.9" y="894.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (1 samples, 0.04%)</title><rect x="1098.9" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.9" y="878.0"></text>
</g>
<g>
<title>non-virtual thunk to SubstitutionResolver::visit(Instruction**) (1 samples, 0.04%)</title><rect x="1098.9" y="851.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.9" y="862.0"></text>
</g>
<g>
<title>ValueMap::ValueMap(ValueMap*) (1 samples, 0.04%)</title><rect x="1099.3" y="1171.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.3" y="1182.0"></text>
</g>
<g>
<title>ResourceBitMap::ResourceBitMap(unsigned long) (1 samples, 0.04%)</title><rect x="1099.3" y="1155.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.3" y="1166.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1099.3" y="1139.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.3" y="1150.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (47 samples, 1.74%)</title><rect x="1099.8" y="1187.0" width="20.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.8" y="1198.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (47 samples, 1.74%)</title><rect x="1099.8" y="1171.0" width="20.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.8" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (47 samples, 1.74%)</title><rect x="1099.8" y="1155.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.8" y="1166.0"></text>
</g>
<g>
<title>BlockBegin::set_end(BlockEnd*) (1 samples, 0.04%)</title><rect x="1099.8" y="1139.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.8" y="1150.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (2 samples, 0.07%)</title><rect x="1100.2" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.2" y="1150.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (2 samples, 0.07%)</title><rect x="1100.2" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.2" y="1134.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (2 samples, 0.07%)</title><rect x="1100.2" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.2" y="1118.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (2 samples, 0.07%)</title><rect x="1100.2" y="1091.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.2" y="1102.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.04%)</title><rect x="1100.2" y="1075.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.2" y="1086.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.04%)</title><rect x="1100.2" y="1059.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.2" y="1070.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.04%)</title><rect x="1100.2" y="1043.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.2" y="1054.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1100.2" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.2" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::propagate_liveness() (1 samples, 0.04%)</title><rect x="1100.6" y="1075.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.6" y="1086.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.04%)</title><rect x="1100.6" y="1059.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.6" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (44 samples, 1.63%)</title><rect x="1101.1" y="1139.0" width="19.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.1" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (43 samples, 1.60%)</title><rect x="1101.1" y="1123.0" width="18.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.1" y="1134.0"></text>
</g>
<g>
<title>BlockBegin::set_end(BlockEnd*) (1 samples, 0.04%)</title><rect x="1102.4" y="1107.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.4" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (5 samples, 0.19%)</title><rect x="1102.8" y="1107.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.8" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (2 samples, 0.07%)</title><rect x="1102.8" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.8" y="1102.0"></text>
</g>
<g>
<title>StoreField::visit(InstructionVisitor*) (2 samples, 0.07%)</title><rect x="1102.8" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.8" y="1086.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (3 samples, 0.11%)</title><rect x="1103.7" y="1091.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.7" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (3 samples, 0.11%)</title><rect x="1103.7" y="1075.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.7" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (3 samples, 0.11%)</title><rect x="1103.7" y="1059.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.7" y="1070.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (3 samples, 0.11%)</title><rect x="1103.7" y="1043.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.7" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (3 samples, 0.11%)</title><rect x="1103.7" y="1027.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.7" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (3 samples, 0.11%)</title><rect x="1103.7" y="1011.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.7" y="1022.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.04%)</title><rect x="1103.7" y="995.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.7" y="1006.0"></text>
</g>
<g>
<title>SymbolTable::lookup_common(char const*, int, unsigned int) (1 samples, 0.04%)</title><rect x="1103.7" y="979.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.7" y="990.0"></text>
</g>
<g>
<title>SymbolTable::lookup_shared(char const*, int, unsigned int) (1 samples, 0.04%)</title><rect x="1103.7" y="963.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.7" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (2 samples, 0.07%)</title><rect x="1104.1" y="995.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.1" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (2 samples, 0.07%)</title><rect x="1104.1" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.1" y="990.0"></text>
</g>
<g>
<title>FieldType::get_array_info(Symbol*, FieldArrayInfo&amp;, Thread*) (2 samples, 0.07%)</title><rect x="1104.1" y="963.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.1" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (2 samples, 0.07%)</title><rect x="1105.0" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.0" y="1118.0"></text>
</g>
<g>
<title>Instruction::needs_exception_state() const (1 samples, 0.04%)</title><rect x="1105.5" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.5" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.04%)</title><rect x="1105.9" y="1107.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.9" y="1118.0"></text>
</g>
<g>
<title>If::If(Instruction*, Instruction::Condition, bool, Instruction*, BlockBegin*, BlockBegin*, ValueStack*, bool) (1 samples, 0.04%)</title><rect x="1105.9" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.9" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;BlockBegin*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1105.9" y="1075.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.9" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (31 samples, 1.15%)</title><rect x="1106.3" y="1107.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.3" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (25 samples, 0.93%)</title><rect x="1106.3" y="1091.0" width="11.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.3" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (25 samples, 0.93%)</title><rect x="1106.3" y="1075.0" width="11.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.3" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (23 samples, 0.85%)</title><rect x="1106.8" y="1059.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.8" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::connect_to_end(BlockBegin*) (1 samples, 0.04%)</title><rect x="1106.8" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.8" y="1054.0"></text>
</g>
<g>
<title>ValueStack::copy_for_parsing() (1 samples, 0.04%)</title><rect x="1106.8" y="1027.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.8" y="1038.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1106.8" y="1011.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.8" y="1022.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::appendAll(GrowableArray&lt;Instruction*&gt; const*) (1 samples, 0.04%)</title><rect x="1106.8" y="995.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.8" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (22 samples, 0.82%)</title><rect x="1107.2" y="1043.0" width="9.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.2" y="1054.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (2 samples, 0.07%)</title><rect x="1107.2" y="1027.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.2" y="1038.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1107.2" y="1011.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.2" y="1022.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1107.2" y="995.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.2" y="1006.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1107.2" y="979.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.2" y="990.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1107.7" y="1011.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.7" y="1022.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1107.7" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.7" y="1006.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.04%)</title><rect x="1107.7" y="979.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.7" y="990.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.04%)</title><rect x="1107.7" y="963.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.7" y="974.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1107.7" y="947.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1110.7" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (3 samples, 0.11%)</title><rect x="1108.1" y="1027.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.1" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (3 samples, 0.11%)</title><rect x="1108.1" y="1011.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.1" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (3 samples, 0.11%)</title><rect x="1108.1" y="995.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.1" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (3 samples, 0.11%)</title><rect x="1108.1" y="979.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.1" y="990.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (3 samples, 0.11%)</title><rect x="1108.1" y="963.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.1" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.04%)</title><rect x="1108.1" y="947.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.1" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (2 samples, 0.07%)</title><rect x="1108.5" y="947.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.5" y="958.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.04%)</title><rect x="1109.0" y="931.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.0" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (16 samples, 0.59%)</title><rect x="1109.4" y="1027.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.4" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (13 samples, 0.48%)</title><rect x="1109.4" y="1011.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.4" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (11 samples, 0.41%)</title><rect x="1109.8" y="995.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.8" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::args_list_for_profiling(ciMethod*, int&amp;, bool) (1 samples, 0.04%)</title><rect x="1109.8" y="979.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.8" y="990.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.04%)</title><rect x="1109.8" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.8" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_empty_methodData() (1 samples, 0.04%)</title><rect x="1109.8" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.8" y="958.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData() (1 samples, 0.04%)</title><rect x="1109.8" y="931.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.8" y="942.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1109.8" y="915.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1112.8" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (9 samples, 0.33%)</title><rect x="1110.3" y="979.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.3" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::connect_to_end(BlockBegin*) (1 samples, 0.04%)</title><rect x="1110.3" y="963.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.3" y="974.0"></text>
</g>
<g>
<title>ValueStack::copy_for_parsing() (1 samples, 0.04%)</title><rect x="1110.3" y="947.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.3" y="958.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1110.3" y="931.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.3" y="942.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1110.3" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.3" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (8 samples, 0.30%)</title><rect x="1110.7" y="963.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.7" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1110.7" y="947.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.7" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.04%)</title><rect x="1110.7" y="931.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.7" y="942.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.04%)</title><rect x="1110.7" y="915.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.7" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.04%)</title><rect x="1111.2" y="947.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.2" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1111.2" y="931.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.2" y="942.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1111.2" y="915.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.2" y="926.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1111.2" y="899.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.2" y="910.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1111.2" y="883.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.2" y="894.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.04%)</title><rect x="1111.2" y="867.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.2" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 0.22%)</title><rect x="1111.6" y="947.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.6" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (6 samples, 0.22%)</title><rect x="1111.6" y="931.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.6" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (6 samples, 0.22%)</title><rect x="1111.6" y="915.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.6" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 0.19%)</title><rect x="1111.6" y="899.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.6" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 0.19%)</title><rect x="1111.6" y="883.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.6" y="894.0"></text>
</g>
<g>
<title>Compilation::dependency_recorder() const (2 samples, 0.07%)</title><rect x="1111.6" y="867.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.11%)</title><rect x="1112.5" y="867.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.5" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1112.9" y="851.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.9" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1112.9" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.9" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1112.9" y="819.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1112.9" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.9" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.04%)</title><rect x="1112.9" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.9" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1113.3" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.3" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1113.3" y="835.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.3" y="846.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.04%)</title><rect x="1113.3" y="819.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.3" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.04%)</title><rect x="1113.3" y="803.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.3" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, LinkInfo const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="1113.3" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.3" y="798.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="1113.3" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.3" y="782.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.04%)</title><rect x="1113.3" y="755.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.3" y="766.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.04%)</title><rect x="1113.8" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.8" y="910.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="1113.8" y="883.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.8" y="894.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.04%)</title><rect x="1113.8" y="867.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.8" y="878.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 0.04%)</title><rect x="1113.8" y="851.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.8" y="862.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1187956ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1187956ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="1113.8" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.8" y="846.0"></text>
</g>
<g>
<title>ciMethod::has_balanced_monitors() (1 samples, 0.04%)</title><rect x="1114.2" y="979.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.2" y="990.0"></text>
</g>
<g>
<title>GenerateOopMap::compute_map(Thread*) (1 samples, 0.04%)</title><rect x="1114.2" y="963.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.2" y="974.0"></text>
</g>
<g>
<title>GenerateOopMap::do_interpretation() (1 samples, 0.04%)</title><rect x="1114.2" y="947.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.2" y="958.0"></text>
</g>
<g>
<title>GenerateOopMap::init_basic_blocks() (1 samples, 0.04%)</title><rect x="1114.2" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.2" y="942.0"></text>
</g>
<g>
<title>BytecodeStream::next() (1 samples, 0.04%)</title><rect x="1114.2" y="915.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.2" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.04%)</title><rect x="1114.7" y="995.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.7" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1114.7" y="979.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.7" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1114.7" y="963.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.7" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1114.7" y="947.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.7" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1114.7" y="931.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.7" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1114.7" y="915.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.7" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1114.7" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.04%)</title><rect x="1114.7" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.7" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1114.7" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.7" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1114.7" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.7" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1114.7" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1114.7" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1114.7" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.7" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1114.7" y="787.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.04%)</title><rect x="1114.7" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.7" y="782.0"></text>
</g>
<g>
<title>ciMemberName::get_vmtarget() const (1 samples, 0.04%)</title><rect x="1114.7" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.7" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1114.7" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.7" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1114.7" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="734.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1114.7" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.7" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (3 samples, 0.11%)</title><rect x="1115.1" y="1011.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.1" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="1115.1" y="995.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.1" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="1115.1" y="979.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1118.1" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.07%)</title><rect x="1115.5" y="995.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.5" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.07%)</title><rect x="1115.5" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.5" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.07%)</title><rect x="1115.5" y="963.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.5" y="974.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 0.07%)</title><rect x="1115.5" y="947.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.5" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.04%)</title><rect x="1115.5" y="931.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.5" y="942.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1115.5" y="915.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.5" y="926.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.04%)</title><rect x="1115.5" y="899.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.5" y="910.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.04%)</title><rect x="1116.0" y="931.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.0" y="942.0"></text>
</g>
<g>
<title>SignatureStream::next() (1 samples, 0.04%)</title><rect x="1116.0" y="915.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.0" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_dest() const (1 samples, 0.04%)</title><rect x="1116.4" y="1027.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.4" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.04%)</title><rect x="1116.9" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.9" y="1070.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.04%)</title><rect x="1116.9" y="1043.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.9" y="1054.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.04%)</title><rect x="1116.9" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.9" y="1038.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.04%)</title><rect x="1116.9" y="1011.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.9" y="1022.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.04%)</title><rect x="1116.9" y="995.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.9" y="1006.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.04%)</title><rect x="1116.9" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.9" y="990.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.04%)</title><rect x="1116.9" y="963.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.9" y="974.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.04%)</title><rect x="1116.9" y="947.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.9" y="958.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1116.9" y="931.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.9" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (5 samples, 0.19%)</title><rect x="1117.3" y="1091.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.3" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (5 samples, 0.19%)</title><rect x="1117.3" y="1075.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.3" y="1086.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (2 samples, 0.07%)</title><rect x="1117.3" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.3" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (2 samples, 0.07%)</title><rect x="1117.3" y="1043.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.3" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (2 samples, 0.07%)</title><rect x="1117.3" y="1027.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.3" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (2 samples, 0.07%)</title><rect x="1117.3" y="1011.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.3" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (2 samples, 0.07%)</title><rect x="1117.3" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.3" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.07%)</title><rect x="1117.3" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.3" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (2 samples, 0.07%)</title><rect x="1117.3" y="963.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.3" y="974.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (2 samples, 0.07%)</title><rect x="1117.3" y="947.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1120.3" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (3 samples, 0.11%)</title><rect x="1118.2" y="1059.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.2" y="1070.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.07%)</title><rect x="1118.6" y="1043.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.6" y="1054.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 0.07%)</title><rect x="1118.6" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.6" y="1038.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.04%)</title><rect x="1119.0" y="1011.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.0" y="1022.0"></text>
</g>
<g>
<title>SignatureStream::~SignatureStream() (1 samples, 0.04%)</title><rect x="1119.0" y="995.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.0" y="1006.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.04%)</title><rect x="1119.5" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.5" y="1102.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.04%)</title><rect x="1119.5" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.5" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(Klass*, LinkInfo const&amp;) (1 samples, 0.04%)</title><rect x="1119.5" y="1059.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.5" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.04%)</title><rect x="1119.5" y="1043.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.5" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="1119.5" y="1027.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.5" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.04%)</title><rect x="1119.5" y="1011.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.5" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="1119.5" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.5" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::setup_osr_entry_block() (1 samples, 0.04%)</title><rect x="1119.9" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.9" y="1134.0"></text>
</g>
<g>
<title>ciMethod::live_local_oops_at_bci(int) (1 samples, 0.04%)</title><rect x="1119.9" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.9" y="1118.0"></text>
</g>
<g>
<title>OopMapCache::compute_one_oop_map(methodHandle const&amp;, int, InterpreterOopMap*) (1 samples, 0.04%)</title><rect x="1119.9" y="1091.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.9" y="1102.0"></text>
</g>
<g>
<title>OopMapCacheEntry::fill(methodHandle const&amp;, int) (1 samples, 0.04%)</title><rect x="1119.9" y="1075.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.9" y="1086.0"></text>
</g>
<g>
<title>OopMapForCacheEntry::compute_map(Thread*) (1 samples, 0.04%)</title><rect x="1119.9" y="1059.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.9" y="1070.0"></text>
</g>
<g>
<title>GenerateOopMap::compute_map(Thread*) (1 samples, 0.04%)</title><rect x="1119.9" y="1043.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.9" y="1054.0"></text>
</g>
<g>
<title>GenerateOopMap::do_interpretation() (1 samples, 0.04%)</title><rect x="1119.9" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.9" y="1038.0"></text>
</g>
<g>
<title>GenerateOopMap::interp_all() (1 samples, 0.04%)</title><rect x="1119.9" y="1011.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.9" y="1022.0"></text>
</g>
<g>
<title>GenerateOopMap::monitor_push(CellTypeState) (1 samples, 0.04%)</title><rect x="1119.9" y="995.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.9" y="1006.0"></text>
</g>
<g>
<title>IR::compute_code() (2 samples, 0.07%)</title><rect x="1120.4" y="1187.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.4" y="1198.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (2 samples, 0.07%)</title><rect x="1120.4" y="1171.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.4" y="1182.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_order(BlockBegin*) (1 samples, 0.04%)</title><rect x="1120.4" y="1155.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.4" y="1166.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_dominator(BlockBegin*, BlockBegin*) (1 samples, 0.04%)</title><rect x="1120.4" y="1139.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.4" y="1150.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1120.4" y="1123.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1123.4" y="1134.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, int, int const&amp;, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1120.8" y="1155.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.8" y="1166.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.04%)</title><rect x="1121.2" y="1187.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.2" y="1198.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (1 samples, 0.04%)</title><rect x="1121.2" y="1171.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.2" y="1182.0"></text>
</g>
<g>
<title>UseCountComputer::block_do(BlockBegin*) (1 samples, 0.04%)</title><rect x="1121.2" y="1155.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.2" y="1166.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (3 samples, 0.11%)</title><rect x="1121.7" y="1187.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.7" y="1198.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (3 samples, 0.11%)</title><rect x="1121.7" y="1171.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.7" y="1182.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_all() (3 samples, 0.11%)</title><rect x="1121.7" y="1155.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.7" y="1166.0"></text>
</g>
<g>
<title>Instruction::as_Phi() (1 samples, 0.04%)</title><rect x="1121.7" y="1139.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.7" y="1150.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (2 samples, 0.07%)</title><rect x="1122.1" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.1" y="1150.0"></text>
</g>
<g>
<title>If::input_values_do(ValueVisitor*) (1 samples, 0.04%)</title><rect x="1122.5" y="1123.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.5" y="1134.0"></text>
</g>
<g>
<title>NullCheckEliminator::visit(Instruction**) (1 samples, 0.04%)</title><rect x="1122.5" y="1107.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.5" y="1118.0"></text>
</g>
<g>
<title>IR::optimize_blocks() (2 samples, 0.07%)</title><rect x="1123.0" y="1187.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.0" y="1198.0"></text>
</g>
<g>
<title>Optimizer::eliminate_blocks() (1 samples, 0.04%)</title><rect x="1123.0" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.0" y="1182.0"></text>
</g>
<g>
<title>BlockMerger::BlockMerger(IR*) (1 samples, 0.04%)</title><rect x="1123.0" y="1155.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.0" y="1166.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.0" y="1150.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="1123.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.0" y="1134.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="1107.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="1118.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.0" y="1102.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.0" y="1086.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="1059.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.0" y="1070.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="1043.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.0" y="1054.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="1027.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.0" y="1038.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="1011.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.0" y="1022.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="995.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.0" y="1006.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="979.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.0" y="990.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="963.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.0" y="974.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.0" y="947.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.0" y="958.0"></text>
</g>
<g>
<title>BlockMerger::block_do(BlockBegin*) (1 samples, 0.04%)</title><rect x="1123.0" y="931.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="942.0"></text>
</g>
<g>
<title>BlockMerger::try_merge(BlockBegin*) (1 samples, 0.04%)</title><rect x="1123.0" y="915.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.0" y="926.0"></text>
</g>
<g>
<title>Optimizer::eliminate_conditional_expressions() (1 samples, 0.04%)</title><rect x="1123.4" y="1171.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.4" y="1182.0"></text>
</g>
<g>
<title>CE_Eliminator::CE_Eliminator(IR*) (1 samples, 0.04%)</title><rect x="1123.4" y="1155.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.4" y="1166.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.4" y="1139.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.4" y="1150.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1123.4" y="1123.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.4" y="1134.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.04%)</title><rect x="1123.4" y="1107.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.4" y="1118.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.04%)</title><rect x="1123.4" y="1091.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="1102.0"></text>
</g>
<g>
<title>IR::split_critical_edges() (1 samples, 0.04%)</title><rect x="1123.9" y="1187.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.9" y="1198.0"></text>
</g>
<g>
<title>qsort (1 samples, 0.04%)</title><rect x="1123.9" y="1171.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1126.9" y="1182.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (22 samples, 0.82%)</title><rect x="1124.3" y="1203.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.3" y="1214.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (4 samples, 0.15%)</title><rect x="1124.3" y="1187.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.3" y="1198.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_entries(GrowableArray&lt;ExceptionInfo*&gt;*) (1 samples, 0.04%)</title><rect x="1124.3" y="1171.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.3" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (2 samples, 0.07%)</title><rect x="1124.7" y="1171.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.7" y="1182.0"></text>
</g>
<g>
<title>ImplicitNullCheckStub::emit_code(LIR_Assembler*) (1 samples, 0.04%)</title><rect x="1124.7" y="1155.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.7" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1124.7" y="1139.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.7" y="1150.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.04%)</title><rect x="1124.7" y="1123.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.7" y="1134.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.04%)</title><rect x="1124.7" y="1107.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.7" y="1118.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.04%)</title><rect x="1124.7" y="1091.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.7" y="1102.0"></text>
</g>
<g>
<title>SimpleExceptionStub::emit_code(LIR_Assembler*) (1 samples, 0.04%)</title><rect x="1125.2" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.2" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1125.2" y="1139.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.2" y="1150.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.04%)</title><rect x="1125.2" y="1123.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.2" y="1134.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.04%)</title><rect x="1125.2" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.2" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="1125.2" y="1091.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.2" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="1125.2" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.2" y="1086.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.04%)</title><rect x="1125.2" y="1059.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.2" y="1070.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="1125.2" y="1043.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.2" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_unwind_handler() (1 samples, 0.04%)</title><rect x="1125.6" y="1171.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.6" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (18 samples, 0.67%)</title><rect x="1126.1" y="1187.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.1" y="1198.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (18 samples, 0.67%)</title><rect x="1126.1" y="1171.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.1" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (4 samples, 0.15%)</title><rect x="1126.1" y="1155.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.1" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (2 samples, 0.07%)</title><rect x="1126.5" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.5" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (2 samples, 0.07%)</title><rect x="1126.5" y="1123.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.5" y="1134.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (2 samples, 0.07%)</title><rect x="1126.5" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.5" y="1118.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (2 samples, 0.07%)</title><rect x="1126.5" y="1091.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.5" y="1102.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (2 samples, 0.07%)</title><rect x="1126.5" y="1075.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.5" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.04%)</title><rect x="1126.5" y="1059.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.5" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.04%)</title><rect x="1126.5" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.5" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="1126.5" y="1027.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.5" y="1038.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.04%)</title><rect x="1126.5" y="1011.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.5" y="1022.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="1126.5" y="995.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.5" y="1006.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.04%)</title><rect x="1126.5" y="979.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.5" y="990.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.04%)</title><rect x="1126.9" y="1059.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.9" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="1126.9" y="1043.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="1054.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int(int) (1 samples, 0.04%)</title><rect x="1126.9" y="1027.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.9" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_static_call_stub() (1 samples, 0.04%)</title><rect x="1127.4" y="1139.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.4" y="1150.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.04%)</title><rect x="1127.4" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.4" y="1134.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.04%)</title><rect x="1127.4" y="1107.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.4" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (4 samples, 0.15%)</title><rect x="1127.8" y="1155.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.8" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::klass2reg_with_patching(RegisterImpl*, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1127.8" y="1139.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.8" y="1150.0"></text>
</g>
<g>
<title>PatchingStub::PatchingStub(MacroAssembler*, PatchingStub::PatchID, int) (1 samples, 0.04%)</title><rect x="1127.8" y="1123.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.8" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (2 samples, 0.07%)</title><rect x="1128.2" y="1139.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.2" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (1 samples, 0.04%)</title><rect x="1128.7" y="1123.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.7" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::add_debug_info_for_null_check(int, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1128.7" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.7" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::reg2mem(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1129.1" y="1139.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.1" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (2 samples, 0.07%)</title><rect x="1129.6" y="1155.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.6" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::type_profile_helper(RegisterImpl*, ciMethodData*, ProfileData*, RegisterImpl*, Label*) (1 samples, 0.04%)</title><rect x="1129.6" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.6" y="1150.0"></text>
</g>
<g>
<title>MacroAssembler::movptr(Address, int) (1 samples, 0.04%)</title><rect x="1129.6" y="1123.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.6" y="1134.0"></text>
</g>
<g>
<title>Assembler::movslq(Address, int) (1 samples, 0.04%)</title><rect x="1129.6" y="1107.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.6" y="1118.0"></text>
</g>
<g>
<title>LIR_OpProfileCall::should_profile_receiver_type() const (1 samples, 0.04%)</title><rect x="1130.0" y="1139.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.0" y="1150.0"></text>
</g>
<g>
<title>ciMethod::java_code_at_bci(int) (1 samples, 0.04%)</title><rect x="1130.0" y="1123.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.0" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (6 samples, 0.22%)</title><rect x="1130.4" y="1155.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.4" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::last_pc() (1 samples, 0.04%)</title><rect x="1130.9" y="1139.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.9" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (4 samples, 0.15%)</title><rect x="1131.3" y="1139.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.3" y="1150.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int(int) (1 samples, 0.04%)</title><rect x="1131.3" y="1123.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.3" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.07%)</title><rect x="1131.7" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.7" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.07%)</title><rect x="1131.7" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.7" y="1118.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.07%)</title><rect x="1131.7" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.7" y="1102.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.07%)</title><rect x="1131.7" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.7" y="1086.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.07%)</title><rect x="1131.7" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.7" y="1070.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (2 samples, 0.07%)</title><rect x="1131.7" y="1043.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.7" y="1054.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.07%)</title><rect x="1131.7" y="1027.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1134.7" y="1038.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.07%)</title><rect x="1131.7" y="1011.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1134.7" y="1022.0"></text>
</g>
<g>
<title>PcDesc::PcDesc(int, int, int) (1 samples, 0.04%)</title><rect x="1132.6" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.6" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::safepoint_poll(LIR_OprDesc*, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1133.1" y="1155.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.1" y="1166.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, relocInfo::relocType, int, int) (1 samples, 0.04%)</title><rect x="1133.1" y="1139.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.1" y="1150.0"></text>
</g>
<g>
<title>poll_Relocation::type() (1 samples, 0.04%)</title><rect x="1133.1" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="1134.0"></text>
</g>
<g>
<title>LIR_OpBranch::emit_code(LIR_Assembler*) (1 samples, 0.04%)</title><rect x="1133.5" y="1155.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.5" y="1166.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (47 samples, 1.74%)</title><rect x="1133.9" y="1203.0" width="20.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.9" y="1214.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (10 samples, 0.37%)</title><rect x="1133.9" y="1187.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.9" y="1198.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (10 samples, 0.37%)</title><rect x="1133.9" y="1171.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.9" y="1182.0"></text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (2 samples, 0.07%)</title><rect x="1134.4" y="1155.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.4" y="1166.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::raw_at_put_grow(int, Instruction* const&amp;, Instruction* const&amp;) (1 samples, 0.04%)</title><rect x="1134.4" y="1139.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.4" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::grow(int) (1 samples, 0.04%)</title><rect x="1134.4" y="1123.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.4" y="1134.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1134.4" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.4" y="1118.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1134.4" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.4" y="1102.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1134.4" y="1075.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.4" y="1086.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.04%)</title><rect x="1134.4" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.4" y="1070.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="1134.4" y="1043.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1137.4" y="1054.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="1134.4" y="1027.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1137.4" y="1038.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1134.8" y="1139.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.8" y="1150.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1134.8" y="1123.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.8" y="1134.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1134.8" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.8" y="1118.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1134.8" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.8" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (3 samples, 0.11%)</title><rect x="1135.2" y="1155.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.2" y="1166.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (3 samples, 0.11%)</title><rect x="1135.2" y="1139.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.2" y="1150.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (3 samples, 0.11%)</title><rect x="1135.2" y="1123.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.2" y="1134.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::raw_at_put_grow(int, ResolveNode* const&amp;, ResolveNode* const&amp;) (3 samples, 0.11%)</title><rect x="1135.2" y="1107.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.2" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::grow(int) (1 samples, 0.04%)</title><rect x="1136.1" y="1091.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.1" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::do_If(If*) (1 samples, 0.04%)</title><rect x="1136.6" y="1155.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.6" y="1166.0"></text>
</g>
<g>
<title>LIRGenerator::walk(Instruction*) (1 samples, 0.04%)</title><rect x="1136.6" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.6" y="1150.0"></text>
</g>
<g>
<title>LIRGenerator::do_Constant(Constant*) (1 samples, 0.04%)</title><rect x="1136.6" y="1123.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.6" y="1134.0"></text>
</g>
<g>
<title>LIR_OprFact::intConst(int) (1 samples, 0.04%)</title><rect x="1136.6" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.6" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::do_Invoke(Invoke*) (1 samples, 0.04%)</title><rect x="1137.0" y="1155.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.0" y="1166.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.04%)</title><rect x="1137.0" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.0" y="1150.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1137.0" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.0" y="1134.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1137.0" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.0" y="1118.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.04%)</title><rect x="1137.0" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.0" y="1102.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.04%)</title><rect x="1137.0" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.0" y="1086.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1137.0" y="1059.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.0" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::do_StoreField(StoreField*) (1 samples, 0.04%)</title><rect x="1137.4" y="1155.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.4" y="1166.0"></text>
</g>
<g>
<title>LIRGenerator::access_store_at(unsigned long long, BasicType, LIRItem&amp;, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1137.4" y="1139.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.4" y="1150.0"></text>
</g>
<g>
<title>ModRefBarrierSetC1::resolve_address(LIRAccess&amp;, bool) (1 samples, 0.04%)</title><rect x="1137.4" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.4" y="1134.0"></text>
</g>
<g>
<title>LIR_List::branch_destination(Label*) (1 samples, 0.04%)</title><rect x="1137.9" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.9" y="1166.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (37 samples, 1.37%)</title><rect x="1138.3" y="1187.0" width="16.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.3" y="1198.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (13 samples, 0.48%)</title><rect x="1138.3" y="1171.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.3" y="1182.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (10 samples, 0.37%)</title><rect x="1138.8" y="1155.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.8" y="1166.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (10 samples, 0.37%)</title><rect x="1138.8" y="1139.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.8" y="1150.0"></text>
</g>
<g>
<title>LIRGenerator::is_vreg_flag_set(int, LIRGenerator::VregFlag) (1 samples, 0.04%)</title><rect x="1139.2" y="1123.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.2" y="1134.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (7 samples, 0.26%)</title><rect x="1139.6" y="1123.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.6" y="1134.0"></text>
</g>
<g>
<title>LinearScanWalker::find_free_reg(int, int, int, int, bool*) (4 samples, 0.15%)</title><rect x="1139.6" y="1107.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.6" y="1118.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.04%)</title><rect x="1141.4" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.4" y="1118.0"></text>
</g>
<g>
<title>Range::intersects_at(Range*) const (1 samples, 0.04%)</title><rect x="1141.4" y="1091.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.4" y="1102.0"></text>
</g>
<g>
<title>LinearScanWalker::free_exclude_active_any() (1 samples, 0.04%)</title><rect x="1141.8" y="1107.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.8" y="1118.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.04%)</title><rect x="1142.3" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.3" y="1118.0"></text>
</g>
<g>
<title>IntervalWalker::append_to_unhandled(Interval**, Interval*) (1 samples, 0.04%)</title><rect x="1142.3" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.3" y="1102.0"></text>
</g>
<g>
<title>LinearScanWalker::insert_move(int, Interval*, Interval*) (1 samples, 0.04%)</title><rect x="1142.7" y="1123.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.7" y="1134.0"></text>
</g>
<g>
<title>MoveResolver::move_insert_position(LIR_List*, int) (1 samples, 0.04%)</title><rect x="1142.7" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.7" y="1118.0"></text>
</g>
<g>
<title>MoveResolver::resolve_mappings() (1 samples, 0.04%)</title><rect x="1142.7" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.7" y="1102.0"></text>
</g>
<g>
<title>LinearScanWalker::LinearScanWalker(LinearScan*, Interval*, Interval*) (2 samples, 0.07%)</title><rect x="1143.1" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.1" y="1166.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.04%)</title><rect x="1143.1" y="1139.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.1" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1143.6" y="1139.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.6" y="1150.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (5 samples, 0.19%)</title><rect x="1144.0" y="1171.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.0" y="1182.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (3 samples, 0.11%)</title><rect x="1144.0" y="1155.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.0" y="1166.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.04%)</title><rect x="1144.0" y="1139.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.0" y="1150.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.04%)</title><rect x="1144.4" y="1139.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.4" y="1150.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.04%)</title><rect x="1144.4" y="1123.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.4" y="1134.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (1 samples, 0.04%)</title><rect x="1144.9" y="1139.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.9" y="1150.0"></text>
</g>
<g>
<title>CodeEmitInfo::interpreter_frame_size() const (1 samples, 0.04%)</title><rect x="1144.9" y="1123.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.9" y="1134.0"></text>
</g>
<g>
<title>LinearScan::init_compute_oop_maps() (2 samples, 0.07%)</title><rect x="1145.3" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.3" y="1166.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (12 samples, 0.45%)</title><rect x="1146.2" y="1171.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.2" y="1182.0"></text>
</g>
<g>
<title>Interval::add_range(int, int) (1 samples, 0.04%)</title><rect x="1147.1" y="1155.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.1" y="1166.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.04%)</title><rect x="1147.5" y="1155.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.5" y="1166.0"></text>
</g>
<g>
<title>LIR_OpVisitState::append(LIR_OprDesc*&amp;, LIR_OpVisitState::OprMode) (1 samples, 0.04%)</title><rect x="1147.5" y="1139.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.5" y="1150.0"></text>
</g>
<g>
<title>LinearScan::add_def(LIR_OprDesc*, int, IntervalUseKind) (2 samples, 0.07%)</title><rect x="1148.0" y="1155.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.0" y="1166.0"></text>
</g>
<g>
<title>LinearScan::add_def(int, int, IntervalUseKind, BasicType) (1 samples, 0.04%)</title><rect x="1148.0" y="1139.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.0" y="1150.0"></text>
</g>
<g>
<title>LinearScan::reg_numHi(LIR_OprDesc*) (1 samples, 0.04%)</title><rect x="1148.4" y="1139.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.4" y="1150.0"></text>
</g>
<g>
<title>LinearScan::add_def(int, int, IntervalUseKind, BasicType) (2 samples, 0.07%)</title><rect x="1148.8" y="1155.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.8" y="1166.0"></text>
</g>
<g>
<title>Interval::add_use_pos(int, IntervalUseKind) (2 samples, 0.07%)</title><rect x="1148.8" y="1139.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.8" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::append(int const&amp;) (2 samples, 0.07%)</title><rect x="1148.8" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.8" y="1134.0"></text>
</g>
<g>
<title>LinearScan::add_register_hints(LIR_Op*) (1 samples, 0.04%)</title><rect x="1149.7" y="1155.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.7" y="1166.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (3 samples, 0.11%)</title><rect x="1150.1" y="1155.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.1" y="1166.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (3 samples, 0.11%)</title><rect x="1150.1" y="1139.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.1" y="1150.0"></text>
</g>
<g>
<title>Interval::Interval(int) (3 samples, 0.11%)</title><rect x="1150.1" y="1123.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.1" y="1134.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1150.1" y="1107.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.1" y="1118.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1150.1" y="1091.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.1" y="1102.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.04%)</title><rect x="1150.1" y="1075.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.1" y="1086.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (2 samples, 0.07%)</title><rect x="1150.6" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.6" y="1118.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1150.6" y="1091.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.6" y="1102.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1151.0" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.0" y="1102.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (3 samples, 0.11%)</title><rect x="1151.5" y="1171.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.5" y="1182.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.04%)</title><rect x="1151.9" y="1155.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.9" y="1166.0"></text>
</g>
<g>
<title>ResourceBitMap::ResourceBitMap(unsigned long) (1 samples, 0.04%)</title><rect x="1152.3" y="1155.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.3" y="1166.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1152.3" y="1139.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1155.3" y="1150.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.04%)</title><rect x="1152.8" y="1171.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="1182.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.04%)</title><rect x="1153.2" y="1171.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.2" y="1182.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.04%)</title><rect x="1153.2" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.2" y="1166.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.04%)</title><rect x="1153.2" y="1139.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.2" y="1150.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.04%)</title><rect x="1153.2" y="1123.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.2" y="1134.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_handlers() (1 samples, 0.04%)</title><rect x="1153.6" y="1171.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.6" y="1182.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.04%)</title><rect x="1153.6" y="1155.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.6" y="1166.0"></text>
</g>
<g>
<title>LinearScan::sort_intervals_before_allocation() (1 samples, 0.04%)</title><rect x="1154.1" y="1171.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.1" y="1182.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (3 samples, 0.11%)</title><rect x="1154.5" y="1203.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.5" y="1214.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (2 samples, 0.07%)</title><rect x="1155.0" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.0" y="1198.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.04%)</title><rect x="1155.0" y="1171.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="1182.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.04%)</title><rect x="1155.4" y="1171.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.4" y="1182.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 0.04%)</title><rect x="1155.4" y="1155.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.4" y="1166.0"></text>
</g>
<g>
<title>Compilation::initialize() (1 samples, 0.04%)</title><rect x="1155.8" y="1219.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.8" y="1230.0"></text>
</g>
<g>
<title>Dependencies::initialize(ciEnv*) (1 samples, 0.04%)</title><rect x="1155.8" y="1203.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.8" y="1214.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciBaseObject*&gt;::GrowableArray(Arena*, int, int, ciBaseObject* const&amp;) (1 samples, 0.04%)</title><rect x="1155.8" y="1187.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.8" y="1198.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (16 samples, 0.59%)</title><rect x="1156.3" y="1219.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.3" y="1230.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (16 samples, 0.59%)</title><rect x="1156.3" y="1203.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.3" y="1214.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (2 samples, 0.07%)</title><rect x="1156.3" y="1187.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.3" y="1198.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.04%)</title><rect x="1157.1" y="1187.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.1" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="1157.1" y="1171.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.1" y="1182.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="1157.1" y="1155.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.1" y="1166.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1157.1" y="1139.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.1" y="1150.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1157.1" y="1123.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.1" y="1134.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1157.1" y="1107.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1160.1" y="1118.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="1157.6" y="1187.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.6" y="1198.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1157.6" y="1171.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.6" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1157.6" y="1155.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.6" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1157.6" y="1139.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1160.6" y="1150.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (3 samples, 0.11%)</title><rect x="1158.0" y="1187.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="1198.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (3 samples, 0.11%)</title><rect x="1158.0" y="1171.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.0" y="1182.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.04%)</title><rect x="1158.0" y="1155.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.0" y="1166.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.04%)</title><rect x="1158.0" y="1139.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.0" y="1150.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1158.0" y="1123.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1161.0" y="1134.0"></text>
</g>
<g>
<title>CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, int, int, CodeBuffer*, int, int, OopMapSet*, bool) (1 samples, 0.04%)</title><rect x="1158.5" y="1155.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.5" y="1166.0"></text>
</g>
<g>
<title>OopRecorder::copy_values_to(nmethod*) (1 samples, 0.04%)</title><rect x="1158.9" y="1155.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="1166.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.04%)</title><rect x="1158.9" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="1150.0"></text>
</g>
<g>
<title>nmethod::consts_begin() const (1 samples, 0.04%)</title><rect x="1158.9" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="1134.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (9 samples, 0.33%)</title><rect x="1159.3" y="1187.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.3" y="1198.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.04%)</title><rect x="1159.3" y="1171.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.3" y="1182.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.04%)</title><rect x="1159.3" y="1155.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.30%)</title><rect x="1159.8" y="1171.0" width="3.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1162.8" y="1182.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1163.3" y="1267.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.3" y="1278.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1163.3" y="1251.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.3" y="1262.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1163.3" y="1235.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.3" y="1246.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.04%)</title><rect x="1163.3" y="1219.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1166.3" y="1230.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="1163.3" y="1203.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1166.3" y="1214.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.04%)</title><rect x="1163.3" y="1187.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1166.3" y="1198.0"></text>
</g>
<g>
<title>TraceTime::~TraceTime() (1 samples, 0.04%)</title><rect x="1163.7" y="1267.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.7" y="1278.0"></text>
</g>
<g>
<title>elapsedTimer::add(elapsedTimer) (1 samples, 0.04%)</title><rect x="1163.7" y="1251.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.7" y="1262.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.04%)</title><rect x="1164.2" y="1267.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.2" y="1278.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.04%)</title><rect x="1164.2" y="1251.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.2" y="1262.0"></text>
</g>
<g>
<title>ciObjectFactory::find_non_perm(oopDesc*) (1 samples, 0.04%)</title><rect x="1164.2" y="1235.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.2" y="1246.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1164.2" y="1219.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.2" y="1230.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1164.2" y="1203.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.2" y="1214.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.04%)</title><rect x="1164.2" y="1187.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.2" y="1198.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(Klass*) (1 samples, 0.04%)</title><rect x="1164.2" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.2" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.04%)</title><rect x="1164.2" y="1155.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.2" y="1166.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.04%)</title><rect x="1164.2" y="1139.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.2" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.04%)</title><rect x="1164.6" y="1267.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.6" y="1278.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1164.6" y="1251.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.6" y="1262.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1164.6" y="1235.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="1246.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1164.6" y="1219.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="1230.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.04%)</title><rect x="1164.6" y="1203.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="1214.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (2 samples, 0.07%)</title><rect x="1165.0" y="1283.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="1294.0"></text>
</g>
<g>
<title>os::Bsd::available_memory() (2 samples, 0.07%)</title><rect x="1165.0" y="1267.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="1278.0"></text>
</g>
<g>
<title>host_statistics64 (2 samples, 0.07%)</title><rect x="1165.0" y="1251.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1168.0" y="1262.0"></text>
</g>
<g>
<title>_block_invoke.modules (2 samples, 0.07%)</title><rect x="1165.0" y="1235.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1168.0" y="1246.0"></text>
</g>
<g>
<title>CompileQueue::get() (10 samples, 0.37%)</title><rect x="1165.9" y="1283.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.9" y="1294.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.19%)</title><rect x="1166.3" y="1267.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.3" y="1278.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.19%)</title><rect x="1166.3" y="1251.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.3" y="1262.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.19%)</title><rect x="1166.3" y="1235.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.3" y="1246.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.19%)</title><rect x="1166.3" y="1219.0" width="2.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1169.3" y="1230.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::select_task(CompileQueue*) (4 samples, 0.15%)</title><rect x="1168.5" y="1267.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.5" y="1278.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::update_rate(long, Method*) (3 samples, 0.11%)</title><rect x="1169.0" y="1251.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.0" y="1262.0"></text>
</g>
<g>
<title>Method::invocation_count() (2 samples, 0.07%)</title><rect x="1169.4" y="1235.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.4" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (4 samples, 0.15%)</title><rect x="1170.3" y="1299.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="1310.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.11%)</title><rect x="1170.3" y="1283.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.3" y="1294.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.11%)</title><rect x="1170.3" y="1267.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.3" y="1278.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.11%)</title><rect x="1170.3" y="1251.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.3" y="1262.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.11%)</title><rect x="1170.3" y="1235.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1173.3" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.04%)</title><rect x="1171.6" y="1283.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.6" y="1294.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.04%)</title><rect x="1171.6" y="1267.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.6" y="1278.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 0.04%)</title><rect x="1171.6" y="1251.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.6" y="1262.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches(bool) (1 samples, 0.04%)</title><rect x="1171.6" y="1235.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.6" y="1246.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool) (1 samples, 0.04%)</title><rect x="1171.6" y="1219.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.6" y="1230.0"></text>
</g>
<g>
<title>clean_if_nmethod_is_unloaded(CompiledIC*, CompiledMethod*, bool) (1 samples, 0.04%)</title><rect x="1171.6" y="1203.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1174.6" y="1214.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="1171.6" y="1187.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="1171.6" y="1171.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="1182.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (10 samples, 0.37%)</title><rect x="1172.0" y="1299.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.0" y="1310.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (6 samples, 0.22%)</title><rect x="1172.0" y="1283.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.0" y="1294.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (6 samples, 0.22%)</title><rect x="1172.0" y="1267.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.0" y="1278.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.04%)</title><rect x="1172.5" y="1251.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1262.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.04%)</title><rect x="1172.5" y="1235.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="1246.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.04%)</title><rect x="1172.5" y="1219.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.5" y="1230.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.04%)</title><rect x="1172.5" y="1203.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="1214.0"></text>
</g>
<g>
<title>Profiler::addJavaMethod(void const*, int, _jmethodID*) (1 samples, 0.04%)</title><rect x="1172.9" y="1251.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.9" y="1262.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1173.4" y="1251.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="1262.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1173.4" y="1235.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="1246.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1173.4" y="1219.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.4" y="1230.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.04%)</title><rect x="1173.4" y="1203.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1176.4" y="1214.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="1173.4" y="1187.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1176.4" y="1198.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.04%)</title><rect x="1173.4" y="1171.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1176.4" y="1182.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.07%)</title><rect x="1173.8" y="1251.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1176.8" y="1262.0"></text>
</g>
<g>
<title>Method::jmethod_id() (2 samples, 0.07%)</title><rect x="1173.8" y="1235.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.8" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(methodHandle const&amp;) (2 samples, 0.07%)</title><rect x="1173.8" y="1219.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="1230.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.11%)</title><rect x="1174.7" y="1283.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.7" y="1294.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.11%)</title><rect x="1174.7" y="1267.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.7" y="1278.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.11%)</title><rect x="1174.7" y="1251.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="1262.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.11%)</title><rect x="1174.7" y="1235.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1177.7" y="1246.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="1176.0" y="1283.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="1294.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="1176.0" y="1267.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="1278.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1176.0" y="1251.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="1262.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1176.0" y="1235.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="1246.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1176.0" y="1219.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1179.0" y="1230.0"></text>
</g>
<g>
<title>VMThread::run() (19 samples, 0.71%)</title><rect x="1176.4" y="1331.0" width="8.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="1342.0"></text>
</g>
<g>
<title>VMThread::loop() (19 samples, 0.71%)</title><rect x="1176.4" y="1315.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="1326.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.07%)</title><rect x="1176.4" y="1299.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="1310.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.07%)</title><rect x="1176.4" y="1283.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="1294.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="1176.4" y="1267.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="1278.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1176.4" y="1251.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1179.4" y="1262.0"></text>
</g>
<g>
<title>pthread_cond_timedwait (1 samples, 0.04%)</title><rect x="1176.9" y="1267.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1179.9" y="1278.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (8 samples, 0.30%)</title><rect x="1177.3" y="1299.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="1310.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1177.3" y="1283.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="1294.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1177.3" y="1267.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.3" y="1278.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1177.3" y="1251.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="1262.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1177.3" y="1235.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1180.3" y="1246.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.04%)</title><rect x="1177.7" y="1283.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="1294.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1177.7" y="1267.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1278.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1177.7" y="1251.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="1262.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.04%)</title><rect x="1177.7" y="1235.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1180.7" y="1246.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.04%)</title><rect x="1178.2" y="1283.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1181.2" y="1294.0"></text>
</g>
<g>
<title>xdrrec_ops (5 samples, 0.19%)</title><rect x="1178.6" y="1283.0" width="2.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1181.6" y="1294.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.04%)</title><rect x="1180.8" y="1299.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="1310.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1180.8" y="1283.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1183.8" y="1294.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread() (1 samples, 0.04%)</title><rect x="1181.2" y="1299.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="1310.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (7 samples, 0.26%)</title><rect x="1181.7" y="1299.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="1310.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (7 samples, 0.26%)</title><rect x="1181.7" y="1283.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="1294.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (3 samples, 0.11%)</title><rect x="1181.7" y="1267.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.11%)</title><rect x="1181.7" y="1251.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.04%)</title><rect x="1181.7" y="1235.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (1 samples, 0.04%)</title><rect x="1181.7" y="1219.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="1230.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire(ThreadLocalAllocStats*) (1 samples, 0.04%)</title><rect x="1181.7" y="1203.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="1214.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_and_reset_statistics(ThreadLocalAllocStats*) (1 samples, 0.04%)</title><rect x="1181.7" y="1187.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.07%)</title><rect x="1182.1" y="1235.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::merge_per_thread_state_info(G1ParScanThreadStateSet*) (1 samples, 0.04%)</title><rect x="1182.1" y="1219.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (1 samples, 0.04%)</title><rect x="1182.1" y="1203.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="1214.0"></text>
</g>
<g>
<title>G1ParScanThreadState::flush(unsigned long*) (1 samples, 0.04%)</title><rect x="1182.1" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*) (1 samples, 0.04%)</title><rect x="1182.6" y="1219.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="1230.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (1 samples, 0.04%)</title><rect x="1182.6" y="1203.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.6" y="1214.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_weak_final_refs(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (1 samples, 0.04%)</title><rect x="1182.6" y="1187.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.6" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.04%)</title><rect x="1182.6" y="1171.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.04%)</title><rect x="1182.6" y="1155.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="1166.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="1182.6" y="1139.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="1150.0"></text>
</g>
<g>
<title>VM_G1Concurrent::doit() (2 samples, 0.07%)</title><rect x="1183.0" y="1267.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="1278.0"></text>
</g>
<g>
<title>G1ConcurrentMark::remark() (2 samples, 0.07%)</title><rect x="1183.0" y="1251.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::purge() (1 samples, 0.04%)</title><rect x="1183.0" y="1235.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="1246.0"></text>
</g>
<g>
<title>ClassLoaderData::~ClassLoaderData() (1 samples, 0.04%)</title><rect x="1183.0" y="1219.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="1230.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.04%)</title><rect x="1183.0" y="1203.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1186.0" y="1214.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.04%)</title><rect x="1183.0" y="1187.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1186.0" y="1198.0"></text>
</g>
<g>
<title>G1ConcurrentMark::weak_refs_work(bool) (1 samples, 0.04%)</title><rect x="1183.4" y="1235.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="1246.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.04%)</title><rect x="1183.4" y="1219.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="1230.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_phase(ReferenceProcessor::RefProcPhases, unsigned int) const (1 samples, 0.04%)</title><rect x="1183.4" y="1203.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="1214.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.04%)</title><rect x="1183.4" y="1187.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="1198.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool) (1 samples, 0.04%)</title><rect x="1183.4" y="1171.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="1182.0"></text>
</g>
<g>
<title>LogStream::write(char const*, unsigned long) (1 samples, 0.04%)</title><rect x="1183.4" y="1155.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="1166.0"></text>
</g>
<g>
<title>LogTargetHandle::print(char const*, ...) (1 samples, 0.04%)</title><rect x="1183.4" y="1139.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="1150.0"></text>
</g>
<g>
<title>LogTagSet::vwrite(LogLevel::type, char const*, __va_list_tag*) (1 samples, 0.04%)</title><rect x="1183.4" y="1123.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="1134.0"></text>
</g>
<g>
<title>LogTagSet::log(LogLevel::type, char const*) (1 samples, 0.04%)</title><rect x="1183.4" y="1107.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="1118.0"></text>
</g>
<g>
<title>LogTagSet::label(char*, unsigned long, char const*) const (1 samples, 0.04%)</title><rect x="1183.4" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="1102.0"></text>
</g>
<g>
<title>jio_snprintf (1 samples, 0.04%)</title><rect x="1183.4" y="1075.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1186.4" y="1086.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.04%)</title><rect x="1183.4" y="1059.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="1070.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.04%)</title><rect x="1183.4" y="1043.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1186.4" y="1054.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.04%)</title><rect x="1183.4" y="1027.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1186.4" y="1038.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.04%)</title><rect x="1183.4" y="1011.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1186.4" y="1022.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.04%)</title><rect x="1183.4" y="995.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1186.4" y="1006.0"></text>
</g>
<g>
<title>VM_HandshakeAllThreads::doit() (2 samples, 0.07%)</title><rect x="1183.9" y="1267.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="1278.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="1183.9" y="1251.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1186.9" y="1262.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.04%)</title><rect x="1184.3" y="1251.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1187.3" y="1262.0"></text>
</g>
<g>
<title>WatcherThread::run() (11 samples, 0.41%)</title><rect x="1184.7" y="1331.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="1342.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.04%)</title><rect x="1184.7" y="1315.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.7" y="1326.0"></text>
</g>
<g>
<title>ChunkPool::free_all_but(unsigned long) (1 samples, 0.04%)</title><rect x="1184.7" y="1299.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.7" y="1310.0"></text>
</g>
<g>
<title>free_small (1 samples, 0.04%)</title><rect x="1184.7" y="1283.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1187.7" y="1294.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.04%)</title><rect x="1184.7" y="1267.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1187.7" y="1278.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.04%)</title><rect x="1185.2" y="1315.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="1326.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (9 samples, 0.33%)</title><rect x="1185.6" y="1315.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.6" y="1326.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.30%)</title><rect x="1186.1" y="1299.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="1310.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 0.30%)</title><rect x="1186.1" y="1283.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.1" y="1294.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 0.30%)</title><rect x="1186.1" y="1267.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="1278.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.30%)</title><rect x="1186.1" y="1251.0" width="3.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1189.1" y="1262.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.04%)</title><rect x="1189.6" y="1411.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1192.6" y="1422.0"></text>
</g>
</g>
</svg>
