<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (5,550 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=24323] (324 samples, 5.84%)</title><rect x="10.2" y="931.0" width="68.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.2" y="942.0">[NIO Se..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="10.4" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.4" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.04%)</title><rect x="10.4" y="899.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.4" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="10.9" y="915.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.9" y="926.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (317 samples, 5.71%)</title><rect x="11.3" y="915.0" width="67.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.3" y="926.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.04%)</title><rect x="11.3" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.3" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2 samples, 0.04%)</title><rect x="11.3" y="883.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.3" y="894.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (186 samples, 3.35%)</title><rect x="11.7" y="899.0" width="39.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.7" y="910.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.09%)</title><rect x="12.1" y="883.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.04%)</title><rect x="12.8" y="867.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="12.8" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="862.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.05%)</title><rect x="13.2" y="883.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.04%)</title><rect x="13.4" y="867.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (174 samples, 3.14%)</title><rect x="14.0" y="883.0" width="37.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="894.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (173 samples, 3.12%)</title><rect x="14.3" y="867.0" width="36.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.3" y="878.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (173 samples, 3.12%)</title><rect x="14.3" y="851.0" width="36.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.3" y="862.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (154 samples, 2.77%)</title><rect x="14.5" y="835.0" width="32.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.5" y="846.0">su..</text>
</g>
<g>
<title>kevent (141 samples, 2.54%)</title><rect x="17.2" y="819.0" width="30.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="20.2" y="830.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.11%)</title><rect x="47.2" y="835.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.05%)</title><rect x="47.8" y="819.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="47.8" y="803.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="47.8" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="47.8" y="771.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.8" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (8 samples, 0.14%)</title><rect x="48.5" y="835.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.5" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (6 samples, 0.11%)</title><rect x="48.9" y="819.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.9" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (3 samples, 0.05%)</title><rect x="50.2" y="835.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.2" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (3 samples, 0.05%)</title><rect x="50.2" y="819.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.2" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.05%)</title><rect x="50.2" y="803.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.2" y="814.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.05%)</title><rect x="50.2" y="787.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.2" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.05%)</title><rect x="50.2" y="771.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.2" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (129 samples, 2.32%)</title><rect x="51.2" y="899.0" width="27.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="54.2" y="910.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (126 samples, 2.27%)</title><rect x="51.7" y="883.0" width="26.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.7" y="894.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (81 samples, 1.46%)</title><rect x="51.9" y="867.0" width="17.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.9" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (56 samples, 1.01%)</title><rect x="52.3" y="851.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (56 samples, 1.01%)</title><rect x="52.3" y="835.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.3" y="846.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.04%)</title><rect x="52.3" y="819.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="52.3" y="803.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.3" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (54 samples, 0.97%)</title><rect x="52.7" y="819.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (2 samples, 0.04%)</title><rect x="52.9" y="803.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.9" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (2 samples, 0.04%)</title><rect x="52.9" y="787.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.9" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (2 samples, 0.04%)</title><rect x="52.9" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (50 samples, 0.90%)</title><rect x="53.6" y="803.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.6" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (48 samples, 0.86%)</title><rect x="54.0" y="787.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (48 samples, 0.86%)</title><rect x="54.0" y="771.0" width="10.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="57.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (47 samples, 0.85%)</title><rect x="54.2" y="755.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (44 samples, 0.79%)</title><rect x="54.2" y="739.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (42 samples, 0.76%)</title><rect x="54.6" y="723.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (42 samples, 0.76%)</title><rect x="54.6" y="707.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (42 samples, 0.76%)</title><rect x="54.6" y="691.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (42 samples, 0.76%)</title><rect x="54.6" y="675.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.6" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (42 samples, 0.76%)</title><rect x="54.6" y="659.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.6" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (37 samples, 0.67%)</title><rect x="55.3" y="643.0" width="7.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="58.3" y="654.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.05%)</title><rect x="55.9" y="627.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="58.9" y="638.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.04%)</title><rect x="56.6" y="627.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="59.6" y="638.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="56.6" y="611.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="59.6" y="622.0"></text>
</g>
<g>
<title>__psynch_cvsignal (22 samples, 0.40%)</title><rect x="57.6" y="627.0" width="4.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="60.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.05%)</title><rect x="63.6" y="739.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="63.6" y="723.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="66.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="63.8" y="707.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="63.8" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.11%)</title><rect x="64.2" y="851.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.2" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.09%)</title><rect x="64.4" y="835.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.4" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.05%)</title><rect x="65.5" y="851.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.5" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.05%)</title><rect x="65.5" y="835.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="68.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.05%)</title><rect x="65.5" y="819.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="68.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.05%)</title><rect x="65.5" y="803.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.14%)</title><rect x="66.1" y="851.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.1" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.09%)</title><rect x="66.1" y="835.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.1" y="846.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.05%)</title><rect x="66.1" y="819.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="66.8" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.05%)</title><rect x="67.2" y="835.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.2" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="67.4" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="67.4" y="803.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.4" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.11%)</title><rect x="67.8" y="851.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.8" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.11%)</title><rect x="67.8" y="835.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.8" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (44 samples, 0.79%)</title><rect x="69.1" y="867.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="72.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (44 samples, 0.79%)</title><rect x="69.1" y="851.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (44 samples, 0.79%)</title><rect x="69.1" y="835.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="72.1" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 0.79%)</title><rect x="69.1" y="819.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 0.79%)</title><rect x="69.1" y="803.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="72.1" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (40 samples, 0.72%)</title><rect x="69.3" y="787.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.3" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (40 samples, 0.72%)</title><rect x="69.3" y="771.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (40 samples, 0.72%)</title><rect x="69.3" y="755.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.3" y="766.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.04%)</title><rect x="69.7" y="739.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="72.7" y="750.0"></text>
</g>
<g>
<title>read (35 samples, 0.63%)</title><rect x="70.4" y="739.0" width="7.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="73.4" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.05%)</title><rect x="77.8" y="787.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="77.8" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.8" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="78.7" y="915.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="81.7" y="926.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=39683] (303 samples, 5.46%)</title><rect x="79.1" y="931.0" width="64.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="82.1" y="942.0">[NIO Se..</text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.09%)</title><rect x="79.3" y="915.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="82.3" y="926.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (297 samples, 5.35%)</title><rect x="80.4" y="915.0" width="63.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.4" y="926.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (189 samples, 3.41%)</title><rect x="80.6" y="899.0" width="40.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="83.6" y="910.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.07%)</title><rect x="80.8" y="883.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="83.8" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.04%)</title><rect x="81.2" y="867.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="81.2" y="851.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.2" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (183 samples, 3.30%)</title><rect x="81.9" y="883.0" width="38.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.9" y="894.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (183 samples, 3.30%)</title><rect x="81.9" y="867.0" width="38.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.9" y="878.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (183 samples, 3.30%)</title><rect x="81.9" y="851.0" width="38.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.9" y="862.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (169 samples, 3.05%)</title><rect x="82.1" y="835.0" width="35.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.1" y="846.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.05%)</title><rect x="83.6" y="819.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="86.6" y="830.0"></text>
</g>
<g>
<title>kevent (159 samples, 2.86%)</title><rect x="84.2" y="819.0" width="33.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="87.2" y="830.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.11%)</title><rect x="118.0" y="835.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="121.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.07%)</title><rect x="118.4" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="121.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.05%)</title><rect x="118.4" y="803.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.4" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (6 samples, 0.11%)</title><rect x="119.3" y="835.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.3" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (4 samples, 0.07%)</title><rect x="119.7" y="819.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.7" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (107 samples, 1.93%)</title><rect x="120.8" y="899.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.8" y="910.0">o..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="120.8" y="883.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="123.8" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (103 samples, 1.86%)</title><rect x="121.2" y="883.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.2" y="894.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (61 samples, 1.10%)</title><rect x="121.6" y="867.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.6" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (40 samples, 0.72%)</title><rect x="121.8" y="851.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (40 samples, 0.72%)</title><rect x="121.8" y="835.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.8" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (39 samples, 0.70%)</title><rect x="122.0" y="819.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (37 samples, 0.67%)</title><rect x="122.5" y="803.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="125.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="122.5" y="787.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.5" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="122.5" y="771.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.5" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="122.5" y="755.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="125.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="122.7" y="739.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.7" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="122.7" y="723.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="125.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (31 samples, 0.56%)</title><rect x="123.7" y="787.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (30 samples, 0.54%)</title><rect x="124.0" y="771.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (30 samples, 0.54%)</title><rect x="124.0" y="755.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="127.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (30 samples, 0.54%)</title><rect x="124.0" y="739.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 0.50%)</title><rect x="124.4" y="723.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 0.50%)</title><rect x="124.4" y="707.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 0.50%)</title><rect x="124.4" y="691.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 0.50%)</title><rect x="124.4" y="675.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (28 samples, 0.50%)</title><rect x="124.4" y="659.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="127.4" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (25 samples, 0.45%)</title><rect x="124.8" y="643.0" width="5.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="127.8" y="654.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="125.2" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="128.2" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (17 samples, 0.31%)</title><rect x="126.1" y="627.0" width="3.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="129.1" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9 samples, 0.16%)</title><rect x="130.3" y="851.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.09%)</title><rect x="130.3" y="835.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="131.0" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.0" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.07%)</title><rect x="131.4" y="835.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.4" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.07%)</title><rect x="131.4" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.04%)</title><rect x="132.3" y="851.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="135.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="132.3" y="835.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="135.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="132.3" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="135.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.13%)</title><rect x="132.7" y="851.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.7" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="132.9" y="835.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.9" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="133.5" y="835.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.5" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="134.2" y="851.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.2" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="134.2" y="835.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.2" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (40 samples, 0.72%)</title><rect x="134.6" y="867.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (40 samples, 0.72%)</title><rect x="134.6" y="851.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="137.6" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (39 samples, 0.70%)</title><rect x="134.8" y="835.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.8" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (38 samples, 0.68%)</title><rect x="135.0" y="819.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="138.0" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (37 samples, 0.67%)</title><rect x="135.2" y="803.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.2" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.04%)</title><rect x="135.2" y="787.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.2" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.04%)</title><rect x="135.2" y="771.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (32 samples, 0.58%)</title><rect x="135.7" y="787.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.7" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (32 samples, 0.58%)</title><rect x="135.7" y="771.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (32 samples, 0.58%)</title><rect x="135.7" y="755.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.7" y="766.0"></text>
</g>
<g>
<title>read (30 samples, 0.54%)</title><rect x="136.1" y="739.0" width="6.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="139.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.04%)</title><rect x="142.5" y="787.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="142.5" y="771.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.04%)</title><rect x="142.5" y="755.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.5" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="143.1" y="883.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="146.1" y="894.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="143.1" y="867.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="146.1" y="878.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="143.1" y="851.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="146.1" y="862.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25091] (285 samples, 5.14%)</title><rect x="143.5" y="931.0" width="60.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="146.5" y="942.0">[NIO S..</text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.07%)</title><rect x="144.2" y="915.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="147.2" y="926.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (278 samples, 5.01%)</title><rect x="145.0" y="915.0" width="59.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.0" y="926.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (167 samples, 3.01%)</title><rect x="145.6" y="899.0" width="35.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.6" y="910.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.07%)</title><rect x="146.1" y="883.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="149.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="146.3" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="149.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title><rect x="146.3" y="851.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.3" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (161 samples, 2.90%)</title><rect x="146.9" y="883.0" width="34.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="149.9" y="894.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (161 samples, 2.90%)</title><rect x="146.9" y="867.0" width="34.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="149.9" y="878.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (161 samples, 2.90%)</title><rect x="146.9" y="851.0" width="34.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.9" y="862.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (158 samples, 2.85%)</title><rect x="147.1" y="835.0" width="33.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.1" y="846.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.04%)</title><rect x="149.3" y="819.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="152.3" y="830.0"></text>
</g>
<g>
<title>kevent (146 samples, 2.63%)</title><rect x="149.7" y="819.0" width="31.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="152.7" y="830.0">ke..</text>
</g>
<g>
<title>one/nio/net/Session.process (108 samples, 1.95%)</title><rect x="181.2" y="899.0" width="22.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="184.2" y="910.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (105 samples, 1.89%)</title><rect x="181.6" y="883.0" width="22.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="184.6" y="894.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (69 samples, 1.24%)</title><rect x="181.8" y="867.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.8" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (51 samples, 0.92%)</title><rect x="182.4" y="851.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.4" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (51 samples, 0.92%)</title><rect x="182.4" y="835.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (49 samples, 0.88%)</title><rect x="182.9" y="819.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.9" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (4 samples, 0.07%)</title><rect x="182.9" y="803.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.9" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (2 samples, 0.04%)</title><rect x="182.9" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="185.9" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (2 samples, 0.04%)</title><rect x="182.9" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (45 samples, 0.81%)</title><rect x="183.7" y="803.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="186.7" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (44 samples, 0.79%)</title><rect x="183.9" y="787.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (43 samples, 0.77%)</title><rect x="184.1" y="771.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="187.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (41 samples, 0.74%)</title><rect x="184.6" y="755.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="187.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (40 samples, 0.72%)</title><rect x="184.8" y="739.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.04%)</title><rect x="185.0" y="723.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.04%)</title><rect x="185.0" y="707.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (37 samples, 0.67%)</title><rect x="185.4" y="723.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (37 samples, 0.67%)</title><rect x="185.4" y="707.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (37 samples, 0.67%)</title><rect x="185.4" y="691.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (37 samples, 0.67%)</title><rect x="185.4" y="675.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (37 samples, 0.67%)</title><rect x="185.4" y="659.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.4" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (34 samples, 0.61%)</title><rect x="186.0" y="643.0" width="7.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="189.0" y="654.0"></text>
</g>
<g>
<title>__psynch_cvsignal (30 samples, 0.54%)</title><rect x="186.9" y="627.0" width="6.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="189.9" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.13%)</title><rect x="193.3" y="851.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.09%)</title><rect x="193.3" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.3" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="194.3" y="835.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.3" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="194.3" y="819.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="197.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.09%)</title><rect x="194.8" y="851.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="197.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="194.8" y="835.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.8" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="195.0" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="195.0" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="195.0" y="787.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.0" y="798.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.04%)</title><rect x="195.0" y="771.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="195.4" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.4" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="195.4" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="195.8" y="851.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.8" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="195.8" y="835.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.8" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (35 samples, 0.63%)</title><rect x="196.5" y="867.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (35 samples, 0.63%)</title><rect x="196.5" y="851.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.5" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (34 samples, 0.61%)</title><rect x="196.7" y="835.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 0.59%)</title><rect x="196.9" y="819.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.9" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 0.59%)</title><rect x="196.9" y="803.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.9" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.04%)</title><rect x="196.9" y="787.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="199.9" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.04%)</title><rect x="196.9" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.9" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.04%)</title><rect x="196.9" y="755.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.9" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.04%)</title><rect x="196.9" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.9" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.04%)</title><rect x="196.9" y="723.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.9" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.04%)</title><rect x="196.9" y="707.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.9" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (30 samples, 0.54%)</title><rect x="197.3" y="787.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.3" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (30 samples, 0.54%)</title><rect x="197.3" y="771.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (30 samples, 0.54%)</title><rect x="197.3" y="755.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.3" y="766.0"></text>
</g>
<g>
<title>read (30 samples, 0.54%)</title><rect x="197.3" y="739.0" width="6.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="200.3" y="750.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25603] (239 samples, 4.31%)</title><rect x="204.1" y="931.0" width="50.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="207.1" y="942.0">[NIO ..</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="204.3" y="915.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="207.3" y="926.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (235 samples, 4.23%)</title><rect x="204.8" y="915.0" width="49.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="207.8" y="926.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (131 samples, 2.36%)</title><rect x="205.2" y="899.0" width="27.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.2" y="910.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="205.2" y="883.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.2" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (128 samples, 2.31%)</title><rect x="205.8" y="883.0" width="27.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.8" y="894.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (128 samples, 2.31%)</title><rect x="205.8" y="867.0" width="27.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.8" y="878.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (127 samples, 2.29%)</title><rect x="206.0" y="851.0" width="27.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.0" y="862.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (117 samples, 2.11%)</title><rect x="206.5" y="835.0" width="24.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.5" y="846.0">s..</text>
</g>
<g>
<title>kevent (111 samples, 2.00%)</title><rect x="207.7" y="819.0" width="23.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="210.7" y="830.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.07%)</title><rect x="231.3" y="835.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.3" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.05%)</title><rect x="231.5" y="819.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.05%)</title><rect x="231.5" y="803.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.05%)</title><rect x="231.5" y="787.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.05%)</title><rect x="231.5" y="771.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="232.6" y="835.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (102 samples, 1.84%)</title><rect x="233.0" y="899.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.0" y="910.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (99 samples, 1.78%)</title><rect x="233.5" y="883.0" width="21.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.5" y="894.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (74 samples, 1.33%)</title><rect x="233.5" y="867.0" width="15.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.5" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (63 samples, 1.14%)</title><rect x="233.9" y="851.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.9" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (62 samples, 1.12%)</title><rect x="234.1" y="835.0" width="13.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.1" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (61 samples, 1.10%)</title><rect x="234.3" y="819.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="234.3" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (5 samples, 0.09%)</title><rect x="234.7" y="803.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.7" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (3 samples, 0.05%)</title><rect x="235.2" y="787.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.2" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (3 samples, 0.05%)</title><rect x="235.2" y="771.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.2" y="782.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.unregister (2 samples, 0.04%)</title><rect x="235.4" y="755.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.4" y="766.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.disable (2 samples, 0.04%)</title><rect x="235.4" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (53 samples, 0.95%)</title><rect x="236.0" y="803.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (50 samples, 0.90%)</title><rect x="236.6" y="787.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (50 samples, 0.90%)</title><rect x="236.6" y="771.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (49 samples, 0.88%)</title><rect x="236.6" y="755.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (47 samples, 0.85%)</title><rect x="236.6" y="739.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (47 samples, 0.85%)</title><rect x="236.6" y="723.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (47 samples, 0.85%)</title><rect x="236.6" y="707.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (46 samples, 0.83%)</title><rect x="236.9" y="691.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (45 samples, 0.81%)</title><rect x="236.9" y="675.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.9" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (45 samples, 0.81%)</title><rect x="236.9" y="659.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.9" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (42 samples, 0.76%)</title><rect x="237.5" y="643.0" width="8.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="240.5" y="654.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.04%)</title><rect x="237.9" y="627.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="240.9" y="638.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="237.9" y="611.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="240.9" y="622.0"></text>
</g>
<g>
<title>__psynch_cvsignal (33 samples, 0.59%)</title><rect x="238.8" y="627.0" width="7.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="241.8" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.04%)</title><rect x="245.8" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="248.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="246.6" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="246.6" y="723.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="246.6" y="707.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.6" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.11%)</title><rect x="247.7" y="851.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.7" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="247.9" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.9" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="247.9" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="248.3" y="835.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="248.3" y="819.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="248.3" y="803.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.3" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (25 samples, 0.45%)</title><rect x="249.2" y="867.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.2" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (25 samples, 0.45%)</title><rect x="249.2" y="851.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.2" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (24 samples, 0.43%)</title><rect x="249.4" y="835.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.43%)</title><rect x="249.4" y="819.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (23 samples, 0.41%)</title><rect x="249.6" y="803.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.6" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (21 samples, 0.38%)</title><rect x="249.8" y="787.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.8" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (20 samples, 0.36%)</title><rect x="250.0" y="771.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.0" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (20 samples, 0.36%)</title><rect x="250.0" y="755.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.0" y="766.0"></text>
</g>
<g>
<title>read (20 samples, 0.36%)</title><rect x="250.0" y="739.0" width="4.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="253.0" y="750.0"></text>
</g>
<g>
<title>[tid=13059] (5 samples, 0.09%)</title><rect x="254.9" y="931.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="257.9" y="942.0"></text>
</g>
<g>
<title>thread_start (5 samples, 0.09%)</title><rect x="254.9" y="915.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="257.9" y="926.0"></text>
</g>
<g>
<title>_pthread_start (5 samples, 0.09%)</title><rect x="254.9" y="899.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="257.9" y="910.0"></text>
</g>
<g>
<title>_pthread_body (5 samples, 0.09%)</title><rect x="254.9" y="883.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="257.9" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.09%)</title><rect x="254.9" y="867.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="257.9" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.09%)</title><rect x="254.9" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="257.9" y="862.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (5 samples, 0.09%)</title><rect x="254.9" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="257.9" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (5 samples, 0.09%)</title><rect x="254.9" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="257.9" y="830.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (5 samples, 0.09%)</title><rect x="254.9" y="803.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="257.9" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.09%)</title><rect x="254.9" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="257.9" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.09%)</title><rect x="254.9" y="771.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="257.9" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.07%)</title><rect x="255.1" y="755.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="258.1" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.07%)</title><rect x="255.1" y="739.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="258.1" y="750.0"></text>
</g>
<g>
<title>[tid=18435] (3 samples, 0.05%)</title><rect x="256.0" y="931.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="259.0" y="942.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.05%)</title><rect x="256.0" y="915.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="259.0" y="926.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.05%)</title><rect x="256.0" y="899.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="259.0" y="910.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.05%)</title><rect x="256.0" y="883.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="259.0" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.05%)</title><rect x="256.0" y="867.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="259.0" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.05%)</title><rect x="256.0" y="851.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="259.0" y="862.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.05%)</title><rect x="256.0" y="835.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="259.0" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.05%)</title><rect x="256.0" y="819.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="259.0" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.05%)</title><rect x="256.0" y="803.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="259.0" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.05%)</title><rect x="256.0" y="787.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="259.0" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.05%)</title><rect x="256.0" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="259.0" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="256.0" y="755.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="259.0" y="766.0"></text>
</g>
<g>
<title>[tid=22019] (11 samples, 0.20%)</title><rect x="256.6" y="931.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="259.6" y="942.0"></text>
</g>
<g>
<title>thread_start (11 samples, 0.20%)</title><rect x="256.6" y="915.0" width="2.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="259.6" y="926.0"></text>
</g>
<g>
<title>_pthread_start (11 samples, 0.20%)</title><rect x="256.6" y="899.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="259.6" y="910.0"></text>
</g>
<g>
<title>_pthread_body (11 samples, 0.20%)</title><rect x="256.6" y="883.0" width="2.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="259.6" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (11 samples, 0.20%)</title><rect x="256.6" y="867.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="259.6" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (11 samples, 0.20%)</title><rect x="256.6" y="851.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="259.6" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (11 samples, 0.20%)</title><rect x="256.6" y="835.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="259.6" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (11 samples, 0.20%)</title><rect x="256.6" y="819.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="259.6" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (11 samples, 0.20%)</title><rect x="256.6" y="803.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="259.6" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (11 samples, 0.20%)</title><rect x="256.6" y="787.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="259.6" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (11 samples, 0.20%)</title><rect x="256.6" y="771.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.6" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (11 samples, 0.20%)</title><rect x="256.6" y="755.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="259.6" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (11 samples, 0.20%)</title><rect x="256.6" y="739.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="259.6" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (10 samples, 0.18%)</title><rect x="256.6" y="723.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="259.6" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (5 samples, 0.09%)</title><rect x="256.6" y="707.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="259.6" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 0.07%)</title><rect x="256.8" y="691.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="259.8" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 0.07%)</title><rect x="256.8" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.8" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 0.07%)</title><rect x="256.8" y="659.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="259.8" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.05%)</title><rect x="256.8" y="643.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.8" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.05%)</title><rect x="256.8" y="627.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.8" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.04%)</title><rect x="257.1" y="611.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="260.1" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.04%)</title><rect x="257.1" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="260.1" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.04%)</title><rect x="257.1" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="260.1" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.04%)</title><rect x="257.1" y="563.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="260.1" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.04%)</title><rect x="257.1" y="547.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="260.1" y="558.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.04%)</title><rect x="257.7" y="707.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="260.7" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.05%)</title><rect x="258.1" y="707.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="261.1" y="718.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 0.05%)</title><rect x="258.1" y="691.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="261.1" y="702.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.04%)</title><rect x="258.3" y="675.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="261.3" y="686.0"></text>
</g>
<g>
<title>[tid=22787] (3 samples, 0.05%)</title><rect x="259.0" y="931.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="262.0" y="942.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.05%)</title><rect x="259.0" y="915.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="262.0" y="926.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.05%)</title><rect x="259.0" y="899.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="262.0" y="910.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.05%)</title><rect x="259.0" y="883.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="262.0" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.05%)</title><rect x="259.0" y="867.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="262.0" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.05%)</title><rect x="259.0" y="851.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="262.0" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.05%)</title><rect x="259.0" y="835.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="262.0" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.05%)</title><rect x="259.0" y="819.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="262.0" y="830.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.05%)</title><rect x="259.0" y="803.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="262.0" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.04%)</title><rect x="259.0" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="262.0" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.04%)</title><rect x="259.0" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="262.0" y="782.0"></text>
</g>
<g>
<title>[tid=41475] (21 samples, 0.38%)</title><rect x="259.8" y="931.0" width="4.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="262.8" y="942.0"></text>
</g>
<g>
<title>thread_start (21 samples, 0.38%)</title><rect x="259.8" y="915.0" width="4.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="262.8" y="926.0"></text>
</g>
<g>
<title>_pthread_start (21 samples, 0.38%)</title><rect x="259.8" y="899.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="262.8" y="910.0"></text>
</g>
<g>
<title>_pthread_body (21 samples, 0.38%)</title><rect x="259.8" y="883.0" width="4.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="262.8" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (21 samples, 0.38%)</title><rect x="259.8" y="867.0" width="4.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="262.8" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (21 samples, 0.38%)</title><rect x="259.8" y="851.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="262.8" y="862.0"></text>
</g>
<g>
<title>WatcherThread::run() (21 samples, 0.38%)</title><rect x="259.8" y="835.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="262.8" y="846.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.04%)</title><rect x="259.8" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="262.8" y="830.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (19 samples, 0.34%)</title><rect x="260.2" y="819.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="263.2" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (19 samples, 0.34%)</title><rect x="260.2" y="803.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="263.2" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (19 samples, 0.34%)</title><rect x="260.2" y="787.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="263.2" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (19 samples, 0.34%)</title><rect x="260.2" y="771.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="263.2" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.31%)</title><rect x="260.5" y="755.0" width="3.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="263.5" y="766.0"></text>
</g>
<g>
<title>[tid=43267] (237 samples, 4.27%)</title><rect x="264.3" y="931.0" width="50.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="267.3" y="942.0">[tid=..</text>
</g>
<g>
<title>thread_start (237 samples, 4.27%)</title><rect x="264.3" y="915.0" width="50.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="267.3" y="926.0">threa..</text>
</g>
<g>
<title>_pthread_start (237 samples, 4.27%)</title><rect x="264.3" y="899.0" width="50.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="267.3" y="910.0">_pthr..</text>
</g>
<g>
<title>_pthread_body (237 samples, 4.27%)</title><rect x="264.3" y="883.0" width="50.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="267.3" y="894.0">_pthr..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (237 samples, 4.27%)</title><rect x="264.3" y="867.0" width="50.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="267.3" y="878.0">threa..</text>
</g>
<g>
<title>Thread::call_run() (237 samples, 4.27%)</title><rect x="264.3" y="851.0" width="50.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="267.3" y="862.0">Threa..</text>
</g>
<g>
<title>JavaThread::run() (237 samples, 4.27%)</title><rect x="264.3" y="835.0" width="50.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="267.3" y="846.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (237 samples, 4.27%)</title><rect x="264.3" y="819.0" width="50.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="267.3" y="830.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (237 samples, 4.27%)</title><rect x="264.3" y="803.0" width="50.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="267.3" y="814.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (237 samples, 4.27%)</title><rect x="264.3" y="787.0" width="50.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="267.3" y="798.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (237 samples, 4.27%)</title><rect x="264.3" y="771.0" width="50.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="267.3" y="782.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (236 samples, 4.25%)</title><rect x="264.5" y="755.0" width="50.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="267.5" y="766.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (137 samples, 2.47%)</title><rect x="264.5" y="739.0" width="29.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="267.5" y="750.0">Co..</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.11%)</title><rect x="264.5" y="723.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="267.5" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.07%)</title><rect x="264.5" y="707.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="267.5" y="718.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.04%)</title><rect x="265.3" y="707.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="268.3" y="718.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.04%)</title><rect x="265.3" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="268.3" y="702.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.04%)</title><rect x="265.3" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="268.3" y="686.0"></text>
</g>
<g>
<title>loadNNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (2 samples, 0.04%)</title><rect x="265.3" y="659.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="268.3" y="670.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (2 samples, 0.04%)</title><rect x="265.3" y="643.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="268.3" y="654.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.05%)</title><rect x="265.8" y="723.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="268.8" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.16%)</title><rect x="266.4" y="723.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="269.4" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.14%)</title><rect x="266.6" y="707.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="269.6" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.05%)</title><rect x="266.8" y="691.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="269.8" y="702.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.04%)</title><rect x="267.9" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="270.9" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (16 samples, 0.29%)</title><rect x="268.5" y="723.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="271.5" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (16 samples, 0.29%)</title><rect x="268.5" y="707.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="271.5" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.07%)</title><rect x="268.5" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="271.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.04%)</title><rect x="269.0" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="272.0" y="686.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (2 samples, 0.04%)</title><rect x="269.0" y="659.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="272.0" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.04%)</title><rect x="269.4" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="272.4" y="702.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (2 samples, 0.04%)</title><rect x="269.4" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="272.4" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.13%)</title><rect x="270.0" y="691.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="273.0" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.04%)</title><rect x="270.5" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="273.5" y="686.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (3 samples, 0.05%)</title><rect x="270.9" y="675.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="273.9" y="686.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (3 samples, 0.05%)</title><rect x="270.9" y="659.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="273.9" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (100 samples, 1.80%)</title><rect x="272.4" y="723.0" width="21.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="275.4" y="734.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.07%)</title><rect x="273.0" y="707.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="276.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.11%)</title><rect x="273.9" y="707.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="276.9" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (4 samples, 0.07%)</title><rect x="273.9" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="276.9" y="702.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="273.9" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="276.9" y="686.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (2 samples, 0.04%)</title><rect x="274.7" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="277.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.09%)</title><rect x="275.1" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="278.1" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="275.1" y="691.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="278.1" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.05%)</title><rect x="275.6" y="691.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="278.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 0.23%)</title><rect x="276.2" y="707.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="279.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (19 samples, 0.34%)</title><rect x="279.0" y="707.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="282.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.04%)</title><rect x="280.9" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="283.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.07%)</title><rect x="281.3" y="691.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="284.3" y="702.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="281.5" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="284.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.05%)</title><rect x="282.1" y="691.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="285.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (2 samples, 0.04%)</title><rect x="283.2" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="286.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (9 samples, 0.16%)</title><rect x="283.8" y="707.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="286.8" y="718.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (3 samples, 0.05%)</title><rect x="284.9" y="691.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="287.9" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.04%)</title><rect x="284.9" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="287.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.04%)</title><rect x="285.8" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="288.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.16%)</title><rect x="286.2" y="707.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="289.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.07%)</title><rect x="287.2" y="691.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="290.2" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.09%)</title><rect x="288.1" y="707.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="291.1" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.04%)</title><rect x="288.1" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="291.1" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.05%)</title><rect x="288.5" y="691.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="291.5" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.05%)</title><rect x="288.5" y="675.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="291.5" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.05%)</title><rect x="289.2" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="292.2" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.04%)</title><rect x="289.4" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="292.4" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.04%)</title><rect x="289.8" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="292.8" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.07%)</title><rect x="290.2" y="707.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="293.2" y="718.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.05%)</title><rect x="290.4" y="691.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="293.4" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.20%)</title><rect x="291.1" y="707.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="294.1" y="718.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.04%)</title><rect x="291.7" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="294.7" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.09%)</title><rect x="292.3" y="691.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="295.3" y="702.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="292.6" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="295.6" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="293.0" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="296.0" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (73 samples, 1.32%)</title><rect x="293.6" y="739.0" width="15.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="296.6" y="750.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (2 samples, 0.04%)</title><rect x="294.3" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="297.3" y="734.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (2 samples, 0.04%)</title><rect x="294.3" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="297.3" y="718.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (31 samples, 0.56%)</title><rect x="294.7" y="723.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="297.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (31 samples, 0.56%)</title><rect x="294.7" y="707.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="297.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.04%)</title><rect x="294.9" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="297.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.07%)</title><rect x="295.3" y="691.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="298.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (3 samples, 0.05%)</title><rect x="295.5" y="675.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="298.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.05%)</title><rect x="295.5" y="659.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="298.5" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.05%)</title><rect x="295.5" y="643.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="298.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.04%)</title><rect x="295.8" y="627.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="298.8" y="638.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.04%)</title><rect x="295.8" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="298.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.16%)</title><rect x="296.2" y="691.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="299.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (4 samples, 0.07%)</title><rect x="297.2" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="300.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.05%)</title><rect x="297.5" y="659.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="300.5" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.04%)</title><rect x="297.5" y="643.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="300.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="297.5" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="300.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="297.5" y="611.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="300.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="297.5" y="595.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="300.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="297.5" y="579.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="300.5" y="590.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.04%)</title><rect x="297.5" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="300.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.04%)</title><rect x="298.1" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="301.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (8 samples, 0.14%)</title><rect x="298.5" y="691.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="301.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (6 samples, 0.11%)</title><rect x="298.9" y="675.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="301.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (3 samples, 0.05%)</title><rect x="299.4" y="659.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="302.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.04%)</title><rect x="299.4" y="643.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="302.4" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.09%)</title><rect x="300.2" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="303.2" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.09%)</title><rect x="300.2" y="675.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="303.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.07%)</title><rect x="301.5" y="723.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="304.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.07%)</title><rect x="301.5" y="707.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="304.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.04%)</title><rect x="301.5" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="304.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (2 samples, 0.04%)</title><rect x="301.5" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="304.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (18 samples, 0.32%)</title><rect x="302.6" y="723.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.07%)</title><rect x="302.8" y="707.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="305.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.04%)</title><rect x="303.6" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="306.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.11%)</title><rect x="304.0" y="707.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="307.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (5 samples, 0.09%)</title><rect x="304.3" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="307.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.05%)</title><rect x="304.5" y="675.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="307.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.05%)</title><rect x="304.5" y="659.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="307.5" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.05%)</title><rect x="304.5" y="643.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="307.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.05%)</title><rect x="304.5" y="627.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="307.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.04%)</title><rect x="305.5" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="308.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="306.0" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="309.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="306.0" y="691.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="309.0" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.18%)</title><rect x="306.4" y="723.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="309.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.18%)</title><rect x="306.4" y="707.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="309.4" y="718.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="307.0" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="310.0" y="702.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (2 samples, 0.04%)</title><rect x="307.4" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="310.4" y="702.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.04%)</title><rect x="309.1" y="739.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="312.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.34%)</title><rect x="309.8" y="739.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="312.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.34%)</title><rect x="309.8" y="723.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="312.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.32%)</title><rect x="309.8" y="707.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="312.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.32%)</title><rect x="309.8" y="691.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="312.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 0.31%)</title><rect x="309.8" y="675.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="312.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 0.29%)</title><rect x="309.8" y="659.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="312.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 0.29%)</title><rect x="309.8" y="643.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="312.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 0.29%)</title><rect x="309.8" y="627.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="312.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 0.29%)</title><rect x="309.8" y="611.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="312.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.27%)</title><rect x="309.8" y="595.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="312.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.25%)</title><rect x="310.0" y="579.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="313.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.25%)</title><rect x="310.0" y="563.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="313.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.23%)</title><rect x="310.2" y="547.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="313.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.23%)</title><rect x="310.2" y="531.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="313.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.23%)</title><rect x="310.2" y="515.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="313.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.11%)</title><rect x="310.2" y="499.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="313.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.11%)</title><rect x="310.2" y="483.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="313.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="310.4" y="467.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="313.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="310.4" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="313.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="310.4" y="435.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="313.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="310.4" y="419.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="313.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="310.4" y="403.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="313.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="310.6" y="387.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="313.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="310.6" y="371.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="313.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="310.6" y="355.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="313.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="310.8" y="339.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="313.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="310.8" y="323.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="313.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="310.8" y="307.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="313.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="310.8" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="313.8" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (7 samples, 0.13%)</title><rect x="311.5" y="499.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="314.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.13%)</title><rect x="311.5" y="483.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="314.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.13%)</title><rect x="311.5" y="467.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="314.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.13%)</title><rect x="311.5" y="451.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="314.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.13%)</title><rect x="311.5" y="435.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="314.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.13%)</title><rect x="311.5" y="419.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="314.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.11%)</title><rect x="311.5" y="403.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="314.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.11%)</title><rect x="311.5" y="387.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="314.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.11%)</title><rect x="311.5" y="371.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="314.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.11%)</title><rect x="311.5" y="355.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="314.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.11%)</title><rect x="311.5" y="339.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="314.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.11%)</title><rect x="311.5" y="323.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="314.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.11%)</title><rect x="311.5" y="307.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="314.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.11%)</title><rect x="311.5" y="291.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="314.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.11%)</title><rect x="311.5" y="275.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="314.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="311.5" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="314.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="311.5" y="243.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="314.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="311.5" y="227.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="314.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="311.5" y="211.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="314.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="311.5" y="195.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="314.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="311.5" y="179.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="314.5" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="311.7" y="163.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="314.7" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="311.7" y="147.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="314.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="311.7" y="131.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="314.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="311.7" y="115.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="314.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="311.7" y="99.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="314.7" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="311.7" y="83.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="314.7" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="311.7" y="67.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="314.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="311.7" y="51.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="314.7" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="311.7" y="35.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="314.7" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.05%)</title><rect x="313.8" y="739.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="316.8" y="750.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.04%)</title><rect x="313.8" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="316.8" y="734.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.04%)</title><rect x="313.8" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="316.8" y="718.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (2 samples, 0.04%)</title><rect x="313.8" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="316.8" y="702.0"></text>
</g>
<g>
<title>[worker tid=28163] (1,077 samples, 19.41%)</title><rect x="314.7" y="931.0" width="229.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="317.7" y="942.0">[worker tid=28163]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.14%)</title><rect x="314.7" y="915.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="317.7" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.11%)</title><rect x="315.1" y="899.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="318.1" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (5 samples, 0.09%)</title><rect x="315.3" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="318.3" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="315.9" y="867.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="318.9" y="878.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="316.6" y="915.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="319.6" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="316.6" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="319.6" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,063 samples, 19.15%)</title><rect x="317.0" y="915.0" width="226.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.0" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,063 samples, 19.15%)</title><rect x="317.0" y="899.0" width="226.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.0" y="910.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,063 samples, 19.15%)</title><rect x="317.0" y="883.0" width="226.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.0" y="894.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.07%)</title><rect x="320.4" y="867.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.4" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.07%)</title><rect x="320.4" y="851.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.4" y="862.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (4 samples, 0.07%)</title><rect x="320.4" y="835.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="323.4" y="846.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (3 samples, 0.05%)</title><rect x="320.6" y="819.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="323.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.04%)</title><rect x="321.3" y="867.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="321.3" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (277 samples, 4.99%)</title><rect x="321.9" y="867.0" width="58.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.9" y="878.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (277 samples, 4.99%)</title><rect x="321.9" y="851.0" width="58.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.9" y="862.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (252 samples, 4.54%)</title><rect x="322.3" y="835.0" width="53.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="325.3" y="846.0">java/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.05%)</title><rect x="322.3" y="819.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="322.5" y="803.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.5" y="814.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.04%)</title><rect x="322.5" y="787.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="325.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4 samples, 0.07%)</title><rect x="323.0" y="819.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="326.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.07%)</title><rect x="324.0" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.04%)</title><rect x="324.9" y="819.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="324.9" y="803.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (237 samples, 4.27%)</title><rect x="325.5" y="819.0" width="50.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.5" y="830.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (237 samples, 4.27%)</title><rect x="325.5" y="803.0" width="50.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.5" y="814.0">jdk/i..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.04%)</title><rect x="326.8" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="329.8" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (229 samples, 4.13%)</title><rect x="327.2" y="787.0" width="48.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="330.2" y="798.0">Unsa..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.05%)</title><rect x="327.4" y="771.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="330.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.05%)</title><rect x="327.4" y="755.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="330.4" y="766.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.05%)</title><rect x="327.4" y="739.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="330.4" y="750.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (3 samples, 0.05%)</title><rect x="327.4" y="723.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="330.4" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (218 samples, 3.93%)</title><rect x="328.5" y="771.0" width="46.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="331.5" y="782.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (211 samples, 3.80%)</title><rect x="329.3" y="755.0" width="44.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="332.3" y="766.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.04%)</title><rect x="374.2" y="755.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="377.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.05%)</title><rect x="376.1" y="835.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="379.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.05%)</title><rect x="376.1" y="819.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="376.3" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="379.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="376.3" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.34%)</title><rect x="376.8" y="835.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.34%)</title><rect x="376.8" y="819.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.34%)</title><rect x="376.8" y="803.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.34%)</title><rect x="376.8" y="787.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.8" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.34%)</title><rect x="376.8" y="771.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.8" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.34%)</title><rect x="376.8" y="755.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="379.8" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="377.2" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="380.2" y="750.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.22%)</title><rect x="377.6" y="739.0" width="2.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="380.6" y="750.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.04%)</title><rect x="380.2" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="383.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$78/1856458768.run (763 samples, 13.75%)</title><rect x="380.8" y="867.0" width="162.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.8" y="878.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$4 (763 samples, 13.75%)</title><rect x="380.8" y="851.0" width="162.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="383.8" y="862.0">ru/mail/polis/service..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (206 samples, 3.71%)</title><rect x="380.8" y="835.0" width="43.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.8" y="846.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (193 samples, 3.48%)</title><rect x="381.0" y="819.0" width="41.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="384.0" y="830.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.14%)</title><rect x="381.2" y="803.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.2" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.07%)</title><rect x="382.1" y="787.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.05%)</title><rect x="382.3" y="771.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.05%)</title><rect x="382.3" y="755.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.3" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (184 samples, 3.32%)</title><rect x="382.9" y="803.0" width="39.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.9" y="814.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (183 samples, 3.30%)</title><rect x="383.1" y="787.0" width="38.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="386.1" y="798.0">one..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="383.1" y="771.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="386.1" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (178 samples, 3.21%)</title><rect x="383.8" y="771.0" width="37.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="386.8" y="782.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (174 samples, 3.14%)</title><rect x="384.6" y="755.0" width="37.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.6" y="766.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="384.6" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.6" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (172 samples, 3.10%)</title><rect x="385.0" y="739.0" width="36.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.0" y="750.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="385.0" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="388.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (170 samples, 3.06%)</title><rect x="385.5" y="723.0" width="36.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.5" y="734.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (170 samples, 3.06%)</title><rect x="385.5" y="707.0" width="36.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.5" y="718.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (164 samples, 2.95%)</title><rect x="385.5" y="691.0" width="34.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="388.5" y="702.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (164 samples, 2.95%)</title><rect x="385.5" y="675.0" width="34.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="388.5" y="686.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (164 samples, 2.95%)</title><rect x="385.5" y="659.0" width="34.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.5" y="670.0">su..</text>
</g>
<g>
<title>write (154 samples, 2.77%)</title><rect x="387.6" y="643.0" width="32.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="390.6" y="654.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.11%)</title><rect x="420.3" y="691.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="423.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="420.3" y="675.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="423.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.07%)</title><rect x="420.8" y="675.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.8" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="421.6" y="771.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="424.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.20%)</title><rect x="422.0" y="819.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.20%)</title><rect x="422.0" y="803.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="425.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="422.0" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="425.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.16%)</title><rect x="422.5" y="787.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="425.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="423.5" y="771.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="426.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="423.5" y="755.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.5" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.04%)</title><rect x="423.5" y="739.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.5" y="750.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.04%)</title><rect x="423.5" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.5" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="423.5" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="426.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$73/2009523450.act (557 samples, 10.04%)</title><rect x="424.6" y="835.0" width="118.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="427.6" y="846.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$2 (557 samples, 10.04%)</title><rect x="424.6" y="819.0" width="118.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="427.6" y="830.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="424.6" y="803.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="427.6" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="424.6" y="787.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.6" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="424.6" y="771.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="424.6" y="755.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="427.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (553 samples, 9.96%)</title><rect x="425.4" y="803.0" width="117.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="428.4" y="814.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (550 samples, 9.91%)</title><rect x="425.4" y="787.0" width="117.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="428.4" y="798.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (550 samples, 9.91%)</title><rect x="425.4" y="771.0" width="117.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.4" y="782.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (542 samples, 9.77%)</title><rect x="427.1" y="755.0" width="115.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="430.1" y="766.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (539 samples, 9.71%)</title><rect x="427.8" y="739.0" width="114.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="430.8" y="750.0">rocksdb_put_he..</text>
</g>
<g>
<title>free (3 samples, 0.05%)</title><rect x="428.4" y="723.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="431.4" y="734.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="428.6" y="707.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="431.6" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="429.1" y="723.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="432.1" y="734.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="429.5" y="723.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="432.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (528 samples, 9.51%)</title><rect x="429.9" y="723.0" width="112.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="432.9" y="734.0">rocksdb::Compa..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (528 samples, 9.51%)</title><rect x="429.9" y="707.0" width="112.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="432.9" y="718.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (528 samples, 9.51%)</title><rect x="429.9" y="691.0" width="112.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="432.9" y="702.0">rocksdb::DB::P..</text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.04%)</title><rect x="430.5" y="675.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="433.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (505 samples, 9.10%)</title><rect x="431.0" y="675.0" width="107.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="434.0" y="686.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (499 samples, 8.99%)</title><rect x="431.6" y="659.0" width="106.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="434.6" y="670.0">rocksdb::DBIm..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="434.2" y="643.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="437.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (156 samples, 2.81%)</title><rect x="434.8" y="643.0" width="33.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="437.8" y="654.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (153 samples, 2.76%)</title><rect x="435.2" y="627.0" width="32.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="438.2" y="638.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (152 samples, 2.74%)</title><rect x="435.4" y="611.0" width="32.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="438.4" y="622.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (2 samples, 0.04%)</title><rect x="435.4" y="595.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="438.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (150 samples, 2.70%)</title><rect x="435.9" y="595.0" width="31.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="438.9" y="606.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="436.5" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.5" y="590.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="436.5" y="563.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="439.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (145 samples, 2.61%)</title><rect x="436.9" y="579.0" width="30.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.9" y="590.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.05%)</title><rect x="437.8" y="563.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="440.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (136 samples, 2.45%)</title><rect x="438.8" y="563.0" width="29.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="441.8" y="574.0">ro..</text>
</g>
<g>
<title>write (135 samples, 2.43%)</title><rect x="439.1" y="547.0" width="28.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="442.1" y="558.0">wr..</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.05%)</title><rect x="468.0" y="643.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="471.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (38 samples, 0.68%)</title><rect x="468.6" y="643.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="471.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (35 samples, 0.63%)</title><rect x="469.2" y="627.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="472.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (35 samples, 0.63%)</title><rect x="469.2" y="611.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="472.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (34 samples, 0.61%)</title><rect x="469.5" y="595.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="472.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (30 samples, 0.54%)</title><rect x="469.7" y="579.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="472.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.04%)</title><rect x="470.3" y="563.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="473.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (25 samples, 0.45%)</title><rect x="470.7" y="563.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="473.7" y="574.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.07%)</title><rect x="472.4" y="547.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="475.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="473.5" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.16%)</title><rect x="473.9" y="547.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="476.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.07%)</title><rect x="475.0" y="531.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="478.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="476.3" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="479.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (27 samples, 0.49%)</title><rect x="476.7" y="643.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="479.7" y="654.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="476.9" y="627.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="479.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (24 samples, 0.43%)</title><rect x="477.3" y="627.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="480.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.43%)</title><rect x="477.3" y="611.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="480.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.41%)</title><rect x="477.5" y="595.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="480.5" y="606.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="477.7" y="579.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="480.7" y="590.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="477.7" y="563.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="480.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (18 samples, 0.32%)</title><rect x="478.2" y="579.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="481.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.29%)</title><rect x="478.6" y="563.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="481.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.22%)</title><rect x="479.4" y="547.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="482.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.13%)</title><rect x="480.5" y="531.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="483.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.07%)</title><rect x="481.1" y="515.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="484.1" y="526.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="481.6" y="499.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="484.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="482.0" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="485.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (151 samples, 2.72%)</title><rect x="482.4" y="643.0" width="32.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="485.4" y="654.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (150 samples, 2.70%)</title><rect x="482.6" y="627.0" width="31.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="485.6" y="638.0">ro..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.04%)</title><rect x="483.1" y="611.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="486.1" y="622.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="483.5" y="611.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="486.5" y="622.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="483.5" y="595.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="486.5" y="606.0"></text>
</g>
<g>
<title>xdrrec_ops (143 samples, 2.58%)</title><rect x="484.1" y="611.0" width="30.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="487.1" y="622.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (9 samples, 0.16%)</title><rect x="514.7" y="643.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="517.7" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.13%)</title><rect x="515.0" y="627.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="518.0" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.13%)</title><rect x="515.0" y="611.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="518.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (81 samples, 1.46%)</title><rect x="516.7" y="643.0" width="17.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="519.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (79 samples, 1.42%)</title><rect x="516.7" y="627.0" width="16.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="519.7" y="638.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (64 samples, 1.15%)</title><rect x="518.1" y="611.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="521.1" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (52 samples, 0.94%)</title><rect x="518.1" y="595.0" width="11.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="521.1" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_wait (11 samples, 0.20%)</title><rect x="529.4" y="595.0" width="2.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="532.4" y="606.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.18%)</title><rect x="529.6" y="579.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="532.6" y="590.0"></text>
</g>
<g>
<title>__psynch_mutexwait (9 samples, 0.16%)</title><rect x="529.6" y="563.0" width="1.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="532.6" y="574.0"></text>
</g>
<g>
<title>xdrrec_ops (8 samples, 0.14%)</title><rect x="531.8" y="611.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="534.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (14 samples, 0.25%)</title><rect x="533.9" y="643.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="536.9" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.22%)</title><rect x="534.1" y="627.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="537.1" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.20%)</title><rect x="534.1" y="611.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="537.1" y="622.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.04%)</title><rect x="536.9" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="539.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="538.3" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="541.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.09%)</title><rect x="538.8" y="675.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="541.8" y="686.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.05%)</title><rect x="538.8" y="659.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="541.8" y="670.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="539.0" y="643.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="542.0" y="654.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="539.0" y="627.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="542.0" y="638.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="539.0" y="611.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="542.0" y="622.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="539.4" y="659.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="542.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (9 samples, 0.16%)</title><rect x="539.8" y="675.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="542.8" y="686.0"></text>
</g>
<g>
<title>free (4 samples, 0.07%)</title><rect x="540.0" y="659.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="543.0" y="670.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.05%)</title><rect x="540.3" y="643.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="543.3" y="654.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="540.9" y="659.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="543.9" y="670.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.04%)</title><rect x="541.3" y="659.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="544.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.shiftByte (2 samples, 0.04%)</title><rect x="542.4" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.4" y="798.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.05%)</title><rect x="543.0" y="915.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="546.0" y="926.0"></text>
</g>
<g>
<title>[worker tid=28419] (983 samples, 17.71%)</title><rect x="543.7" y="931.0" width="209.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="546.7" y="942.0">[worker tid=28419]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="543.7" y="915.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="546.7" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.05%)</title><rect x="543.7" y="899.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="546.7" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.05%)</title><rect x="543.7" y="883.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="546.7" y="894.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.07%)</title><rect x="544.3" y="915.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="547.3" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.07%)</title><rect x="544.3" y="899.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="547.3" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (972 samples, 17.51%)</title><rect x="545.4" y="915.0" width="206.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.4" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (972 samples, 17.51%)</title><rect x="545.4" y="899.0" width="206.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.4" y="910.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (972 samples, 17.51%)</title><rect x="545.4" y="883.0" width="206.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="548.4" y="894.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.05%)</title><rect x="547.9" y="867.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="550.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.09%)</title><rect x="548.5" y="867.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="551.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (5 samples, 0.09%)</title><rect x="548.5" y="851.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="551.5" y="862.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (5 samples, 0.09%)</title><rect x="548.5" y="835.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="551.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (285 samples, 5.14%)</title><rect x="549.8" y="867.0" width="60.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="552.8" y="878.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (281 samples, 5.06%)</title><rect x="550.7" y="851.0" width="59.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.7" y="862.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (252 samples, 4.54%)</title><rect x="551.5" y="835.0" width="53.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="554.5" y="846.0">java/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.05%)</title><rect x="551.5" y="819.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="554.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.05%)</title><rect x="552.4" y="819.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="555.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.04%)</title><rect x="553.0" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="556.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="553.0" y="803.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="556.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (243 samples, 4.38%)</title><rect x="553.4" y="819.0" width="51.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="556.4" y="830.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (242 samples, 4.36%)</title><rect x="553.7" y="803.0" width="51.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="556.7" y="814.0">jdk/i..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (2 samples, 0.04%)</title><rect x="556.0" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="559.0" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (226 samples, 4.07%)</title><rect x="557.1" y="787.0" width="48.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="560.1" y="798.0">Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (210 samples, 3.78%)</title><rect x="558.3" y="771.0" width="44.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="561.3" y="782.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (203 samples, 3.66%)</title><rect x="559.4" y="755.0" width="43.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="562.4" y="766.0">__ps..</text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.04%)</title><rect x="603.2" y="771.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="606.2" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.04%)</title><rect x="604.7" y="771.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="607.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.11%)</title><rect x="605.1" y="835.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="608.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.11%)</title><rect x="605.1" y="819.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="608.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.04%)</title><rect x="605.1" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="608.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="605.1" y="787.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.04%)</title><rect x="605.7" y="803.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="608.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="605.7" y="787.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="608.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.04%)</title><rect x="605.7" y="771.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="608.7" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title><rect x="605.7" y="755.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="608.7" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.04%)</title><rect x="605.7" y="739.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="608.7" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.04%)</title><rect x="605.7" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="608.7" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="605.7" y="707.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="608.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.34%)</title><rect x="606.4" y="835.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.34%)</title><rect x="606.4" y="819.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.34%)</title><rect x="606.4" y="803.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.34%)</title><rect x="606.4" y="787.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.34%)</title><rect x="606.4" y="771.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.4" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (18 samples, 0.32%)</title><rect x="606.6" y="755.0" width="3.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="609.6" y="766.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.25%)</title><rect x="607.2" y="739.0" width="3.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="610.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$78/1856458768.run (666 samples, 12.00%)</title><rect x="610.4" y="867.0" width="141.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.4" y="878.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$4 (666 samples, 12.00%)</title><rect x="610.4" y="851.0" width="141.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="613.4" y="862.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (150 samples, 2.70%)</title><rect x="610.4" y="835.0" width="31.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="613.4" y="846.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (147 samples, 2.65%)</title><rect x="610.6" y="819.0" width="31.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="613.6" y="830.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.13%)</title><rect x="610.6" y="803.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.6" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.05%)</title><rect x="611.5" y="787.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="614.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="611.7" y="771.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.7" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (140 samples, 2.52%)</title><rect x="612.1" y="803.0" width="29.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="615.1" y="814.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (138 samples, 2.49%)</title><rect x="612.5" y="787.0" width="29.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.5" y="798.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (136 samples, 2.45%)</title><rect x="613.0" y="771.0" width="28.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="616.0" y="782.0">on..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.07%)</title><rect x="613.8" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="616.8" y="766.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (128 samples, 2.31%)</title><rect x="614.7" y="755.0" width="27.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.7" y="766.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (127 samples, 2.29%)</title><rect x="614.9" y="739.0" width="27.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.9" y="750.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (125 samples, 2.25%)</title><rect x="615.3" y="723.0" width="26.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="618.3" y="734.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (123 samples, 2.22%)</title><rect x="615.7" y="707.0" width="26.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="618.7" y="718.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (122 samples, 2.20%)</title><rect x="615.7" y="691.0" width="26.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="618.7" y="702.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (122 samples, 2.20%)</title><rect x="615.7" y="675.0" width="26.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="618.7" y="686.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (122 samples, 2.20%)</title><rect x="615.7" y="659.0" width="26.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="618.7" y="670.0">s..</text>
</g>
<g>
<title>write (116 samples, 2.09%)</title><rect x="617.0" y="643.0" width="24.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="620.0" y="654.0">w..</text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.04%)</title><rect x="641.9" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="644.9" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$73/2009523450.act (516 samples, 9.30%)</title><rect x="642.3" y="835.0" width="109.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.3" y="846.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$2 (516 samples, 9.30%)</title><rect x="642.3" y="819.0" width="109.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="645.3" y="830.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="643.2" y="803.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.2" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="643.2" y="787.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="646.2" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="643.2" y="771.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="646.2" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="643.2" y="755.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="646.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="644.0" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (506 samples, 9.12%)</title><rect x="644.4" y="803.0" width="107.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.4" y="814.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (502 samples, 9.05%)</title><rect x="644.4" y="787.0" width="106.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.4" y="798.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (502 samples, 9.05%)</title><rect x="644.4" y="771.0" width="106.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="647.4" y="782.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (498 samples, 8.97%)</title><rect x="645.3" y="755.0" width="105.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="648.3" y="766.0">Java_org_rock..</text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="645.5" y="739.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="648.5" y="750.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (495 samples, 8.92%)</title><rect x="645.9" y="739.0" width="105.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="648.9" y="750.0">rocksdb_put_h..</text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="647.0" y="723.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="650.0" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.11%)</title><rect x="647.6" y="723.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="650.6" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="647.8" y="707.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="650.8" y="718.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="648.1" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="651.1" y="702.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="648.1" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="651.1" y="686.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="648.1" y="659.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="651.1" y="670.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="648.1" y="643.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="651.1" y="654.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="648.9" y="723.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="651.9" y="734.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.14%)</title><rect x="649.3" y="723.0" width="1.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="652.3" y="734.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.14%)</title><rect x="649.3" y="707.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="652.3" y="718.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.14%)</title><rect x="649.3" y="691.0" width="1.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="652.3" y="702.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.04%)</title><rect x="649.5" y="675.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="652.5" y="686.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.09%)</title><rect x="650.0" y="675.0" width="1.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="653.0" y="686.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.09%)</title><rect x="650.0" y="659.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="653.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (471 samples, 8.49%)</title><rect x="651.0" y="723.0" width="100.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="654.0" y="734.0">rocksdb::Com..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (469 samples, 8.45%)</title><rect x="651.5" y="707.0" width="99.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="654.5" y="718.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (468 samples, 8.43%)</title><rect x="651.5" y="691.0" width="99.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="654.5" y="702.0">rocksdb::DB:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (457 samples, 8.23%)</title><rect x="651.7" y="675.0" width="97.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="654.7" y="686.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (453 samples, 8.16%)</title><rect x="652.1" y="659.0" width="96.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="655.1" y="670.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="654.2" y="643.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="657.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (141 samples, 2.54%)</title><rect x="654.6" y="643.0" width="30.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="657.6" y="654.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (137 samples, 2.47%)</title><rect x="655.3" y="627.0" width="29.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="658.3" y="638.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (135 samples, 2.43%)</title><rect x="655.7" y="611.0" width="28.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="658.7" y="622.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (134 samples, 2.41%)</title><rect x="655.9" y="595.0" width="28.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="658.9" y="606.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="656.6" y="579.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="659.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (128 samples, 2.31%)</title><rect x="657.2" y="579.0" width="27.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="660.2" y="590.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (127 samples, 2.29%)</title><rect x="657.4" y="563.0" width="27.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="660.4" y="574.0">r..</text>
</g>
<g>
<title>write (126 samples, 2.27%)</title><rect x="657.6" y="547.0" width="26.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="660.6" y="558.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (30 samples, 0.54%)</title><rect x="684.8" y="643.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="687.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (26 samples, 0.47%)</title><rect x="685.7" y="627.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="688.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.43%)</title><rect x="686.1" y="611.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="689.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.40%)</title><rect x="686.5" y="595.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="689.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (20 samples, 0.36%)</title><rect x="686.5" y="579.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="689.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.31%)</title><rect x="687.2" y="563.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="690.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.13%)</title><rect x="688.9" y="547.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="691.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="689.7" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="692.7" y="542.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="689.7" y="515.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="692.7" y="526.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="690.4" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="693.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (18 samples, 0.32%)</title><rect x="691.2" y="643.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="694.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (14 samples, 0.25%)</title><rect x="692.1" y="627.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="695.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (13 samples, 0.23%)</title><rect x="692.3" y="611.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="695.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (13 samples, 0.23%)</title><rect x="692.3" y="595.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="695.3" y="606.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="692.3" y="579.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="695.3" y="590.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="692.3" y="563.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="695.3" y="574.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="692.3" y="547.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="695.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (10 samples, 0.18%)</title><rect x="692.7" y="579.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="695.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.14%)</title><rect x="693.1" y="563.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="696.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.09%)</title><rect x="693.8" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="696.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.05%)</title><rect x="694.2" y="531.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="697.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="694.4" y="515.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="697.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (147 samples, 2.65%)</title><rect x="695.0" y="643.0" width="31.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="698.0" y="654.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (147 samples, 2.65%)</title><rect x="695.0" y="627.0" width="31.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="698.0" y="638.0">ro..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="696.5" y="611.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="699.5" y="622.0"></text>
</g>
<g>
<title>xdrrec_ops (138 samples, 2.49%)</title><rect x="697.0" y="611.0" width="29.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="700.0" y="622.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="726.3" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="729.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="726.3" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="729.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (12 samples, 0.22%)</title><rect x="726.7" y="643.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="729.7" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.20%)</title><rect x="726.9" y="627.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="729.9" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.20%)</title><rect x="726.9" y="611.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="729.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (68 samples, 1.23%)</title><rect x="729.3" y="643.0" width="14.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="732.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (65 samples, 1.17%)</title><rect x="729.3" y="627.0" width="13.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="732.3" y="638.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (55 samples, 0.99%)</title><rect x="730.1" y="611.0" width="11.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="733.1" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (49 samples, 0.88%)</title><rect x="730.1" y="595.0" width="10.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="733.1" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.11%)</title><rect x="740.5" y="595.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="743.5" y="606.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.11%)</title><rect x="740.5" y="579.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="743.5" y="590.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.11%)</title><rect x="740.5" y="563.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="743.5" y="574.0"></text>
</g>
<g>
<title>xdrrec_ops (6 samples, 0.11%)</title><rect x="741.8" y="611.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="744.8" y="622.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.04%)</title><rect x="743.3" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="746.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (15 samples, 0.27%)</title><rect x="743.7" y="643.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.7" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.18%)</title><rect x="744.4" y="627.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="747.4" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.18%)</title><rect x="744.4" y="611.0" width="2.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="747.4" y="622.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="746.5" y="627.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="749.5" y="638.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="746.5" y="611.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="749.5" y="622.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="746.5" y="595.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="749.5" y="606.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (5 samples, 0.09%)</title><rect x="747.3" y="643.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="750.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.07%)</title><rect x="747.6" y="627.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="750.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.07%)</title><rect x="749.0" y="675.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="752.0" y="686.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.05%)</title><rect x="749.0" y="659.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="752.0" y="670.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.05%)</title><rect x="749.0" y="643.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="752.0" y="654.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.05%)</title><rect x="749.0" y="627.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="752.0" y="638.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.05%)</title><rect x="749.0" y="611.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="752.0" y="622.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="749.0" y="595.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="752.0" y="606.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.05%)</title><rect x="749.0" y="579.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="752.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.05%)</title><rect x="749.9" y="675.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="752.9" y="686.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="750.1" y="659.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="753.1" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.shiftByte (2 samples, 0.04%)</title><rect x="751.2" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="754.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (2 samples, 0.04%)</title><rect x="751.6" y="787.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="754.6" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.04%)</title><rect x="751.6" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="754.6" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="751.6" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="754.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="751.6" y="739.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="754.6" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="751.6" y="723.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="754.6" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="752.0" y="915.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="755.0" y="926.0"></text>
</g>
<g>
<title>[worker tid=35587] (1,041 samples, 18.76%)</title><rect x="752.7" y="931.0" width="221.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="755.7" y="942.0">[worker tid=35587]</text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.11%)</title><rect x="752.9" y="915.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="755.9" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.09%)</title><rect x="753.1" y="899.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="756.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,032 samples, 18.59%)</title><rect x="754.4" y="915.0" width="219.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="757.4" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,032 samples, 18.59%)</title><rect x="754.4" y="899.0" width="219.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="757.4" y="910.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,032 samples, 18.59%)</title><rect x="754.4" y="883.0" width="219.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.4" y="894.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.07%)</title><rect x="756.7" y="867.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="759.7" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.07%)</title><rect x="756.7" y="851.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="759.7" y="862.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.05%)</title><rect x="756.7" y="835.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="759.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.04%)</title><rect x="757.8" y="867.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="760.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="757.8" y="851.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (257 samples, 4.63%)</title><rect x="758.2" y="867.0" width="54.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="761.2" y="878.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (254 samples, 4.58%)</title><rect x="758.8" y="851.0" width="54.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.8" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (227 samples, 4.09%)</title><rect x="759.0" y="835.0" width="48.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.0" y="846.0">java..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.09%)</title><rect x="759.0" y="819.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="762.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (219 samples, 3.95%)</title><rect x="760.7" y="819.0" width="46.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.7" y="830.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (218 samples, 3.93%)</title><rect x="760.9" y="803.0" width="46.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="763.9" y="814.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (214 samples, 3.86%)</title><rect x="761.8" y="787.0" width="45.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="764.8" y="798.0">Unsa..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.05%)</title><rect x="762.2" y="771.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="765.2" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (201 samples, 3.62%)</title><rect x="762.9" y="771.0" width="42.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="765.9" y="782.0">Park..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.09%)</title><rect x="763.3" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="766.3" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.05%)</title><rect x="763.5" y="739.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="766.5" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (192 samples, 3.46%)</title><rect x="764.3" y="755.0" width="40.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="767.3" y="766.0">__p..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="806.0" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="809.0" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="806.9" y="771.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="809.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.05%)</title><rect x="807.3" y="835.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.05%)</title><rect x="807.3" y="819.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.04%)</title><rect x="807.3" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="807.3" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.3" y="798.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.04%)</title><rect x="807.3" y="771.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="810.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 0.41%)</title><rect x="807.9" y="835.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.41%)</title><rect x="807.9" y="819.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 0.40%)</title><rect x="808.1" y="803.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="811.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 0.40%)</title><rect x="808.1" y="787.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (22 samples, 0.40%)</title><rect x="808.1" y="771.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="811.1" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (20 samples, 0.36%)</title><rect x="808.6" y="755.0" width="4.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="811.6" y="766.0"></text>
</g>
<g>
<title>__psynch_cvsignal (15 samples, 0.27%)</title><rect x="809.2" y="739.0" width="3.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="812.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$78/1856458768.run (757 samples, 13.64%)</title><rect x="812.8" y="867.0" width="161.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="815.8" y="878.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$4 (756 samples, 13.62%)</title><rect x="813.0" y="851.0" width="160.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="816.0" y="862.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (203 samples, 3.66%)</title><rect x="813.0" y="835.0" width="43.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.0" y="846.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (195 samples, 3.51%)</title><rect x="813.3" y="819.0" width="41.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.3" y="830.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.11%)</title><rect x="813.3" y="803.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="816.3" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.05%)</title><rect x="813.9" y="787.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="816.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.05%)</title><rect x="813.9" y="771.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.9" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (189 samples, 3.41%)</title><rect x="814.5" y="803.0" width="40.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.5" y="814.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (188 samples, 3.39%)</title><rect x="814.7" y="787.0" width="40.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.7" y="798.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (183 samples, 3.30%)</title><rect x="815.4" y="771.0" width="38.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="818.4" y="782.0">one..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="815.4" y="755.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="818.4" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.04%)</title><rect x="815.6" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="818.6" y="750.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (2 samples, 0.04%)</title><rect x="815.6" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="818.6" y="734.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (180 samples, 3.24%)</title><rect x="816.0" y="755.0" width="38.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="819.0" y="766.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (180 samples, 3.24%)</title><rect x="816.0" y="739.0" width="38.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="819.0" y="750.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="816.0" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="819.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (178 samples, 3.21%)</title><rect x="816.4" y="723.0" width="37.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="819.4" y="734.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (177 samples, 3.19%)</title><rect x="816.7" y="707.0" width="37.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="819.7" y="718.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (171 samples, 3.08%)</title><rect x="816.7" y="691.0" width="36.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="819.7" y="702.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (171 samples, 3.08%)</title><rect x="816.7" y="675.0" width="36.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="819.7" y="686.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (171 samples, 3.08%)</title><rect x="816.7" y="659.0" width="36.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="819.7" y="670.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.05%)</title><rect x="818.1" y="643.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="821.1" y="654.0"></text>
</g>
<g>
<title>write (161 samples, 2.90%)</title><rect x="818.8" y="643.0" width="34.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="821.8" y="654.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.11%)</title><rect x="853.0" y="691.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="856.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.07%)</title><rect x="853.0" y="675.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="856.0" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.04%)</title><rect x="853.9" y="675.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="856.9" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="854.3" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="857.3" y="782.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="854.3" y="755.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="857.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.13%)</title><rect x="854.7" y="819.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.07%)</title><rect x="855.3" y="803.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="858.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.05%)</title><rect x="855.6" y="787.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="858.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$73/2009523450.act (553 samples, 9.96%)</title><rect x="856.2" y="835.0" width="117.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="859.2" y="846.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$2 (553 samples, 9.96%)</title><rect x="856.2" y="819.0" width="117.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="859.2" y="830.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="856.4" y="803.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="859.4" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="856.4" y="787.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="859.4" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="856.4" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="859.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="856.4" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="859.4" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (548 samples, 9.87%)</title><rect x="857.3" y="803.0" width="116.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="860.3" y="814.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (543 samples, 9.78%)</title><rect x="857.3" y="787.0" width="115.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="860.3" y="798.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (543 samples, 9.78%)</title><rect x="857.3" y="771.0" width="115.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="860.3" y="782.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (540 samples, 9.73%)</title><rect x="857.7" y="755.0" width="114.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="860.7" y="766.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (535 samples, 9.64%)</title><rect x="858.7" y="739.0" width="113.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="861.7" y="750.0">rocksdb_put_he..</text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="859.8" y="723.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="862.8" y="734.0"></text>
</g>
<g>
<title>free_tiny (7 samples, 0.13%)</title><rect x="860.2" y="723.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="863.2" y="734.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.05%)</title><rect x="861.1" y="707.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="864.1" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="861.7" y="723.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="864.7" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="862.2" y="723.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="865.2" y="734.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="862.8" y="723.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="865.8" y="734.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="862.8" y="707.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="865.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (513 samples, 9.24%)</title><rect x="863.2" y="723.0" width="109.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="866.2" y="734.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (513 samples, 9.24%)</title><rect x="863.2" y="707.0" width="109.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="866.2" y="718.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (513 samples, 9.24%)</title><rect x="863.2" y="691.0" width="109.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.2" y="702.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (505 samples, 9.10%)</title><rect x="863.4" y="675.0" width="107.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="866.4" y="686.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (502 samples, 9.05%)</title><rect x="863.9" y="659.0" width="106.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="866.9" y="670.0">rocksdb::DBIm..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="866.4" y="643.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="869.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (163 samples, 2.94%)</title><rect x="866.8" y="643.0" width="34.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="869.8" y="654.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (159 samples, 2.86%)</title><rect x="867.5" y="627.0" width="33.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="870.5" y="638.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (158 samples, 2.85%)</title><rect x="867.7" y="611.0" width="33.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="870.7" y="622.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (158 samples, 2.85%)</title><rect x="867.7" y="595.0" width="33.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="870.7" y="606.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (154 samples, 2.77%)</title><rect x="868.5" y="579.0" width="32.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="871.5" y="590.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (152 samples, 2.74%)</title><rect x="869.0" y="563.0" width="32.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="872.0" y="574.0">ro..</text>
</g>
<g>
<title>write (149 samples, 2.68%)</title><rect x="869.6" y="547.0" width="31.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="872.6" y="558.0">wr..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (25 samples, 0.45%)</title><rect x="902.1" y="643.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="905.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (23 samples, 0.41%)</title><rect x="902.5" y="627.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="905.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.40%)</title><rect x="902.8" y="611.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="905.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (20 samples, 0.36%)</title><rect x="903.2" y="595.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="906.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (17 samples, 0.31%)</title><rect x="903.2" y="579.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="906.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.27%)</title><rect x="903.6" y="563.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="906.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.07%)</title><rect x="905.3" y="547.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="908.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="906.8" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (35 samples, 0.63%)</title><rect x="907.4" y="643.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (34 samples, 0.61%)</title><rect x="907.7" y="627.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="910.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (33 samples, 0.59%)</title><rect x="907.9" y="611.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="910.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (32 samples, 0.58%)</title><rect x="908.1" y="595.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="911.1" y="606.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.11%)</title><rect x="908.3" y="579.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="911.3" y="590.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.11%)</title><rect x="908.3" y="563.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="911.3" y="574.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.09%)</title><rect x="908.3" y="547.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="911.3" y="558.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.09%)</title><rect x="908.3" y="531.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="911.3" y="542.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.09%)</title><rect x="908.3" y="515.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="911.3" y="526.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="908.9" y="499.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="911.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (23 samples, 0.41%)</title><rect x="909.8" y="579.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="912.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.36%)</title><rect x="910.4" y="563.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="913.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="910.4" y="547.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="913.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.31%)</title><rect x="911.1" y="547.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="914.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.20%)</title><rect x="912.3" y="531.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="915.3" y="542.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="912.8" y="515.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="915.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.09%)</title><rect x="913.2" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.2" y="526.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="914.2" y="515.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="917.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (131 samples, 2.36%)</title><rect x="915.1" y="643.0" width="27.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="918.1" y="654.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (131 samples, 2.36%)</title><rect x="915.1" y="627.0" width="27.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="918.1" y="638.0">r..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.07%)</title><rect x="916.4" y="611.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="919.4" y="622.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.05%)</title><rect x="916.4" y="595.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="919.4" y="606.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="916.6" y="579.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="919.6" y="590.0"></text>
</g>
<g>
<title>xdrrec_ops (120 samples, 2.16%)</title><rect x="917.4" y="611.0" width="25.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="920.4" y="622.0">x..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (10 samples, 0.18%)</title><rect x="943.2" y="643.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="946.2" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.18%)</title><rect x="943.2" y="627.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="946.2" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.13%)</title><rect x="943.2" y="611.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="946.2" y="622.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.04%)</title><rect x="944.6" y="611.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="947.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (92 samples, 1.66%)</title><rect x="945.3" y="643.0" width="19.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (90 samples, 1.62%)</title><rect x="945.3" y="627.0" width="19.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.3" y="638.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (72 samples, 1.30%)</title><rect x="947.6" y="611.0" width="15.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="950.6" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (59 samples, 1.06%)</title><rect x="947.6" y="595.0" width="12.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="950.6" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_wait (13 samples, 0.23%)</title><rect x="960.2" y="595.0" width="2.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="963.2" y="606.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (9 samples, 0.16%)</title><rect x="961.0" y="579.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="964.0" y="590.0"></text>
</g>
<g>
<title>__psynch_mutexwait (8 samples, 0.14%)</title><rect x="961.2" y="563.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="964.2" y="574.0"></text>
</g>
<g>
<title>xdrrec_ops (7 samples, 0.13%)</title><rect x="962.9" y="611.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="965.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (20 samples, 0.36%)</title><rect x="964.8" y="643.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="967.8" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (18 samples, 0.32%)</title><rect x="964.8" y="627.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.8" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.29%)</title><rect x="964.8" y="611.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="967.8" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="968.2" y="611.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="971.2" y="622.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="968.7" y="627.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.7" y="638.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="968.7" y="611.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="971.7" y="622.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="968.7" y="595.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="971.7" y="606.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.05%)</title><rect x="969.5" y="643.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.5" y="654.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="970.2" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="970.2" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="970.8" y="675.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.05%)</title><rect x="971.4" y="675.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.4" y="686.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="971.4" y="659.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="974.4" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.shiftByte (3 samples, 0.05%)</title><rect x="972.7" y="787.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="975.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (2 samples, 0.04%)</title><rect x="972.9" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="975.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (2 samples, 0.04%)</title><rect x="973.3" y="787.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="976.3" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.04%)</title><rect x="973.3" y="771.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="976.3" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="973.3" y="755.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="976.3" y="766.0"></text>
</g>
<g>
<title>[worker tid=36099] (1,016 samples, 18.31%)</title><rect x="974.0" y="931.0" width="216.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="977.0" y="942.0">[worker tid=36099]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.11%)</title><rect x="974.0" y="915.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="977.0" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.11%)</title><rect x="974.0" y="899.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.0" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="974.2" y="883.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.2" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.04%)</title><rect x="974.6" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="977.6" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="974.6" y="867.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.6" y="878.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.05%)</title><rect x="975.3" y="915.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="978.3" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="975.5" y="899.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,005 samples, 18.11%)</title><rect x="976.1" y="915.0" width="213.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="979.1" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,005 samples, 18.11%)</title><rect x="976.1" y="899.0" width="213.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="979.1" y="910.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,005 samples, 18.11%)</title><rect x="976.1" y="883.0" width="213.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="979.1" y="894.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.04%)</title><rect x="978.2" y="867.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="981.2" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (7 samples, 0.13%)</title><rect x="978.7" y="867.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="981.7" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (6 samples, 0.11%)</title><rect x="978.9" y="851.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="981.9" y="862.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.04%)</title><rect x="979.1" y="835.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="982.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.04%)</title><rect x="980.2" y="867.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="983.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="980.2" y="851.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="983.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.04%)</title><rect x="980.2" y="835.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="983.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.04%)</title><rect x="980.6" y="867.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="983.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="980.6" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="983.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 0.04%)</title><rect x="980.6" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="983.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (225 samples, 4.05%)</title><rect x="981.0" y="867.0" width="47.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="984.0" y="878.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (224 samples, 4.04%)</title><rect x="981.2" y="851.0" width="47.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="984.2" y="862.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (198 samples, 3.57%)</title><rect x="981.6" y="835.0" width="42.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="984.6" y="846.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.05%)</title><rect x="982.5" y="819.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="985.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.05%)</title><rect x="982.5" y="803.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="985.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.04%)</title><rect x="982.7" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="985.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.04%)</title><rect x="982.7" y="771.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="985.7" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.04%)</title><rect x="982.7" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="985.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (190 samples, 3.42%)</title><rect x="983.3" y="819.0" width="40.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="986.3" y="830.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (190 samples, 3.42%)</title><rect x="983.3" y="803.0" width="40.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="986.3" y="814.0">jdk..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (181 samples, 3.26%)</title><rect x="985.3" y="787.0" width="38.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="988.3" y="798.0">Uns..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.09%)</title><rect x="985.5" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.5" y="782.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (4 samples, 0.07%)</title><rect x="985.7" y="755.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.7" y="766.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.07%)</title><rect x="985.7" y="739.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.7" y="750.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (3 samples, 0.05%)</title><rect x="985.7" y="723.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.7" y="734.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="986.5" y="771.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.5" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (164 samples, 2.95%)</title><rect x="987.2" y="771.0" width="34.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.2" y="782.0">Pa..</text>
</g>
<g>
<title>__psynch_cvwait (156 samples, 2.81%)</title><rect x="987.8" y="755.0" width="33.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="990.8" y="766.0">__..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.05%)</title><rect x="1021.0" y="755.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1024.0" y="766.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.04%)</title><rect x="1022.0" y="771.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.0" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="1022.5" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.5" y="782.0"></text>
</g>
<g>
<title>pthread_cond_wait (3 samples, 0.05%)</title><rect x="1023.1" y="771.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1026.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.09%)</title><rect x="1023.7" y="835.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1026.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.09%)</title><rect x="1023.7" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1026.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.05%)</title><rect x="1023.7" y="803.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1026.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.05%)</title><rect x="1023.7" y="787.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1026.7" y="798.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.05%)</title><rect x="1023.7" y="771.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1026.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.04%)</title><rect x="1024.4" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.34%)</title><rect x="1024.8" y="835.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1027.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.34%)</title><rect x="1024.8" y="819.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1027.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 0.32%)</title><rect x="1025.0" y="803.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1028.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 0.32%)</title><rect x="1025.0" y="787.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1028.0" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 0.32%)</title><rect x="1025.0" y="771.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.0" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (13 samples, 0.23%)</title><rect x="1025.9" y="755.0" width="2.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1028.9" y="766.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.16%)</title><rect x="1026.3" y="739.0" width="1.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1029.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$78/1856458768.run (756 samples, 13.62%)</title><rect x="1029.1" y="867.0" width="160.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1032.1" y="878.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$4 (756 samples, 13.62%)</title><rect x="1029.1" y="851.0" width="160.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1032.1" y="862.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (179 samples, 3.23%)</title><rect x="1029.1" y="835.0" width="38.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1032.1" y="846.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (170 samples, 3.06%)</title><rect x="1029.5" y="819.0" width="36.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1032.5" y="830.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.16%)</title><rect x="1029.7" y="803.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1032.7" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1029.9" y="787.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1032.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.11%)</title><rect x="1030.3" y="787.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.3" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.04%)</title><rect x="1030.3" y="771.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1033.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.05%)</title><rect x="1030.8" y="771.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1033.8" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (160 samples, 2.88%)</title><rect x="1031.6" y="803.0" width="34.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.6" y="814.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (158 samples, 2.85%)</title><rect x="1032.0" y="787.0" width="33.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1035.0" y="798.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (156 samples, 2.81%)</title><rect x="1032.5" y="771.0" width="33.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1035.5" y="782.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (154 samples, 2.77%)</title><rect x="1032.9" y="755.0" width="32.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1035.9" y="766.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="1032.9" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1035.9" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1032.9" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1035.9" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1032.9" y="707.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1035.9" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (152 samples, 2.74%)</title><rect x="1033.3" y="739.0" width="32.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1036.3" y="750.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="1033.3" y="723.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1036.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (149 samples, 2.68%)</title><rect x="1033.9" y="723.0" width="31.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1036.9" y="734.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (148 samples, 2.67%)</title><rect x="1034.2" y="707.0" width="31.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1037.2" y="718.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (146 samples, 2.63%)</title><rect x="1034.2" y="691.0" width="31.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1037.2" y="702.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (146 samples, 2.63%)</title><rect x="1034.2" y="675.0" width="31.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1037.2" y="686.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (146 samples, 2.63%)</title><rect x="1034.2" y="659.0" width="31.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1037.2" y="670.0">su..</text>
</g>
<g>
<title>write (140 samples, 2.52%)</title><rect x="1035.4" y="643.0" width="29.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1038.4" y="654.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.04%)</title><rect x="1065.2" y="691.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1068.2" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.13%)</title><rect x="1065.6" y="819.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1068.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.09%)</title><rect x="1066.0" y="803.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1069.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.07%)</title><rect x="1066.3" y="787.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1069.3" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.04%)</title><rect x="1066.7" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1069.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$73/2009523450.act (577 samples, 10.40%)</title><rect x="1067.1" y="835.0" width="122.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1070.1" y="846.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$2 (577 samples, 10.40%)</title><rect x="1067.1" y="819.0" width="122.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.1" y="830.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.11%)</title><rect x="1067.1" y="803.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1070.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.11%)</title><rect x="1067.1" y="787.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1070.1" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.11%)</title><rect x="1067.1" y="771.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.11%)</title><rect x="1067.1" y="755.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1070.1" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1067.5" y="739.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1070.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (570 samples, 10.27%)</title><rect x="1068.6" y="803.0" width="121.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1071.6" y="814.0">ru/mail/polis/d..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (568 samples, 10.23%)</title><rect x="1068.6" y="787.0" width="120.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1071.6" y="798.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (568 samples, 10.23%)</title><rect x="1068.6" y="771.0" width="120.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1071.6" y="782.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (567 samples, 10.22%)</title><rect x="1068.8" y="755.0" width="120.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1071.8" y="766.0">Java_org_rocksd..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (562 samples, 10.13%)</title><rect x="1069.9" y="739.0" width="119.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.9" y="750.0">rocksdb_put_hel..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.05%)</title><rect x="1070.5" y="723.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1073.5" y="734.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.04%)</title><rect x="1070.7" y="707.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1073.7" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.09%)</title><rect x="1071.4" y="723.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1074.4" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.07%)</title><rect x="1071.6" y="707.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.6" y="718.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="1072.0" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.0" y="702.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="1072.0" y="675.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.0" y="686.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="1072.0" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.0" y="670.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="1072.0" y="643.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.0" y="654.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.07%)</title><rect x="1072.4" y="723.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1075.4" y="734.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.07%)</title><rect x="1072.4" y="707.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1075.4" y="718.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.07%)</title><rect x="1072.4" y="691.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1075.4" y="702.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="1072.6" y="675.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1075.6" y="686.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.05%)</title><rect x="1072.6" y="659.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1075.6" y="670.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="1072.9" y="643.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1075.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (545 samples, 9.82%)</title><rect x="1073.3" y="723.0" width="115.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.3" y="734.0">rocksdb::Compa..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (545 samples, 9.82%)</title><rect x="1073.3" y="707.0" width="115.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1076.3" y="718.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (544 samples, 9.80%)</title><rect x="1073.3" y="691.0" width="115.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.3" y="702.0">rocksdb::DB::P..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (530 samples, 9.55%)</title><rect x="1074.1" y="675.0" width="112.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.1" y="686.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (521 samples, 9.39%)</title><rect x="1074.8" y="659.0" width="110.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1077.8" y="670.0">rocksdb::DBIm..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.05%)</title><rect x="1077.1" y="643.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1080.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="1078.0" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (165 samples, 2.97%)</title><rect x="1078.4" y="643.0" width="35.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.4" y="654.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (157 samples, 2.83%)</title><rect x="1078.8" y="627.0" width="33.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.8" y="638.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (155 samples, 2.79%)</title><rect x="1079.2" y="611.0" width="33.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.2" y="622.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (5 samples, 0.09%)</title><rect x="1079.2" y="595.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1082.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (150 samples, 2.70%)</title><rect x="1080.3" y="595.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.3" y="606.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (150 samples, 2.70%)</title><rect x="1080.3" y="579.0" width="31.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.3" y="590.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (148 samples, 2.67%)</title><rect x="1080.7" y="563.0" width="31.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.7" y="574.0">ro..</text>
</g>
<g>
<title>write (147 samples, 2.65%)</title><rect x="1080.9" y="547.0" width="31.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1083.9" y="558.0">wr..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (3 samples, 0.05%)</title><rect x="1112.2" y="627.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.2" y="638.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.05%)</title><rect x="1112.2" y="611.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.2" y="622.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (3 samples, 0.05%)</title><rect x="1112.2" y="595.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.2" y="606.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="1112.2" y="579.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1115.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="1112.8" y="627.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.04%)</title><rect x="1113.5" y="643.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="1113.9" y="643.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (33 samples, 0.59%)</title><rect x="1114.7" y="643.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (31 samples, 0.56%)</title><rect x="1115.2" y="627.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.47%)</title><rect x="1116.2" y="611.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.47%)</title><rect x="1116.2" y="595.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.04%)</title><rect x="1116.4" y="579.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (21 samples, 0.38%)</title><rect x="1116.9" y="579.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.25%)</title><rect x="1118.3" y="563.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="1120.3" y="547.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.3" y="558.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1120.3" y="531.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1123.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.05%)</title><rect x="1120.7" y="547.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.7" y="558.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="1120.7" y="531.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1123.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="1121.3" y="579.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (19 samples, 0.34%)</title><rect x="1121.8" y="643.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.8" y="654.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.05%)</title><rect x="1122.4" y="627.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1125.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (13 samples, 0.23%)</title><rect x="1123.0" y="627.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (12 samples, 0.22%)</title><rect x="1123.2" y="611.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (10 samples, 0.18%)</title><rect x="1123.7" y="595.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.7" y="606.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="1124.1" y="579.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1127.1" y="590.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1124.1" y="563.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1127.1" y="574.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="1124.1" y="547.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1127.1" y="558.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="1124.1" y="531.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1127.1" y="542.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="1124.1" y="515.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1127.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (5 samples, 0.09%)</title><rect x="1124.5" y="579.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.05%)</title><rect x="1124.9" y="563.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.05%)</title><rect x="1124.9" y="547.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="1125.2" y="531.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (125 samples, 2.25%)</title><rect x="1125.8" y="643.0" width="26.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.8" y="654.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (125 samples, 2.25%)</title><rect x="1125.8" y="627.0" width="26.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.8" y="638.0">r..</text>
</g>
<g>
<title>xdrrec_ops (122 samples, 2.20%)</title><rect x="1126.4" y="611.0" width="26.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1129.4" y="622.0">x..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (6 samples, 0.11%)</title><rect x="1152.4" y="643.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.09%)</title><rect x="1152.6" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.6" y="638.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.07%)</title><rect x="1152.6" y="611.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.6" y="622.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.07%)</title><rect x="1152.6" y="595.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1155.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (14 samples, 0.25%)</title><rect x="1153.6" y="643.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.6" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.16%)</title><rect x="1154.5" y="627.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.5" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.16%)</title><rect x="1154.5" y="611.0" width="1.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1157.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (118 samples, 2.13%)</title><rect x="1156.6" y="643.0" width="25.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.6" y="654.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (117 samples, 2.11%)</title><rect x="1156.8" y="627.0" width="24.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.8" y="638.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (98 samples, 1.77%)</title><rect x="1159.0" y="611.0" width="20.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.0" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (86 samples, 1.55%)</title><rect x="1159.0" y="595.0" width="18.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1162.0" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_wait (12 samples, 0.22%)</title><rect x="1177.2" y="595.0" width="2.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1180.2" y="606.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.18%)</title><rect x="1177.7" y="579.0" width="2.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1180.7" y="590.0"></text>
</g>
<g>
<title>__psynch_mutexwait (10 samples, 0.18%)</title><rect x="1177.7" y="563.0" width="2.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>xdrrec_ops (9 samples, 0.16%)</title><rect x="1179.8" y="611.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1182.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (12 samples, 0.22%)</title><rect x="1181.7" y="643.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.14%)</title><rect x="1181.7" y="627.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.13%)</title><rect x="1181.7" y="611.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (4 samples, 0.07%)</title><rect x="1183.4" y="627.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="638.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.07%)</title><rect x="1183.4" y="611.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1186.4" y="622.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.07%)</title><rect x="1183.4" y="595.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1186.4" y="606.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (4 samples, 0.07%)</title><rect x="1184.7" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.07%)</title><rect x="1184.7" y="627.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.04%)</title><rect x="1185.5" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="670.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="1186.2" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.11%)</title><rect x="1187.0" y="675.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="686.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.05%)</title><rect x="1187.2" y="659.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="670.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="1187.4" y="643.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1190.4" y="654.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1187.4" y="627.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.4" y="638.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="1187.4" y="611.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1190.4" y="622.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="1187.4" y="595.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1190.4" y="606.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="1187.4" y="579.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1190.4" y="590.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="1187.4" y="563.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1190.4" y="574.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="1187.9" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.05%)</title><rect x="1188.3" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.3" y="686.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="1188.3" y="659.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1191.3" y="670.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="1188.3" y="643.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1191.3" y="654.0"></text>
</g>
</g>
</svg>
