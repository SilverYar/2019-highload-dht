<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (5,576 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="10.0" y="931.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (6 samples, 0.11%)</title><rect x="10.4" y="931.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.4" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (6 samples, 0.11%)</title><rect x="10.4" y="915.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (6 samples, 0.11%)</title><rect x="10.4" y="899.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.4" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.11%)</title><rect x="10.4" y="883.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.4" y="894.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.04%)</title><rect x="10.4" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.4" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.04%)</title><rect x="10.4" y="851.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.4" y="862.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (2 samples, 0.04%)</title><rect x="10.4" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.4" y="846.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (4 samples, 0.07%)</title><rect x="10.8" y="867.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="878.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (3 samples, 0.05%)</title><rect x="11.7" y="931.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.7" y="942.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (3 samples, 0.05%)</title><rect x="11.7" y="915.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.7" y="926.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.04%)</title><rect x="11.7" y="899.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.7" y="910.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (2 samples, 0.04%)</title><rect x="12.3" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.3" y="942.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.04%)</title><rect x="12.3" y="915.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.3" y="926.0"></text>
</g>
<g>
<title>Runtime1::new_instance(JavaThread*, Klass*) (2 samples, 0.04%)</title><rect x="12.8" y="931.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="15.8" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.04%)</title><rect x="12.8" y="915.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.04%)</title><rect x="12.8" y="899.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.8" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.04%)</title><rect x="12.8" y="883.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.8" y="894.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.04%)</title><rect x="12.8" y="867.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.8" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (21 samples, 0.38%)</title><rect x="13.2" y="931.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.2" y="942.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (19 samples, 0.34%)</title><rect x="13.4" y="915.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.4" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (5 samples, 0.09%)</title><rect x="14.0" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.0" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.18%)</title><rect x="15.1" y="899.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.1" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (6 samples, 0.11%)</title><rect x="15.9" y="883.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.9" y="894.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.05%)</title><rect x="17.6" y="931.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="20.6" y="942.0"></text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.09%)</title><rect x="18.3" y="931.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="21.3" y="942.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (2 samples, 0.04%)</title><rect x="18.9" y="915.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.9" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (2 samples, 0.04%)</title><rect x="18.9" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="21.9" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (12 samples, 0.22%)</title><rect x="19.3" y="931.0" width="2.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="22.3" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.07%)</title><rect x="21.0" y="915.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="24.0" y="926.0"></text>
</g>
<g>
<title>_res (4 samples, 0.07%)</title><rect x="21.0" y="899.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="24.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,852 samples, 69.08%)</title><rect x="21.9" y="931.0" width="815.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.9" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,852 samples, 69.08%)</title><rect x="21.9" y="915.0" width="815.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.9" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,852 samples, 69.08%)</title><rect x="21.9" y="899.0" width="815.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.9" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (5 samples, 0.09%)</title><rect x="29.5" y="883.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.09%)</title><rect x="30.5" y="883.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (5 samples, 0.09%)</title><rect x="30.5" y="867.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.5" y="878.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.04%)</title><rect x="30.5" y="851.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="33.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.04%)</title><rect x="31.6" y="883.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="31.6" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.05%)</title><rect x="32.0" y="883.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.05%)</title><rect x="32.0" y="867.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 0.04%)</title><rect x="32.2" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.04%)</title><rect x="32.2" y="835.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (943 samples, 16.91%)</title><rect x="32.9" y="883.0" width="199.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="35.9" y="894.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (941 samples, 16.88%)</title><rect x="33.3" y="867.0" width="199.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.3" y="878.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (851 samples, 15.26%)</title><rect x="33.7" y="851.0" width="180.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.7" y="862.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.11%)</title><rect x="34.1" y="835.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.1" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title><rect x="35.0" y="819.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (8 samples, 0.14%)</title><rect x="35.4" y="835.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (2 samples, 0.04%)</title><rect x="36.7" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (3 samples, 0.05%)</title><rect x="37.1" y="835.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.05%)</title><rect x="37.1" y="819.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="37.3" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.16%)</title><rect x="37.7" y="835.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="38.1" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.04%)</title><rect x="38.1" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.05%)</title><rect x="39.0" y="819.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="39.2" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.18%)</title><rect x="39.6" y="835.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.18%)</title><rect x="39.6" y="819.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.11%)</title><rect x="39.8" y="803.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.11%)</title><rect x="39.8" y="787.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.8" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.11%)</title><rect x="39.8" y="771.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.8" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.11%)</title><rect x="39.8" y="755.0" width="1.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="42.8" y="766.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.09%)</title><rect x="40.1" y="739.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="43.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.05%)</title><rect x="41.1" y="803.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="44.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (812 samples, 14.56%)</title><rect x="42.0" y="835.0" width="171.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.0" y="846.0">java/util/concurrent/l..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (811 samples, 14.54%)</title><rect x="42.2" y="819.0" width="171.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="45.2" y="830.0">jdk/internal/misc/Unsa..</text>
</g>
<g>
<title>JavaThread::parker() (3 samples, 0.05%)</title><rect x="48.1" y="803.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="51.1" y="814.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.05%)</title><rect x="48.7" y="803.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="51.7" y="814.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (3 samples, 0.05%)</title><rect x="49.6" y="803.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="52.6" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.05%)</title><rect x="50.2" y="803.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="53.2" y="814.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (767 samples, 13.76%)</title><rect x="51.1" y="803.0" width="162.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="54.1" y="814.0">Unsafe_Park(JNIEnv_*,..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.05%)</title><rect x="51.5" y="787.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="54.5" y="798.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.04%)</title><rect x="51.7" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="54.7" y="782.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="52.5" y="787.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="55.5" y="798.0"></text>
</g>
<g>
<title>JavaThread::parker() (3 samples, 0.05%)</title><rect x="53.0" y="787.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="56.0" y="798.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (7 samples, 0.13%)</title><rect x="53.6" y="787.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="56.6" y="798.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (7 samples, 0.13%)</title><rect x="53.6" y="771.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="56.6" y="782.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (6 samples, 0.11%)</title><rect x="53.8" y="755.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="56.8" y="766.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (6 samples, 0.11%)</title><rect x="53.8" y="739.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="56.8" y="750.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (2 samples, 0.04%)</title><rect x="53.8" y="723.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="56.8" y="734.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (2 samples, 0.04%)</title><rect x="54.4" y="723.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="57.4" y="734.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (11 samples, 0.20%)</title><rect x="55.1" y="787.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="58.1" y="798.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (3 samples, 0.05%)</title><rect x="55.5" y="771.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="58.5" y="782.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (2 samples, 0.04%)</title><rect x="56.3" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="59.3" y="782.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (3 samples, 0.05%)</title><rect x="56.8" y="771.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="59.8" y="782.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (3 samples, 0.05%)</title><rect x="56.8" y="755.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="59.8" y="766.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.04%)</title><rect x="57.4" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="60.4" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (706 samples, 12.66%)</title><rect x="58.0" y="787.0" width="149.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="61.0" y="798.0">Parker::park(bool, ..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.05%)</title><rect x="59.5" y="771.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="62.5" y="782.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.07%)</title><rect x="60.2" y="771.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="63.2" y="782.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="60.6" y="755.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="63.6" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (675 samples, 12.11%)</title><rect x="61.0" y="771.0" width="142.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="64.0" y="782.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.14%)</title><rect x="203.8" y="771.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="206.8" y="782.0"></text>
</g>
<g>
<title>_pthread_testcancel (7 samples, 0.13%)</title><rect x="205.5" y="771.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="208.5" y="782.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.04%)</title><rect x="207.4" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="210.4" y="798.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.04%)</title><rect x="207.9" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="210.9" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (7 samples, 0.13%)</title><rect x="208.5" y="787.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="211.5" y="798.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.04%)</title><rect x="208.5" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="211.5" y="782.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.07%)</title><rect x="209.1" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="212.1" y="782.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.07%)</title><rect x="209.1" y="755.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="212.1" y="766.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.07%)</title><rect x="209.1" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="212.1" y="750.0"></text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.04%)</title><rect x="210.0" y="787.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="213.0" y="798.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="210.4" y="787.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="213.4" y="798.0"></text>
</g>
<g>
<title>pthread_cond_wait (3 samples, 0.05%)</title><rect x="211.3" y="787.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="214.3" y="798.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (5 samples, 0.09%)</title><rect x="211.9" y="787.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="214.9" y="798.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.04%)</title><rect x="212.9" y="787.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="215.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.07%)</title><rect x="213.8" y="851.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.04%)</title><rect x="214.2" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.04%)</title><rect x="214.2" y="819.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (27 samples, 0.48%)</title><rect x="214.6" y="851.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (26 samples, 0.47%)</title><rect x="214.8" y="835.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.05%)</title><rect x="215.3" y="819.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.05%)</title><rect x="215.3" y="803.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (17 samples, 0.30%)</title><rect x="215.9" y="819.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.14%)</title><rect x="217.0" y="803.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.11%)</title><rect x="217.4" y="787.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.11%)</title><rect x="217.4" y="771.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.4" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.11%)</title><rect x="217.4" y="755.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="220.4" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.09%)</title><rect x="217.6" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="220.6" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.09%)</title><rect x="217.6" y="723.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="220.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (4 samples, 0.07%)</title><rect x="218.7" y="803.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.05%)</title><rect x="218.9" y="787.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.07%)</title><rect x="219.5" y="819.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.07%)</title><rect x="219.5" y="803.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.05%)</title><rect x="219.7" y="787.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.7" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.05%)</title><rect x="219.7" y="771.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.7" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.05%)</title><rect x="219.7" y="755.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (57 samples, 1.02%)</title><rect x="220.4" y="851.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (57 samples, 1.02%)</title><rect x="220.4" y="835.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (56 samples, 1.00%)</title><rect x="220.6" y="819.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (56 samples, 1.00%)</title><rect x="220.6" y="803.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.6" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (56 samples, 1.00%)</title><rect x="220.6" y="787.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.6" y="798.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.05%)</title><rect x="221.6" y="771.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="224.6" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (47 samples, 0.84%)</title><rect x="222.5" y="771.0" width="9.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="225.5" y="782.0"></text>
</g>
<g>
<title>__psynch_cvsignal (42 samples, 0.75%)</title><rect x="222.7" y="755.0" width="8.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="225.7" y="766.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.05%)</title><rect x="231.8" y="755.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="234.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$76/1321306324.run (2,855 samples, 51.20%)</title><rect x="232.8" y="883.0" width="604.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.8" y="894.0">ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$76/1321306324.run</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$executeAsync$3 (2,851 samples, 51.13%)</title><rect x="233.7" y="867.0" width="603.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.7" y="878.0">ru/mail/polis/service/yaroslav/ServiceImpl.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (15 samples, 0.27%)</title><rect x="233.9" y="851.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.9" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (4 samples, 0.07%)</title><rect x="233.9" y="835.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.9" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.07%)</title><rect x="233.9" y="819.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.9" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.07%)</title><rect x="233.9" y="803.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.9" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (11 samples, 0.20%)</title><rect x="234.7" y="835.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.7" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (11 samples, 0.20%)</title><rect x="234.7" y="819.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.7" y="830.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.close (11 samples, 0.20%)</title><rect x="234.7" y="803.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.7" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.close (11 samples, 0.20%)</title><rect x="234.7" y="787.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.7" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.implCloseChannel (5 samples, 0.09%)</title><rect x="236.0" y="771.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (674 samples, 12.09%)</title><rect x="237.1" y="851.0" width="142.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.1" y="862.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>gettimeofday (6 samples, 0.11%)</title><rect x="237.9" y="835.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="240.9" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="239.2" y="835.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="242.2" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (645 samples, 11.57%)</title><rect x="239.6" y="835.0" width="136.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.6" y="846.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (32 samples, 0.57%)</title><rect x="239.6" y="819.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.6" y="830.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4 samples, 0.07%)</title><rect x="241.9" y="803.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.9" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (17 samples, 0.30%)</title><rect x="242.8" y="803.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title><rect x="243.2" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.2" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.04%)</title><rect x="243.6" y="787.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.07%)</title><rect x="244.1" y="787.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="244.5" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.13%)</title><rect x="244.9" y="787.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.13%)</title><rect x="244.9" y="771.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="245.7" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.04%)</title><rect x="245.7" y="739.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="248.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (613 samples, 10.99%)</title><rect x="246.4" y="819.0" width="129.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.4" y="830.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/Session.write (612 samples, 10.98%)</title><rect x="246.6" y="803.0" width="129.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.6" y="814.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (609 samples, 10.92%)</title><rect x="247.2" y="787.0" width="128.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.2" y="798.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (609 samples, 10.92%)</title><rect x="247.2" y="771.0" width="128.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.2" y="782.0">one/nio/net/Java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.18%)</title><rect x="247.2" y="755.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.2" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.18%)</title><rect x="247.2" y="739.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.16%)</title><rect x="247.4" y="723.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.4" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.11%)</title><rect x="248.1" y="707.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.1" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.09%)</title><rect x="248.1" y="691.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.09%)</title><rect x="248.1" y="675.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.1" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (3 samples, 0.05%)</title><rect x="248.5" y="659.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.5" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (599 samples, 10.74%)</title><rect x="249.3" y="755.0" width="126.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.3" y="766.0">sun/nio/ch/Socke..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (599 samples, 10.74%)</title><rect x="249.3" y="739.0" width="126.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.3" y="750.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (599 samples, 10.74%)</title><rect x="249.3" y="723.0" width="126.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.3" y="734.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.07%)</title><rect x="249.3" y="707.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.3" y="718.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.07%)</title><rect x="249.3" y="691.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.07%)</title><rect x="249.3" y="675.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.07%)</title><rect x="249.3" y="659.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.05%)</title><rect x="249.6" y="643.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.6" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.04%)</title><rect x="249.6" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="252.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (571 samples, 10.24%)</title><rect x="250.2" y="707.0" width="120.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.2" y="718.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (571 samples, 10.24%)</title><rect x="250.2" y="691.0" width="120.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.2" y="702.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (571 samples, 10.24%)</title><rect x="250.2" y="675.0" width="120.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.2" y="686.0">sun/nio/ch/File..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (13 samples, 0.23%)</title><rect x="254.0" y="659.0" width="2.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="257.0" y="670.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="256.3" y="643.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="259.3" y="654.0"></text>
</g>
<g>
<title>write (540 samples, 9.68%)</title><rect x="256.8" y="659.0" width="114.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="259.8" y="670.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (24 samples, 0.43%)</title><rect x="371.0" y="707.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.18%)</title><rect x="371.4" y="691.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.11%)</title><rect x="372.3" y="675.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (12 samples, 0.22%)</title><rect x="373.6" y="691.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="376.6" y="702.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.11%)</title><rect x="374.6" y="675.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="377.6" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.11%)</title><rect x="374.6" y="659.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.6" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.05%)</title><rect x="375.3" y="643.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="378.3" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.05%)</title><rect x="375.3" y="627.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (12 samples, 0.22%)</title><rect x="376.1" y="835.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.1" y="846.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="376.1" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.16%)</title><rect x="376.5" y="819.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.5" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.16%)</title><rect x="376.5" y="803.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.5" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.07%)</title><rect x="378.9" y="835.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="381.9" y="846.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="379.3" y="819.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="382.3" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$89/195623546.act (2,161 samples, 38.76%)</title><rect x="379.7" y="851.0" width="457.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="382.7" y="862.0">ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$89/195623546..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$entity$1 (2,161 samples, 38.76%)</title><rect x="379.7" y="835.0" width="457.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="382.7" y="846.0">ru/mail/polis/service/yaroslav/ServiceImpl.lambda$entity$1</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.put (2,161 samples, 38.76%)</title><rect x="379.7" y="819.0" width="457.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.7" y="830.0">ru/mail/polis/service/yaroslav/ServiceImpl.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.18%)</title><rect x="380.1" y="803.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.18%)</title><rect x="380.1" y="787.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="383.1" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="380.8" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="383.8" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="380.8" y="755.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="383.8" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="381.2" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="381.2" y="723.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.2" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="381.2" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.2" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="381.8" y="771.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.09%)</title><rect x="382.2" y="803.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="385.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.04%)</title><rect x="382.9" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.9" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (2,144 samples, 38.45%)</title><rect x="383.3" y="803.0" width="453.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="386.3" y="814.0">ru/mail/polis/dao/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,127 samples, 38.15%)</title><rect x="383.5" y="787.0" width="450.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.5" y="798.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,127 samples, 38.15%)</title><rect x="383.5" y="771.0" width="450.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="386.5" y="782.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,110 samples, 37.84%)</title><rect x="387.1" y="755.0" width="446.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="390.1" y="766.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="388.2" y="739.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="391.2" y="750.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.04%)</title><rect x="388.6" y="739.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="391.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.07%)</title><rect x="389.0" y="739.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="392.0" y="750.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,097 samples, 37.61%)</title><rect x="389.9" y="739.0" width="443.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="392.9" y="750.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOpti..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.04%)</title><rect x="391.3" y="723.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="394.3" y="734.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="392.6" y="723.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="395.6" y="734.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.04%)</title><rect x="393.0" y="723.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="396.0" y="734.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="393.7" y="723.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="396.7" y="734.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="393.7" y="707.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="396.7" y="718.0"></text>
</g>
<g>
<title>free_tiny (10 samples, 0.18%)</title><rect x="394.1" y="723.0" width="2.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="397.1" y="734.0"></text>
</g>
<g>
<title>tiny_free_no_lock (7 samples, 0.13%)</title><rect x="394.7" y="707.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="397.7" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (9 samples, 0.16%)</title><rect x="396.2" y="723.0" width="1.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="399.2" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.07%)</title><rect x="397.3" y="707.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="400.3" y="718.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="397.7" y="691.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="400.7" y="702.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="397.7" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="400.7" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.16%)</title><rect x="398.1" y="723.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="401.1" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.11%)</title><rect x="398.5" y="707.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="401.5" y="718.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.11%)</title><rect x="398.5" y="691.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="401.5" y="702.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.11%)</title><rect x="398.5" y="675.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="401.5" y="686.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.09%)</title><rect x="398.7" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="401.7" y="670.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.09%)</title><rect x="398.7" y="643.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="401.7" y="654.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="399.4" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="402.4" y="638.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="399.4" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="402.4" y="622.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.07%)</title><rect x="400.0" y="723.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="403.0" y="734.0"></text>
</g>
<g>
<title>operator new(unsigned long) (13 samples, 0.23%)</title><rect x="400.9" y="723.0" width="2.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="403.9" y="734.0"></text>
</g>
<g>
<title>malloc (13 samples, 0.23%)</title><rect x="400.9" y="707.0" width="2.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="403.9" y="718.0"></text>
</g>
<g>
<title>malloc_zone_malloc (11 samples, 0.20%)</title><rect x="401.1" y="691.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="404.1" y="702.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (10 samples, 0.18%)</title><rect x="401.3" y="675.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="404.3" y="686.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.14%)</title><rect x="401.7" y="659.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="404.7" y="670.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.05%)</title><rect x="402.8" y="643.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="405.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,027 samples, 36.35%)</title><rect x="403.6" y="723.0" width="429.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="406.6" y="734.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,026 samples, 36.33%)</title><rect x="403.8" y="707.0" width="428.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="406.8" y="718.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb:..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,019 samples, 36.21%)</title><rect x="404.3" y="691.0" width="427.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="407.3" y="702.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Col..</text>
</g>
<g>
<title>free (5 samples, 0.09%)</title><rect x="404.7" y="675.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="407.7" y="686.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.04%)</title><rect x="405.7" y="675.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="408.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (3 samples, 0.05%)</title><rect x="406.2" y="675.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="409.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,954 samples, 35.04%)</title><rect x="406.8" y="675.0" width="413.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="409.8" y="686.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="407.6" y="659.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="410.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,931 samples, 34.63%)</title><rect x="408.1" y="659.0" width="408.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="411.1" y="670.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;,..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.09%)</title><rect x="417.8" y="643.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="420.8" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (2 samples, 0.04%)</title><rect x="418.9" y="643.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="421.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (5 samples, 0.09%)</title><rect x="419.7" y="643.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="422.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (612 samples, 10.98%)</title><rect x="420.8" y="643.0" width="129.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="423.8" y="654.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (603 samples, 10.81%)</title><rect x="421.0" y="627.0" width="127.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="424.0" y="638.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (597 samples, 10.71%)</title><rect x="422.2" y="611.0" width="126.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="425.2" y="622.0">rocksdb::log::Wr..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (6 samples, 0.11%)</title><rect x="423.5" y="595.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="426.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (585 samples, 10.49%)</title><rect x="424.8" y="595.0" width="123.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="427.8" y="606.0">rocksdb::log::W..</text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (3 samples, 0.05%)</title><rect x="425.4" y="579.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="428.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (3 samples, 0.05%)</title><rect x="426.0" y="579.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="429.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush() (2 samples, 0.04%)</title><rect x="426.7" y="579.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="429.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (9 samples, 0.16%)</title><rect x="427.1" y="579.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="430.1" y="590.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="428.2" y="563.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="431.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (565 samples, 10.13%)</title><rect x="429.0" y="579.0" width="119.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="432.0" y="590.0">rocksdb::Writab..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.11%)</title><rect x="429.6" y="563.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="432.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (553 samples, 9.92%)</title><rect x="431.5" y="563.0" width="117.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="434.5" y="574.0">rocksdb::Writa..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="432.8" y="547.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="435.8" y="558.0"></text>
</g>
<g>
<title>write (544 samples, 9.76%)</title><rect x="433.5" y="547.0" width="115.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="436.5" y="558.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (5 samples, 0.09%)</title><rect x="548.6" y="627.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="551.6" y="638.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.07%)</title><rect x="548.8" y="611.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="551.8" y="622.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.04%)</title><rect x="548.8" y="595.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="551.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="549.8" y="627.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="552.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.05%)</title><rect x="550.5" y="643.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="553.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.05%)</title><rect x="551.1" y="643.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="554.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (128 samples, 2.30%)</title><rect x="552.0" y="643.0" width="27.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="555.0" y="654.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (119 samples, 2.13%)</title><rect x="553.9" y="627.0" width="25.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="556.9" y="638.0">r..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (4 samples, 0.07%)</title><rect x="554.9" y="611.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="557.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (110 samples, 1.97%)</title><rect x="555.8" y="611.0" width="23.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="558.8" y="622.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (106 samples, 1.90%)</title><rect x="556.6" y="595.0" width="22.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="559.6" y="606.0">r..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.04%)</title><rect x="558.1" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="561.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (94 samples, 1.69%)</title><rect x="558.5" y="579.0" width="19.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="561.5" y="590.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="560.2" y="563.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="563.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="560.6" y="563.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="563.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="561.1" y="563.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="564.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (79 samples, 1.42%)</title><rect x="561.7" y="563.0" width="16.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="564.7" y="574.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.09%)</title><rect x="568.7" y="547.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="571.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.07%)</title><rect x="569.7" y="547.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="572.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.07%)</title><rect x="569.7" y="531.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="572.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (5 samples, 0.09%)</title><rect x="570.6" y="547.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="573.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="571.2" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="574.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (28 samples, 0.50%)</title><rect x="571.6" y="547.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="574.6" y="558.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="573.3" y="531.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="576.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (17 samples, 0.30%)</title><rect x="574.0" y="531.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="577.0" y="542.0"></text>
</g>
<g>
<title>_platform_memcmp (11 samples, 0.20%)</title><rect x="575.2" y="515.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="578.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.07%)</title><rect x="577.6" y="547.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="580.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.04%)</title><rect x="578.4" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="581.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (93 samples, 1.67%)</title><rect x="579.0" y="643.0" width="19.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="582.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.04%)</title><rect x="581.2" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="584.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (78 samples, 1.40%)</title><rect x="582.0" y="627.0" width="16.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="585.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.05%)</title><rect x="582.9" y="611.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="585.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (71 samples, 1.27%)</title><rect x="583.5" y="611.0" width="15.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="586.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (70 samples, 1.26%)</title><rect x="583.7" y="595.0" width="14.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="586.7" y="606.0"></text>
</g>
<g>
<title>operator new(unsigned long) (13 samples, 0.23%)</title><rect x="584.1" y="579.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="587.1" y="590.0"></text>
</g>
<g>
<title>malloc (13 samples, 0.23%)</title><rect x="584.1" y="563.0" width="2.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="587.1" y="574.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.14%)</title><rect x="584.6" y="547.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="587.6" y="558.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.11%)</title><rect x="585.0" y="531.0" width="1.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="588.0" y="542.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.09%)</title><rect x="585.2" y="515.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="588.2" y="526.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.05%)</title><rect x="585.6" y="499.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="588.6" y="510.0"></text>
</g>
<g>
<title>szone_malloc (3 samples, 0.05%)</title><rect x="586.2" y="547.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="589.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (51 samples, 0.91%)</title><rect x="586.9" y="579.0" width="10.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="589.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (45 samples, 0.81%)</title><rect x="588.1" y="563.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="591.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.07%)</title><rect x="588.6" y="547.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="589.4" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="592.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (36 samples, 0.65%)</title><rect x="590.1" y="547.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="593.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.05%)</title><rect x="593.9" y="531.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="596.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="594.1" y="515.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="597.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (14 samples, 0.25%)</title><rect x="594.5" y="531.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="597.5" y="542.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.05%)</title><rect x="595.3" y="515.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="598.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.13%)</title><rect x="596.0" y="515.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="599.0" y="526.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.11%)</title><rect x="596.2" y="499.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="599.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.07%)</title><rect x="597.7" y="579.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="600.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (506 samples, 9.07%)</title><rect x="598.7" y="643.0" width="107.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="601.7" y="654.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (503 samples, 9.02%)</title><rect x="599.2" y="627.0" width="106.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="602.2" y="638.0">rocksdb::Writ..</text>
</g>
<g>
<title>sched_yield (4 samples, 0.07%)</title><rect x="602.3" y="611.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="605.3" y="622.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (5 samples, 0.09%)</title><rect x="603.2" y="611.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="606.2" y="622.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.09%)</title><rect x="603.2" y="595.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="606.2" y="606.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="603.6" y="579.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="606.6" y="590.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (5 samples, 0.09%)</title><rect x="604.2" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="607.2" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.09%)</title><rect x="604.2" y="595.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="607.2" y="606.0"></text>
</g>
<g>
<title>xdrrec_ops (474 samples, 8.50%)</title><rect x="605.3" y="611.0" width="100.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="608.3" y="622.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (3 samples, 0.05%)</title><rect x="705.8" y="643.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="708.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (11 samples, 0.20%)</title><rect x="706.4" y="643.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="709.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (11 samples, 0.20%)</title><rect x="706.4" y="627.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="709.4" y="638.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.14%)</title><rect x="706.7" y="611.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="709.7" y="622.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.13%)</title><rect x="706.7" y="595.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="709.7" y="606.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="708.4" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="711.4" y="622.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="708.4" y="595.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="711.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (63 samples, 1.13%)</title><rect x="708.8" y="643.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="711.8" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (51 samples, 0.91%)</title><rect x="710.0" y="627.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="713.0" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (49 samples, 0.88%)</title><rect x="710.0" y="611.0" width="10.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="713.0" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="720.4" y="611.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="723.4" y="622.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (5 samples, 0.09%)</title><rect x="721.0" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="724.0" y="638.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.09%)</title><rect x="721.0" y="611.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="724.0" y="622.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.05%)</title><rect x="721.3" y="595.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="724.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (371 samples, 6.65%)</title><rect x="722.1" y="643.0" width="78.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="725.1" y="654.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (366 samples, 6.56%)</title><rect x="722.3" y="627.0" width="77.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="725.3" y="638.0">rocksdb::..</text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.05%)</title><rect x="728.7" y="611.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="731.7" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.05%)</title><rect x="729.3" y="611.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="732.3" y="622.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (298 samples, 5.34%)</title><rect x="729.9" y="611.0" width="63.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="732.9" y="622.0">std::__..</text>
</g>
<g>
<title>__psynch_cvwait (226 samples, 4.05%)</title><rect x="730.1" y="595.0" width="47.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="733.1" y="606.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (69 samples, 1.24%)</title><rect x="778.0" y="595.0" width="14.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="781.0" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_check_init_slow (2 samples, 0.04%)</title><rect x="778.4" y="579.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="781.4" y="590.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (65 samples, 1.17%)</title><rect x="778.8" y="579.0" width="13.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="781.8" y="590.0"></text>
</g>
<g>
<title>__psynch_mutexwait (65 samples, 1.17%)</title><rect x="778.8" y="563.0" width="13.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="781.8" y="574.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (2 samples, 0.04%)</title><rect x="793.0" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="796.0" y="622.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (2 samples, 0.04%)</title><rect x="793.0" y="595.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="796.0" y="606.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (2 samples, 0.04%)</title><rect x="793.0" y="579.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="796.0" y="590.0"></text>
</g>
<g>
<title>xdrrec_ops (29 samples, 0.52%)</title><rect x="793.6" y="611.0" width="6.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="796.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (61 samples, 1.09%)</title><rect x="800.6" y="643.0" width="12.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="803.6" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (48 samples, 0.86%)</title><rect x="801.3" y="627.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="804.3" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (45 samples, 0.81%)</title><rect x="801.3" y="611.0" width="9.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="804.3" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.05%)</title><rect x="810.8" y="611.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="813.8" y="622.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (10 samples, 0.18%)</title><rect x="811.4" y="627.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="814.4" y="638.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (10 samples, 0.18%)</title><rect x="811.4" y="611.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="814.4" y="622.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (10 samples, 0.18%)</title><rect x="811.4" y="595.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="814.4" y="606.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.04%)</title><rect x="813.5" y="643.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="816.5" y="654.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (4 samples, 0.07%)</title><rect x="813.9" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.9" y="654.0"></text>
</g>
<g>
<title>pthread_cond_destroy (4 samples, 0.07%)</title><rect x="813.9" y="627.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="816.9" y="638.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="814.8" y="643.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.8" y="654.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.05%)</title><rect x="815.4" y="643.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="818.4" y="654.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (3 samples, 0.05%)</title><rect x="816.1" y="643.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="819.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.07%)</title><rect x="816.9" y="659.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.04%)</title><rect x="817.8" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="820.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="818.4" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="821.4" y="670.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (2 samples, 0.04%)</title><rect x="818.8" y="659.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="821.8" y="670.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (2 samples, 0.04%)</title><rect x="819.2" y="659.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="822.2" y="670.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="819.7" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="822.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (4 samples, 0.07%)</title><rect x="820.3" y="675.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="823.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (9 samples, 0.16%)</title><rect x="821.1" y="675.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="824.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.04%)</title><rect x="821.4" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="821.8" y="659.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="824.8" y="670.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.05%)</title><rect x="822.4" y="659.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="825.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (23 samples, 0.41%)</title><rect x="823.0" y="675.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="826.0" y="686.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.04%)</title><rect x="823.5" y="659.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="826.5" y="670.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (12 samples, 0.22%)</title><rect x="824.1" y="659.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="827.1" y="670.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.16%)</title><rect x="824.7" y="643.0" width="1.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="827.7" y="654.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.16%)</title><rect x="824.7" y="627.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="827.7" y="638.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.14%)</title><rect x="825.0" y="611.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="828.0" y="622.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.14%)</title><rect x="825.0" y="595.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="828.0" y="606.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.14%)</title><rect x="825.0" y="579.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="828.0" y="590.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (3 samples, 0.05%)</title><rect x="825.4" y="563.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="828.4" y="574.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.05%)</title><rect x="826.0" y="563.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="829.0" y="574.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (5 samples, 0.09%)</title><rect x="826.6" y="659.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="829.6" y="670.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (4 samples, 0.07%)</title><rect x="826.9" y="643.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="829.9" y="654.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="827.3" y="627.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="830.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (10 samples, 0.18%)</title><rect x="827.9" y="675.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="830.9" y="686.0"></text>
</g>
<g>
<title>free (7 samples, 0.13%)</title><rect x="828.1" y="659.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="831.1" y="670.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.05%)</title><rect x="829.0" y="643.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="832.0" y="654.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.04%)</title><rect x="829.6" y="659.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="832.6" y="670.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.05%)</title><rect x="830.0" y="675.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="833.0" y="686.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="830.7" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="833.7" y="686.0"></text>
</g>
<g>
<title>szone_free_definite_size (2 samples, 0.04%)</title><rect x="831.1" y="675.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="834.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.04%)</title><rect x="831.5" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="834.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="832.1" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (4 samples, 0.07%)</title><rect x="832.6" y="723.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (11 samples, 0.20%)</title><rect x="833.6" y="787.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="836.6" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.14%)</title><rect x="834.3" y="771.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="837.3" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.13%)</title><rect x="834.5" y="755.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.13%)</title><rect x="834.5" y="739.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="837.5" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="835.1" y="723.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.04%)</title><rect x="835.5" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (5 samples, 0.09%)</title><rect x="836.0" y="787.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="839.0" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (5 samples, 0.09%)</title><rect x="836.0" y="771.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="839.0" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.09%)</title><rect x="836.0" y="755.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.0" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="836.2" y="739.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="839.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="836.2" y="723.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.2" y="734.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,255 samples, 22.51%)</title><rect x="837.0" y="931.0" width="265.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="840.0" y="942.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (3 samples, 0.05%)</title><rect x="840.8" y="915.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="843.8" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (3 samples, 0.05%)</title><rect x="840.8" y="899.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="843.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.04%)</title><rect x="841.0" y="883.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="844.0" y="894.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (658 samples, 11.80%)</title><rect x="841.5" y="915.0" width="139.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.5" y="926.0">one/nio/net/JavaS..</text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.04%)</title><rect x="842.3" y="899.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="845.3" y="910.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (11 samples, 0.20%)</title><rect x="842.9" y="899.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="845.9" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.09%)</title><rect x="844.2" y="883.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="847.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.09%)</title><rect x="844.2" y="867.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="847.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.07%)</title><rect x="844.2" y="851.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="847.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="844.4" y="835.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="844.4" y="819.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="847.4" y="830.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.04%)</title><rect x="845.3" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="848.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.04%)</title><rect x="845.3" y="883.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="848.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casItem (2 samples, 0.04%)</title><rect x="845.3" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.3" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="845.3" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="848.3" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="845.3" y="835.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="848.3" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (635 samples, 11.39%)</title><rect x="845.9" y="899.0" width="134.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.9" y="910.0">sun/nio/ch/Select..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (635 samples, 11.39%)</title><rect x="845.9" y="883.0" width="134.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="848.9" y="894.0">sun/nio/ch/Select..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (632 samples, 11.33%)</title><rect x="846.5" y="867.0" width="133.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="849.5" y="878.0">sun/nio/ch/KQueue..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (579 samples, 10.38%)</title><rect x="847.4" y="851.0" width="122.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="850.4" y="862.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (7 samples, 0.13%)</title><rect x="853.3" y="835.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="856.3" y="846.0"></text>
</g>
<g>
<title>kevent (544 samples, 9.76%)</title><rect x="854.8" y="835.0" width="115.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="857.8" y="846.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (25 samples, 0.45%)</title><rect x="969.9" y="851.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="972.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="971.2" y="835.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="974.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.04%)</title><rect x="971.2" y="819.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="974.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (16 samples, 0.29%)</title><rect x="971.8" y="835.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="974.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.14%)</title><rect x="971.8" y="819.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="974.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.14%)</title><rect x="971.8" y="803.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="974.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.13%)</title><rect x="972.0" y="787.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="975.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (3 samples, 0.05%)</title><rect x="973.5" y="819.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="976.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.04%)</title><rect x="973.5" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="976.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.04%)</title><rect x="973.5" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="976.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (3 samples, 0.05%)</title><rect x="974.1" y="819.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="977.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.04%)</title><rect x="974.8" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="977.8" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (6 samples, 0.11%)</title><rect x="975.2" y="851.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="978.2" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (6 samples, 0.11%)</title><rect x="975.2" y="835.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="978.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.07%)</title><rect x="976.5" y="851.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="979.5" y="862.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.07%)</title><rect x="976.5" y="835.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="979.5" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (4 samples, 0.07%)</title><rect x="977.3" y="851.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="980.3" y="862.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (4 samples, 0.07%)</title><rect x="977.3" y="835.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="980.3" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.07%)</title><rect x="977.3" y="819.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="980.3" y="830.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.07%)</title><rect x="977.3" y="803.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="980.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.07%)</title><rect x="977.3" y="787.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="980.3" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (10 samples, 0.18%)</title><rect x="978.2" y="851.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="981.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.remove (4 samples, 0.07%)</title><rect x="979.0" y="835.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="982.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.07%)</title><rect x="979.0" y="819.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="982.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="979.9" y="835.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="982.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="979.9" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="982.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="979.9" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="982.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="979.9" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="982.9" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (576 samples, 10.33%)</title><rect x="980.7" y="915.0" width="121.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="983.7" y="926.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (573 samples, 10.28%)</title><rect x="981.3" y="899.0" width="121.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="984.3" y="910.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (389 samples, 6.98%)</title><rect x="981.6" y="883.0" width="82.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="984.6" y="894.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (326 samples, 5.85%)</title><rect x="983.0" y="867.0" width="69.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="986.0" y="878.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (325 samples, 5.83%)</title><rect x="983.2" y="851.0" width="68.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="986.2" y="862.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (10 samples, 0.18%)</title><rect x="983.5" y="835.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="986.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.18%)</title><rect x="983.5" y="819.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="986.5" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10 samples, 0.18%)</title><rect x="983.5" y="803.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="986.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.16%)</title><rect x="983.5" y="787.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="986.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.handleDefault (314 samples, 5.63%)</title><rect x="985.6" y="835.0" width="66.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="988.6" y="846.0">ru/mail..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.07%)</title><rect x="986.6" y="819.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="989.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.07%)</title><rect x="986.6" y="803.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="989.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.07%)</title><rect x="986.6" y="787.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="989.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="986.8" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="989.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (305 samples, 5.47%)</title><rect x="987.5" y="819.0" width="64.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="990.5" y="830.0">ru/mail..</text>
</g>
<g>
<title>java/lang/String.getBytes (5 samples, 0.09%)</title><rect x="988.5" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="991.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (5 samples, 0.09%)</title><rect x="988.5" y="787.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="991.5" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (5 samples, 0.09%)</title><rect x="988.5" y="771.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="991.5" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.07%)</title><rect x="988.7" y="755.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="991.7" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.05%)</title><rect x="989.6" y="803.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="992.6" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.05%)</title><rect x="989.6" y="787.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="992.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$89/195623546.get$Lambda (3 samples, 0.05%)</title><rect x="989.6" y="771.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="992.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="990.4" y="803.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="993.4" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="990.4" y="787.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="993.4" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="990.7" y="771.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="993.7" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="990.7" y="755.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="993.7" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="990.9" y="739.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="993.9" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.09%)</title><rect x="991.5" y="803.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="994.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="992.1" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="995.1" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (17 samples, 0.30%)</title><rect x="992.6" y="803.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="995.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.13%)</title><rect x="992.8" y="787.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="995.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.13%)</title><rect x="992.8" y="771.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="995.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (5 samples, 0.09%)</title><rect x="994.3" y="787.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="997.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="994.9" y="771.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="997.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="995.3" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="998.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="995.3" y="771.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="998.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="995.7" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="998.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="995.7" y="771.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="998.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="995.7" y="755.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="998.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="995.7" y="739.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="998.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/Node.getNodes (28 samples, 0.50%)</title><rect x="996.2" y="803.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="999.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (26 samples, 0.47%)</title><rect x="996.6" y="787.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.6" y="798.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (17 samples, 0.30%)</title><rect x="997.0" y="771.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1000.0" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (6 samples, 0.11%)</title><rect x="997.2" y="755.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1000.2" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (4 samples, 0.07%)</title><rect x="997.6" y="739.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1000.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="998.1" y="723.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1001.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (10 samples, 0.18%)</title><rect x="998.5" y="755.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1001.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.14%)</title><rect x="998.9" y="739.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1001.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.04%)</title><rect x="998.9" y="723.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1001.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.11%)</title><rect x="999.3" y="723.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1002.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (5 samples, 0.09%)</title><rect x="999.5" y="707.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1002.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (7 samples, 0.13%)</title><rect x="1000.6" y="771.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1003.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (6 samples, 0.11%)</title><rect x="1000.8" y="755.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1003.8" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractMap.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1001.2" y="739.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1004.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/RF.calculateRF (8 samples, 0.14%)</title><rect x="1002.1" y="803.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1005.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/RF.of (5 samples, 0.09%)</title><rect x="1002.7" y="787.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1005.7" y="798.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (2 samples, 0.04%)</title><rect x="1002.7" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1005.7" y="782.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (2 samples, 0.04%)</title><rect x="1002.7" y="755.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1005.7" y="766.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher$Is.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1002.7" y="739.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1005.7" y="750.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (2 samples, 0.04%)</title><rect x="1003.1" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1006.1" y="782.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (2 samples, 0.04%)</title><rect x="1003.1" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1006.1" y="766.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (2 samples, 0.04%)</title><rect x="1003.1" y="739.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1006.1" y="750.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2 samples, 0.04%)</title><rect x="1003.1" y="723.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1006.1" y="734.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2 samples, 0.04%)</title><rect x="1003.1" y="707.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1006.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="1003.1" y="691.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1006.1" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.04%)</title><rect x="1003.1" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1006.1" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.executeAsync (228 samples, 4.09%)</title><rect x="1003.8" y="803.0" width="48.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1006.8" y="814.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (227 samples, 4.07%)</title><rect x="1004.0" y="787.0" width="48.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1007.0" y="798.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (227 samples, 4.07%)</title><rect x="1004.0" y="771.0" width="48.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1007.0" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (213 samples, 3.82%)</title><rect x="1004.2" y="755.0" width="45.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1007.2" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (212 samples, 3.80%)</title><rect x="1004.4" y="739.0" width="44.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1007.4" y="750.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (211 samples, 3.78%)</title><rect x="1004.6" y="723.0" width="44.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1007.6" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (211 samples, 3.78%)</title><rect x="1004.6" y="707.0" width="44.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1007.6" y="718.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (211 samples, 3.78%)</title><rect x="1004.6" y="691.0" width="44.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1007.6" y="702.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (211 samples, 3.78%)</title><rect x="1004.6" y="675.0" width="44.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1007.6" y="686.0">jdk/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.05%)</title><rect x="1005.7" y="659.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1008.7" y="670.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.05%)</title><rect x="1006.3" y="659.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1009.3" y="670.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (2 samples, 0.04%)</title><rect x="1006.9" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1009.9" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (194 samples, 3.48%)</title><rect x="1008.0" y="659.0" width="41.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1011.0" y="670.0">Uns..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (4 samples, 0.07%)</title><rect x="1008.6" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.6" y="654.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.04%)</title><rect x="1009.5" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.5" y="654.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (6 samples, 0.11%)</title><rect x="1009.9" y="643.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.9" y="654.0"></text>
</g>
<g>
<title>Chunk::next() const (4 samples, 0.07%)</title><rect x="1010.3" y="627.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.3" y="638.0"></text>
</g>
<g>
<title>Thread::current() (5 samples, 0.09%)</title><rect x="1011.8" y="643.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1014.8" y="654.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.09%)</title><rect x="1011.8" y="627.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1014.8" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="1013.3" y="643.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1016.3" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (10 samples, 0.18%)</title><rect x="1013.7" y="643.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.7" y="654.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.05%)</title><rect x="1013.7" y="627.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.7" y="638.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.09%)</title><rect x="1014.6" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.6" y="638.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.07%)</title><rect x="1014.8" y="611.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.8" y="622.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.05%)</title><rect x="1014.8" y="595.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.8" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.09%)</title><rect x="1016.0" y="643.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1019.0" y="654.0"></text>
</g>
<g>
<title>__psynch_cvsignal (136 samples, 2.44%)</title><rect x="1017.3" y="643.0" width="28.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1020.3" y="654.0">__..</text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.04%)</title><rect x="1046.1" y="643.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1049.1" y="654.0"></text>
</g>
<g>
<title>pthread_cond_signal (6 samples, 0.11%)</title><rect x="1046.9" y="643.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1049.9" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.07%)</title><rect x="1048.2" y="643.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1051.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.07%)</title><rect x="1049.3" y="755.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.07%)</title><rect x="1049.3" y="739.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.05%)</title><rect x="1049.5" y="723.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1052.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.14%)</title><rect x="1050.1" y="755.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1053.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.14%)</title><rect x="1050.1" y="739.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1053.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (7 samples, 0.13%)</title><rect x="1050.1" y="723.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1053.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1050.1" y="707.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1053.1" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="1050.1" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1053.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (5 samples, 0.09%)</title><rect x="1050.5" y="707.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1053.5" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.09%)</title><rect x="1050.5" y="691.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1053.5" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (5 samples, 0.09%)</title><rect x="1050.5" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1053.5" y="686.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (2 samples, 0.04%)</title><rect x="1051.2" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1054.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (24 samples, 0.43%)</title><rect x="1052.0" y="867.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1055.0" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (11 samples, 0.20%)</title><rect x="1053.1" y="851.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1056.1" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.14%)</title><rect x="1053.7" y="835.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1056.7" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.09%)</title><rect x="1054.1" y="819.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1057.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.09%)</title><rect x="1054.1" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1057.1" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.13%)</title><rect x="1055.4" y="851.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.4" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.11%)</title><rect x="1055.6" y="835.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1058.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.07%)</title><rect x="1057.1" y="867.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1060.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="1057.1" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1060.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="1057.1" y="835.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1060.1" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1057.5" y="851.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1060.5" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.04%)</title><rect x="1057.9" y="867.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1060.9" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (19 samples, 0.34%)</title><rect x="1058.4" y="867.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.4" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.25%)</title><rect x="1058.6" y="851.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1061.6" y="862.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.04%)</title><rect x="1059.6" y="835.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1062.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.04%)</title><rect x="1059.6" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1062.6" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.09%)</title><rect x="1060.3" y="835.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1063.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.05%)</title><rect x="1060.3" y="819.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1063.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.05%)</title><rect x="1060.3" y="803.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1063.3" y="814.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.04%)</title><rect x="1060.5" y="787.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1063.5" y="798.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.04%)</title><rect x="1060.5" y="771.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1063.5" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1060.5" y="755.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1063.5" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="1060.9" y="819.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1063.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="1060.9" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1063.9" y="814.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.04%)</title><rect x="1060.9" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1063.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.07%)</title><rect x="1061.5" y="851.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1064.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.07%)</title><rect x="1061.5" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1064.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1061.8" y="819.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1064.8" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1061.8" y="803.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1064.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.13%)</title><rect x="1062.4" y="867.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1065.4" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.13%)</title><rect x="1062.4" y="851.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1065.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1063.2" y="835.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1066.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1063.2" y="819.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1066.2" y="830.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.05%)</title><rect x="1063.2" y="803.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1066.2" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (183 samples, 3.28%)</title><rect x="1063.9" y="883.0" width="38.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1066.9" y="894.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (183 samples, 3.28%)</title><rect x="1063.9" y="867.0" width="38.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1066.9" y="878.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16 samples, 0.29%)</title><rect x="1064.1" y="851.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1067.1" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.22%)</title><rect x="1064.9" y="835.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1067.9" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.22%)</title><rect x="1064.9" y="819.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1067.9" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.16%)</title><rect x="1065.1" y="803.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1068.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.07%)</title><rect x="1065.6" y="787.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1068.6" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.07%)</title><rect x="1065.6" y="771.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1068.6" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.07%)</title><rect x="1065.6" y="755.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1068.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.07%)</title><rect x="1065.6" y="739.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1068.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="1066.4" y="787.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1069.4" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="1066.4" y="771.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1069.4" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.05%)</title><rect x="1066.4" y="755.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1069.4" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (166 samples, 2.98%)</title><rect x="1067.5" y="851.0" width="35.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1070.5" y="862.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.18%)</title><rect x="1067.5" y="835.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1070.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.14%)</title><rect x="1067.9" y="819.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1070.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.13%)</title><rect x="1068.1" y="803.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1071.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.13%)</title><rect x="1068.1" y="787.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1071.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (7 samples, 0.13%)</title><rect x="1068.1" y="771.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1071.1" y="782.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="1068.3" y="755.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1071.3" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="1069.0" y="755.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (155 samples, 2.78%)</title><rect x="1069.6" y="835.0" width="32.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1072.6" y="846.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (155 samples, 2.78%)</title><rect x="1069.6" y="819.0" width="32.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1072.6" y="830.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (20 samples, 0.36%)</title><rect x="1069.8" y="803.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1072.8" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (16 samples, 0.29%)</title><rect x="1070.4" y="787.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1073.4" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.09%)</title><rect x="1070.4" y="771.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1073.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.09%)</title><rect x="1070.4" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1073.4" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="1070.6" y="739.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1073.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (11 samples, 0.20%)</title><rect x="1071.5" y="771.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1074.5" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (3 samples, 0.05%)</title><rect x="1071.5" y="755.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1074.5" y="766.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (2 samples, 0.04%)</title><rect x="1071.5" y="739.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1074.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (8 samples, 0.14%)</title><rect x="1072.1" y="755.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1075.1" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (7 samples, 0.13%)</title><rect x="1072.1" y="739.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1075.1" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (7 samples, 0.13%)</title><rect x="1072.1" y="723.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1075.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (4 samples, 0.07%)</title><rect x="1072.8" y="707.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1075.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (4 samples, 0.07%)</title><rect x="1072.8" y="691.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1075.8" y="702.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (3 samples, 0.05%)</title><rect x="1072.8" y="675.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1075.8" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="1072.8" y="659.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.8" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (122 samples, 2.19%)</title><rect x="1074.2" y="803.0" width="25.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1077.2" y="814.0">s..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="1074.9" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1077.9" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="1074.9" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1077.9" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="1074.9" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1077.9" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (117 samples, 2.10%)</title><rect x="1075.3" y="787.0" width="24.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1078.3" y="798.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (117 samples, 2.10%)</title><rect x="1075.3" y="771.0" width="24.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1078.3" y="782.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.05%)</title><rect x="1076.4" y="755.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1079.4" y="766.0"></text>
</g>
<g>
<title>read (109 samples, 1.95%)</title><rect x="1077.0" y="755.0" width="23.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1080.0" y="766.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.16%)</title><rect x="1100.1" y="803.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1103.1" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.09%)</title><rect x="1100.9" y="787.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1103.9" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.09%)</title><rect x="1100.9" y="771.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1103.9" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.07%)</title><rect x="1101.1" y="755.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1104.1" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="1101.1" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1104.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.04%)</title><rect x="1102.0" y="803.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1105.0" y="814.0"></text>
</g>
<g>
<title>thread_start (409 samples, 7.34%)</title><rect x="1102.8" y="931.0" width="86.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1105.8" y="942.0">thread_start</text>
</g>
<g>
<title>_pthread_start (409 samples, 7.34%)</title><rect x="1102.8" y="915.0" width="86.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1105.8" y="926.0">_pthread_s..</text>
</g>
<g>
<title>_pthread_body (409 samples, 7.34%)</title><rect x="1102.8" y="899.0" width="86.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1105.8" y="910.0">_pthread_b..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (409 samples, 7.34%)</title><rect x="1102.8" y="883.0" width="86.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1105.8" y="894.0">thread_nat..</text>
</g>
<g>
<title>Thread::call_run() (409 samples, 7.34%)</title><rect x="1102.8" y="867.0" width="86.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.8" y="878.0">Thread::ca..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (3 samples, 0.05%)</title><rect x="1102.8" y="851.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.8" y="862.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (3 samples, 0.05%)</title><rect x="1102.8" y="835.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.8" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.05%)</title><rect x="1102.8" y="819.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.8" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.05%)</title><rect x="1102.8" y="803.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.8" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.05%)</title><rect x="1102.8" y="787.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.8" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="1102.8" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.8" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="1102.8" y="755.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1105.8" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (395 samples, 7.08%)</title><rect x="1103.7" y="851.0" width="83.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.7" y="862.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (395 samples, 7.08%)</title><rect x="1103.7" y="835.0" width="83.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.7" y="846.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (389 samples, 6.98%)</title><rect x="1103.7" y="819.0" width="82.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.7" y="830.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (388 samples, 6.96%)</title><rect x="1103.7" y="803.0" width="82.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.7" y="814.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (373 samples, 6.69%)</title><rect x="1103.7" y="787.0" width="78.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.7" y="798.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (373 samples, 6.69%)</title><rect x="1103.7" y="771.0" width="78.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.7" y="782.0">Compile::..</text>
</g>
<g>
<title>Compile::Code_Gen() (189 samples, 3.39%)</title><rect x="1103.9" y="755.0" width="40.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.9" y="766.0">Com..</text>
</g>
<g>
<title>Compile::Output() (9 samples, 0.16%)</title><rect x="1103.9" y="739.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.9" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.05%)</title><rect x="1103.9" y="723.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.9" y="734.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (6 samples, 0.11%)</title><rect x="1104.5" y="723.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.5" y="734.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (5 samples, 0.09%)</title><rect x="1104.7" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.7" y="718.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (4 samples, 0.07%)</title><rect x="1104.9" y="691.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.9" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (8 samples, 0.14%)</title><rect x="1105.8" y="739.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.8" y="750.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (3 samples, 0.05%)</title><rect x="1106.6" y="723.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.6" y="734.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (3 samples, 0.05%)</title><rect x="1106.6" y="707.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.6" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.04%)</title><rect x="1106.8" y="691.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.8" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (19 samples, 0.34%)</title><rect x="1107.7" y="739.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.7" y="750.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (3 samples, 0.05%)</title><rect x="1107.7" y="723.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.7" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (16 samples, 0.29%)</title><rect x="1108.3" y="723.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.3" y="734.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.04%)</title><rect x="1108.5" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.5" y="718.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.04%)</title><rect x="1108.9" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.9" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.04%)</title><rect x="1108.9" y="691.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.9" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (9 samples, 0.16%)</title><rect x="1109.4" y="707.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.4" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.04%)</title><rect x="1109.8" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.8" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.04%)</title><rect x="1109.8" y="675.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.8" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (4 samples, 0.07%)</title><rect x="1110.2" y="691.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.2" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.05%)</title><rect x="1110.2" y="675.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.2" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.04%)</title><rect x="1110.2" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.2" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.04%)</title><rect x="1110.2" y="643.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.2" y="654.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.04%)</title><rect x="1111.7" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.7" y="750.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (2 samples, 0.04%)</title><rect x="1111.7" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.7" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (18 samples, 0.32%)</title><rect x="1112.1" y="739.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.1" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (18 samples, 0.32%)</title><rect x="1112.1" y="723.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.1" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.07%)</title><rect x="1112.5" y="707.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.5" y="718.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.05%)</title><rect x="1112.5" y="691.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 0.07%)</title><rect x="1113.4" y="707.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.4" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.04%)</title><rect x="1113.6" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.07%)</title><rect x="1114.2" y="707.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.2" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.05%)</title><rect x="1115.3" y="707.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (132 samples, 2.37%)</title><rect x="1115.9" y="739.0" width="28.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.9" y="750.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.05%)</title><rect x="1116.1" y="723.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (10 samples, 0.18%)</title><rect x="1116.8" y="723.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 0.04%)</title><rect x="1117.2" y="707.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.2" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.09%)</title><rect x="1117.6" y="707.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.6" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="1117.6" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.6" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="1118.0" y="691.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.05%)</title><rect x="1118.9" y="723.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.9" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.04%)</title><rect x="1119.1" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 0.22%)</title><rect x="1119.5" y="723.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.04%)</title><rect x="1121.6" y="707.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (30 samples, 0.54%)</title><rect x="1122.1" y="723.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (3 samples, 0.05%)</title><rect x="1123.1" y="707.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (4 samples, 0.07%)</title><rect x="1123.8" y="707.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (3 samples, 0.05%)</title><rect x="1124.0" y="691.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (13 samples, 0.23%)</title><rect x="1124.6" y="707.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.6" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.11%)</title><rect x="1125.2" y="691.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.2" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.05%)</title><rect x="1126.5" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (5 samples, 0.09%)</title><rect x="1127.4" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.4" y="718.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.05%)</title><rect x="1127.8" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.05%)</title><rect x="1128.4" y="723.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.04%)</title><rect x="1128.6" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (16 samples, 0.29%)</title><rect x="1129.5" y="723.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.5" y="734.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 0.04%)</title><rect x="1131.0" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.0" y="718.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (5 samples, 0.09%)</title><rect x="1131.6" y="707.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.6" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (5 samples, 0.09%)</title><rect x="1131.6" y="691.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.04%)</title><rect x="1132.9" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (15 samples, 0.27%)</title><rect x="1133.3" y="723.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (8 samples, 0.14%)</title><rect x="1134.6" y="707.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.6" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 0.14%)</title><rect x="1136.7" y="723.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.7" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 0.14%)</title><rect x="1136.7" y="707.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.7" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 0.13%)</title><rect x="1136.9" y="691.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.9" y="702.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 0.07%)</title><rect x="1136.9" y="675.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.9" y="686.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.04%)</title><rect x="1137.3" y="659.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.3" y="670.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.04%)</title><rect x="1137.9" y="675.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.9" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.05%)</title><rect x="1138.4" y="723.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.4" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.04%)</title><rect x="1138.6" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.6" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.07%)</title><rect x="1139.0" y="723.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.0" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.05%)</title><rect x="1139.2" y="707.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.2" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (5 samples, 0.09%)</title><rect x="1139.8" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (12 samples, 0.22%)</title><rect x="1140.9" y="723.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.9" y="734.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.07%)</title><rect x="1142.6" y="707.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.6" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.05%)</title><rect x="1142.6" y="691.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.6" y="702.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.04%)</title><rect x="1142.8" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.8" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (152 samples, 2.73%)</title><rect x="1143.9" y="755.0" width="32.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.9" y="766.0">Co..</text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (73 samples, 1.31%)</title><rect x="1144.3" y="739.0" width="15.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (73 samples, 1.31%)</title><rect x="1144.3" y="723.0" width="15.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.3" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.5" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="691.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.5" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.5" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.5" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.5" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.5" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="611.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.5" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="595.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.5" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="579.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.5" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1144.5" y="563.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.5" y="574.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.04%)</title><rect x="1145.3" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.05%)</title><rect x="1145.8" y="707.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.8" y="718.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.04%)</title><rect x="1146.0" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.07%)</title><rect x="1146.4" y="707.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.04%)</title><rect x="1146.6" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (39 samples, 0.70%)</title><rect x="1147.3" y="707.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (37 samples, 0.66%)</title><rect x="1147.5" y="691.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (30 samples, 0.54%)</title><rect x="1147.9" y="675.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.04%)</title><rect x="1148.1" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1148.1" y="643.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.1" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1148.1" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.1" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="1148.9" y="659.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (23 samples, 0.41%)</title><rect x="1149.4" y="659.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (20 samples, 0.36%)</title><rect x="1149.8" y="643.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (18 samples, 0.32%)</title><rect x="1150.2" y="627.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.2" y="638.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (12 samples, 0.22%)</title><rect x="1151.5" y="611.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (4 samples, 0.07%)</title><rect x="1154.2" y="675.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.2" y="686.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (3 samples, 0.05%)</title><rect x="1154.4" y="659.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (14 samples, 0.25%)</title><rect x="1155.7" y="707.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (7 samples, 0.13%)</title><rect x="1157.0" y="691.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (4 samples, 0.07%)</title><rect x="1157.0" y="675.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.0" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 0.05%)</title><rect x="1157.8" y="675.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.8" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.05%)</title><rect x="1158.9" y="707.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="1158.9" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.9" y="702.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.04%)</title><rect x="1159.7" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.11%)</title><rect x="1160.2" y="739.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.11%)</title><rect x="1160.2" y="723.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (2 samples, 0.04%)</title><rect x="1160.6" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="718.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.04%)</title><rect x="1161.0" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.0" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.05%)</title><rect x="1161.4" y="739.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (43 samples, 0.77%)</title><rect x="1162.1" y="739.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.1" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1162.1" y="723.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1162.1" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.07%)</title><rect x="1162.7" y="723.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.04%)</title><rect x="1163.5" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 0.38%)</title><rect x="1164.0" y="723.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (19 samples, 0.34%)</title><rect x="1164.4" y="707.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 0.25%)</title><rect x="1164.8" y="691.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.8" y="702.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (2 samples, 0.04%)</title><rect x="1165.0" y="675.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.0" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (7 samples, 0.13%)</title><rect x="1166.1" y="675.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.04%)</title><rect x="1166.1" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (5 samples, 0.09%)</title><rect x="1166.5" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (4 samples, 0.07%)</title><rect x="1166.7" y="643.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.7" y="654.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (3 samples, 0.05%)</title><rect x="1166.9" y="627.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="1168.0" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="1168.0" y="675.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="686.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.04%)</title><rect x="1168.0" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.07%)</title><rect x="1168.6" y="723.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.09%)</title><rect x="1169.5" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.09%)</title><rect x="1169.5" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (18 samples, 0.32%)</title><rect x="1171.2" y="739.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (17 samples, 0.30%)</title><rect x="1171.4" y="723.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="734.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (4 samples, 0.07%)</title><rect x="1171.8" y="707.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (3 samples, 0.05%)</title><rect x="1171.8" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1173.3" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.04%)</title><rect x="1174.1" y="707.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.05%)</title><rect x="1175.2" y="739.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="1175.2" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.2" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="1175.2" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="718.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.04%)</title><rect x="1176.0" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="766.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.04%)</title><rect x="1176.0" y="739.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="750.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.04%)</title><rect x="1176.0" y="723.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="734.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.04%)</title><rect x="1176.0" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (28 samples, 0.50%)</title><rect x="1176.7" y="755.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (28 samples, 0.50%)</title><rect x="1176.7" y="739.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (28 samples, 0.50%)</title><rect x="1176.7" y="723.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (28 samples, 0.50%)</title><rect x="1176.7" y="707.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (28 samples, 0.50%)</title><rect x="1176.7" y="691.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.04%)</title><rect x="1176.7" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.04%)</title><rect x="1176.7" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="670.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.04%)</title><rect x="1176.7" y="643.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.04%)</title><rect x="1176.7" y="627.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (20 samples, 0.36%)</title><rect x="1177.3" y="675.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (20 samples, 0.36%)</title><rect x="1177.3" y="659.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 0.34%)</title><rect x="1177.3" y="643.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 0.34%)</title><rect x="1177.3" y="627.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 0.30%)</title><rect x="1177.3" y="611.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.23%)</title><rect x="1177.5" y="595.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.23%)</title><rect x="1177.5" y="579.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.23%)</title><rect x="1177.5" y="563.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.23%)</title><rect x="1177.5" y="547.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.20%)</title><rect x="1177.7" y="531.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.11%)</title><rect x="1177.9" y="515.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.11%)</title><rect x="1177.9" y="499.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.11%)</title><rect x="1177.9" y="483.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.11%)</title><rect x="1177.9" y="467.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.11%)</title><rect x="1177.9" y="451.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1178.1" y="435.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1178.1" y="419.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1178.1" y="403.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1178.1" y="387.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1178.1" y="371.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1178.4" y="355.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1178.4" y="339.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1178.4" y="323.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1178.4" y="307.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1178.4" y="291.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1178.4" y="275.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1178.4" y="259.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1178.4" y="243.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1178.4" y="227.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1178.4" y="211.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1178.4" y="195.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1178.4" y="179.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1178.4" y="163.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1178.4" y="147.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1179.2" y="515.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1179.4" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1179.4" y="483.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1179.4" y="467.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1179.4" y="451.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1179.4" y="435.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1179.4" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1179.4" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1179.4" y="387.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1179.4" y="371.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1179.4" y="355.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1179.4" y="339.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1179.4" y="323.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1179.4" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1179.4" y="291.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1179.4" y="275.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1179.4" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1179.4" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1179.4" y="227.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1179.4" y="211.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1179.4" y="195.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1180.3" y="595.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1180.3" y="579.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1180.3" y="563.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1180.3" y="547.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1180.3" y="531.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1180.3" y="515.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1180.5" y="499.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1180.5" y="483.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1180.5" y="467.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1180.5" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1180.5" y="435.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1180.5" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1180.5" y="403.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1180.5" y="387.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1180.5" y="371.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1180.5" y="355.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1180.5" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1180.5" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1180.5" y="307.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1180.5" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1180.5" y="275.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1180.5" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1180.5" y="243.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1180.5" y="227.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1180.5" y="211.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1181.5" y="675.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1181.7" y="659.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1181.7" y="643.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1181.7" y="627.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1181.7" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1181.7" y="595.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1181.7" y="579.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1181.7" y="563.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1181.7" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1181.7" y="531.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1181.7" y="515.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1182.0" y="499.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1182.0" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1182.0" y="467.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1182.0" y="451.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1182.0" y="435.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1182.0" y="419.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1182.0" y="403.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1182.0" y="387.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1182.0" y="371.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1182.0" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1182.0" y="339.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1182.0" y="323.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1182.0" y="307.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1182.0" y="291.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1182.0" y="275.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1182.0" y="259.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1182.0" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1182.0" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1182.0" y="211.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1182.0" y="195.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1182.0" y="179.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1182.0" y="163.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1182.0" y="147.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1182.0" y="131.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1182.0" y="115.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1182.0" y="99.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1182.0" y="83.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1182.0" y="67.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1182.0" y="51.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1182.0" y="35.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (10 samples, 0.18%)</title><rect x="1182.8" y="787.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (10 samples, 0.18%)</title><rect x="1182.8" y="771.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (10 samples, 0.18%)</title><rect x="1182.8" y="755.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (10 samples, 0.18%)</title><rect x="1182.8" y="739.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() (5 samples, 0.09%)</title><rect x="1182.8" y="723.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (5 samples, 0.09%)</title><rect x="1182.8" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (5 samples, 0.09%)</title><rect x="1182.8" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 0.07%)</title><rect x="1182.8" y="675.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.07%)</title><rect x="1182.8" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.07%)</title><rect x="1182.8" y="643.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.07%)</title><rect x="1182.8" y="627.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.07%)</title><rect x="1182.8" y="611.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.07%)</title><rect x="1182.8" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.07%)</title><rect x="1182.8" y="579.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.07%)</title><rect x="1182.8" y="563.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.04%)</title><rect x="1182.8" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.04%)</title><rect x="1182.8" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.04%)</title><rect x="1183.2" y="547.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="558.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (5 samples, 0.09%)</title><rect x="1183.9" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="734.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (4 samples, 0.07%)</title><rect x="1184.1" y="707.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="718.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.04%)</title><rect x="1184.5" y="691.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="702.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.04%)</title><rect x="1184.9" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.9" y="798.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.04%)</title><rect x="1184.9" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="782.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (6 samples, 0.11%)</title><rect x="1186.0" y="819.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="830.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (5 samples, 0.09%)</title><rect x="1186.0" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (5 samples, 0.09%)</title><rect x="1186.0" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (4 samples, 0.07%)</title><rect x="1186.2" y="771.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1189.2" y="782.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.04%)</title><rect x="1186.6" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.04%)</title><rect x="1187.2" y="851.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.04%)</title><rect x="1187.2" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.2" y="846.0"></text>
</g>
<g>
<title>WatcherThread::run() (8 samples, 0.14%)</title><rect x="1187.7" y="851.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (7 samples, 0.13%)</title><rect x="1187.9" y="835.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.13%)</title><rect x="1187.9" y="819.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 0.13%)</title><rect x="1187.9" y="803.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.13%)</title><rect x="1187.9" y="787.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.9" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.11%)</title><rect x="1188.1" y="771.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1191.1" y="782.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.05%)</title><rect x="1189.4" y="931.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1192.4" y="942.0"></text>
</g>
</g>
</svg>
