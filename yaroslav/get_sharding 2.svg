<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (3,467 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.06%)</title><rect x="10.0" y="403.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (3 samples, 0.09%)</title><rect x="10.7" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.7" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.14%)</title><rect x="11.7" y="403.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.7" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.06%)</title><rect x="11.7" y="387.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.7" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="11.7" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.7" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="11.7" y="355.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.7" y="366.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="11.7" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.7" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.03%)</title><rect x="12.0" y="371.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.0" y="382.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.09%)</title><rect x="12.4" y="387.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.4" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.09%)</title><rect x="12.4" y="371.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.4" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="12.4" y="355.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.4" y="366.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="12.4" y="339.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="12.7" y="339.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.7" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="12.7" y="323.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.7" y="334.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="13.1" y="355.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="16.1" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="13.4" y="403.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.4" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="13.7" y="387.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.7" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (5 samples, 0.14%)</title><rect x="14.1" y="403.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.1" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (5 samples, 0.14%)</title><rect x="14.1" y="387.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (5 samples, 0.14%)</title><rect x="14.1" y="371.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.1" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.14%)</title><rect x="14.1" y="355.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="17.1" y="366.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="14.1" y="339.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.1" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="14.4" y="339.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="14.4" y="323.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.4" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="14.4" y="307.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="17.4" y="318.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="14.4" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.4" y="302.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (3 samples, 0.09%)</title><rect x="14.8" y="339.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.8" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (3 samples, 0.09%)</title><rect x="15.8" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="18.8" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (78 samples, 2.25%)</title><rect x="16.8" y="403.0" width="26.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="19.8" y="414.0">S..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="17.8" y="387.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.8" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (72 samples, 2.08%)</title><rect x="18.2" y="387.0" width="24.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="21.2" y="398.0">O..</text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (13 samples, 0.37%)</title><rect x="18.2" y="371.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="21.2" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.06%)</title><rect x="18.2" y="355.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="21.2" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.12%)</title><rect x="18.8" y="355.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="21.8" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (4 samples, 0.12%)</title><rect x="18.8" y="339.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.8" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.20%)</title><rect x="20.2" y="355.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="23.2" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.17%)</title><rect x="20.2" y="339.0" width="2.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="23.2" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="22.3" y="339.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="25.3" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (12 samples, 0.35%)</title><rect x="22.6" y="371.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="25.6" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (47 samples, 1.36%)</title><rect x="26.7" y="371.0" width="16.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="29.7" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (26 samples, 0.75%)</title><rect x="33.8" y="355.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="36.8" y="366.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="42.7" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="45.7" y="398.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="42.7" y="371.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="45.7" y="382.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (1 samples, 0.03%)</title><rect x="42.7" y="355.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="45.7" y="366.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="43.0" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="46.0" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.03%)</title><rect x="43.0" y="371.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="46.0" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.06%)</title><rect x="43.4" y="403.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="46.4" y="414.0"></text>
</g>
<g>
<title>[not_walkable] (10 samples, 0.29%)</title><rect x="44.0" y="403.0" width="3.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="47.0" y="414.0"></text>
</g>
<g>
<title>[not_walkable_Java] (15 samples, 0.43%)</title><rect x="47.4" y="403.0" width="5.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="50.4" y="414.0"></text>
</g>
<g>
<title>CompiledMethod::is_method_handle_return(unsigned char*) (1 samples, 0.03%)</title><rect x="47.4" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="50.4" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="47.8" y="387.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="50.8" y="398.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="47.8" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="50.8" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (13 samples, 0.37%)</title><rect x="48.1" y="387.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="51.1" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.09%)</title><rect x="48.8" y="371.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="51.8" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.09%)</title><rect x="48.8" y="355.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="51.8" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.09%)</title><rect x="49.8" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="52.8" y="382.0"></text>
</g>
<g>
<title>CompiledMethod::is_method_handle_return(unsigned char*) (1 samples, 0.03%)</title><rect x="50.8" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="53.8" y="382.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (4 samples, 0.12%)</title><rect x="51.2" y="371.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="54.2" y="382.0"></text>
</g>
<g>
<title>[unknown_Java] (20 samples, 0.58%)</title><rect x="52.5" y="403.0" width="6.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="55.5" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (4 samples, 0.12%)</title><rect x="57.3" y="387.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="60.3" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.12%)</title><rect x="57.3" y="371.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="60.3" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (4 samples, 0.12%)</title><rect x="57.3" y="355.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="60.3" y="366.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.06%)</title><rect x="58.7" y="387.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="61.7" y="398.0"></text>
</g>
<g>
<title>_res (2 samples, 0.06%)</title><rect x="58.7" y="371.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="61.7" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,049 samples, 59.10%)</title><rect x="59.4" y="403.0" width="697.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.4" y="414.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,049 samples, 59.10%)</title><rect x="59.4" y="387.0" width="697.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.4" y="398.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,049 samples, 59.10%)</title><rect x="59.4" y="371.0" width="697.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.4" y="382.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.03%)</title><rect x="59.4" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="59.4" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.03%)</title><rect x="59.4" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="59.4" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.4" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="59.4" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.4" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="59.4" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.20%)</title><rect x="59.7" y="355.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.20%)</title><rect x="59.7" y="339.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (3 samples, 0.09%)</title><rect x="61.1" y="323.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.09%)</title><rect x="61.1" y="307.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,062 samples, 30.63%)</title><rect x="62.1" y="355.0" width="361.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.1" y="366.0">java/util/concurrent/ThreadPoolExecutor.getTask</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1,061 samples, 30.60%)</title><rect x="62.4" y="339.0" width="361.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.4" y="350.0">java/util/concurrent/LinkedBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (2 samples, 0.06%)</title><rect x="62.4" y="323.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (928 samples, 26.77%)</title><rect x="63.1" y="323.0" width="315.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.1" y="334.0">java/util/concurrent/locks/AbstractQueuedSy..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.17%)</title><rect x="63.4" y="307.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (7 samples, 0.20%)</title><rect x="65.5" y="307.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.20%)</title><rect x="67.9" y="307.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="68.5" y="291.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="68.5" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="68.5" y="259.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.5" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="68.5" y="243.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="71.5" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="68.5" y="227.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="71.5" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="68.5" y="211.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="71.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.03%)</title><rect x="68.9" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.09%)</title><rect x="69.2" y="291.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="72.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.09%)</title><rect x="69.2" y="275.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="69.9" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="69.9" y="243.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.9" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="69.9" y="227.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (22 samples, 0.63%)</title><rect x="70.2" y="307.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 0.63%)</title><rect x="70.2" y="291.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 0.52%)</title><rect x="70.6" y="275.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 0.49%)</title><rect x="70.9" y="259.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (17 samples, 0.49%)</title><rect x="70.9" y="243.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.9" y="254.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="71.3" y="227.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="74.3" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (15 samples, 0.43%)</title><rect x="71.6" y="227.0" width="5.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="74.6" y="238.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.03%)</title><rect x="71.6" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="74.6" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="71.9" y="211.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="74.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="71.9" y="195.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="74.9" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="71.9" y="179.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="74.9" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="71.9" y="163.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="74.9" y="174.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="71.9" y="147.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="74.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.37%)</title><rect x="72.3" y="211.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="75.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.09%)</title><rect x="76.7" y="275.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.06%)</title><rect x="77.7" y="307.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (883 samples, 25.47%)</title><rect x="78.4" y="307.0" width="300.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.4" y="318.0">java/util/concurrent/locks/LockSupport.p..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (883 samples, 25.47%)</title><rect x="78.4" y="291.0" width="300.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.4" y="302.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>EventThreadPark::EventThreadPark(EventStartTime) (2 samples, 0.06%)</title><rect x="84.2" y="275.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="87.2" y="286.0"></text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="84.9" y="275.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="87.9" y="286.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (2 samples, 0.06%)</title><rect x="85.2" y="275.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="88.2" y="286.0"></text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.06%)</title><rect x="85.9" y="275.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="88.9" y="286.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="86.6" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="89.6" y="286.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.06%)</title><rect x="86.9" y="275.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="89.9" y="286.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="87.6" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="90.6" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="87.9" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="90.9" y="286.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="88.3" y="275.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="91.3" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (852 samples, 24.57%)</title><rect x="88.6" y="275.0" width="290.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="91.6" y="286.0">Unsafe_Park(JNIEnv_*, _jobject*, unsign..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (2 samples, 0.06%)</title><rect x="90.0" y="259.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="93.0" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (1 samples, 0.03%)</title><rect x="90.7" y="259.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="93.7" y="270.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.12%)</title><rect x="91.0" y="259.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="94.0" y="270.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="92.4" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="95.4" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="92.7" y="259.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="95.7" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.06%)</title><rect x="92.7" y="243.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="95.7" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="92.7" y="227.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="95.7" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="93.0" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="96.0" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="93.0" y="211.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="96.0" y="222.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="93.0" y="195.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="96.0" y="206.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (8 samples, 0.23%)</title><rect x="93.4" y="259.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="96.4" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.06%)</title><rect x="94.4" y="243.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="97.4" y="254.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.03%)</title><rect x="94.4" y="227.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="97.4" y="238.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive(JavaThread*) (1 samples, 0.03%)</title><rect x="94.4" y="211.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="97.4" y="222.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="94.7" y="227.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="97.7" y="238.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.03%)</title><rect x="95.1" y="243.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="98.1" y="254.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="95.4" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="98.4" y="254.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="95.8" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="98.8" y="254.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="95.8" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="98.8" y="238.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="96.1" y="259.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="99.1" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.03%)</title><rect x="96.4" y="259.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="99.4" y="270.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (6 samples, 0.17%)</title><rect x="96.8" y="259.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="99.8" y="270.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (3 samples, 0.09%)</title><rect x="96.8" y="243.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="99.8" y="254.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="97.5" y="227.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="100.5" y="238.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (3 samples, 0.09%)</title><rect x="97.8" y="243.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="100.8" y="254.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::is_enabled() (2 samples, 0.06%)</title><rect x="98.8" y="259.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="101.8" y="270.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="99.5" y="259.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="102.5" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (795 samples, 22.93%)</title><rect x="99.9" y="259.0" width="270.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="102.9" y="270.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.09%)</title><rect x="100.9" y="243.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="103.9" y="254.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.29%)</title><rect x="101.9" y="243.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="104.9" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.20%)</title><rect x="102.2" y="227.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="105.2" y="238.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.06%)</title><rect x="103.3" y="211.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="106.3" y="222.0"></text>
</g>
<g>
<title>Monitor::TryFast() (2 samples, 0.06%)</title><rect x="103.3" y="195.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="106.3" y="206.0"></text>
</g>
<g>
<title>Monitor::TryFast() (2 samples, 0.06%)</title><rect x="103.9" y="211.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="106.9" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.06%)</title><rect x="104.6" y="227.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="107.6" y="238.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="105.3" y="243.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="108.3" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="105.6" y="243.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="108.6" y="254.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="106.0" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="109.0" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (763 samples, 22.01%)</title><rect x="106.3" y="243.0" width="259.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="109.3" y="254.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (10 samples, 0.29%)</title><rect x="366.0" y="243.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="369.0" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.06%)</title><rect x="368.7" y="227.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="371.7" y="238.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.06%)</title><rect x="369.4" y="243.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="372.4" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="370.1" y="243.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="373.1" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="370.4" y="259.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="373.4" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.17%)</title><rect x="370.8" y="259.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="373.8" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.17%)</title><rect x="370.8" y="243.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="373.8" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.17%)</title><rect x="370.8" y="227.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="373.8" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.17%)</title><rect x="370.8" y="211.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="373.8" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.12%)</title><rect x="371.1" y="195.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="374.1" y="206.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="371.1" y="179.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="374.1" y="190.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="371.5" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="374.5" y="190.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="371.8" y="179.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="374.8" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="372.1" y="179.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="375.1" y="190.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="372.1" y="163.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="375.1" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="372.1" y="147.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="375.1" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="372.5" y="195.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="375.5" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.14%)</title><rect x="372.8" y="259.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="375.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="373.5" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="376.5" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="373.8" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="376.8" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="374.2" y="243.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="377.2" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="374.2" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="377.2" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="374.2" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="377.2" y="222.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="374.2" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="377.2" y="206.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.03%)</title><rect x="374.5" y="259.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="377.5" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="374.9" y="259.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="377.9" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.09%)</title><rect x="375.2" y="259.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="378.2" y="270.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.06%)</title><rect x="376.2" y="259.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="379.2" y="270.0"></text>
</g>
<g>
<title>pthread_cond_wait (4 samples, 0.12%)</title><rect x="376.9" y="259.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="379.9" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="378.3" y="259.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="381.3" y="270.0"></text>
</g>
<g>
<title>os::verify_stack_alignment() (1 samples, 0.03%)</title><rect x="378.6" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="381.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="378.9" y="323.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="381.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="378.9" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="381.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="378.9" y="291.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="381.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (41 samples, 1.18%)</title><rect x="379.3" y="323.0" width="13.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (41 samples, 1.18%)</title><rect x="379.3" y="307.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="382.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="379.3" y="291.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (38 samples, 1.10%)</title><rect x="379.6" y="291.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="382.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (33 samples, 0.95%)</title><rect x="380.3" y="275.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.3" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.06%)</title><rect x="380.3" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="383.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (31 samples, 0.89%)</title><rect x="381.0" y="259.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="384.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.03%)</title><rect x="381.0" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (30 samples, 0.87%)</title><rect x="381.3" y="243.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="384.3" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (30 samples, 0.87%)</title><rect x="381.3" y="227.0" width="10.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="384.3" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 0.84%)</title><rect x="381.3" y="211.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="384.3" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (29 samples, 0.84%)</title><rect x="381.3" y="195.0" width="9.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="384.3" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="391.2" y="211.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="394.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (3 samples, 0.09%)</title><rect x="391.5" y="275.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="394.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.06%)</title><rect x="392.6" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.06%)</title><rect x="392.6" y="275.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="392.6" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="392.9" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="392.9" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.9" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="392.9" y="227.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (89 samples, 2.57%)</title><rect x="393.2" y="323.0" width="30.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="396.2" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (89 samples, 2.57%)</title><rect x="393.2" y="307.0" width="30.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="396.2" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (89 samples, 2.57%)</title><rect x="393.2" y="291.0" width="30.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.2" y="302.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (89 samples, 2.57%)</title><rect x="393.2" y="275.0" width="30.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.2" y="286.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (89 samples, 2.57%)</title><rect x="393.2" y="259.0" width="30.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.2" y="270.0">jd..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="395.3" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="398.3" y="254.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.06%)</title><rect x="395.6" y="243.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="398.6" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (80 samples, 2.31%)</title><rect x="396.3" y="243.0" width="27.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="399.3" y="254.0">U..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="396.3" y="227.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="399.3" y="238.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="396.6" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="399.6" y="238.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.06%)</title><rect x="397.0" y="227.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="400.0" y="238.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (2 samples, 0.06%)</title><rect x="397.0" y="211.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="400.0" y="222.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.03%)</title><rect x="397.7" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="400.7" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="398.0" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="401.0" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="398.0" y="211.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="401.0" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="398.0" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="401.0" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="398.0" y="179.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="401.0" y="190.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="398.0" y="163.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="401.0" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.09%)</title><rect x="398.3" y="227.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="401.3" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (67 samples, 1.93%)</title><rect x="399.4" y="227.0" width="22.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="402.4" y="238.0">_..</text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.09%)</title><rect x="422.2" y="227.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="425.2" y="238.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="422.8" y="211.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="425.8" y="222.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np (1 samples, 0.03%)</title><rect x="423.2" y="227.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="426.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$76/2009892315.run (979 samples, 28.24%)</title><rect x="423.5" y="355.0" width="333.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.5" y="366.0">ru/mail/polis/service/lorismelik/AsyncService..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$4 (979 samples, 28.24%)</title><rect x="423.5" y="339.0" width="333.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.5" y="350.0">ru/mail/polis/service/lorismelik/AsyncService..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (648 samples, 18.69%)</title><rect x="424.5" y="323.0" width="220.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.5" y="334.0">one/nio/http/HttpSession.send..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="424.5" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="427.5" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="424.5" y="291.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.5" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="424.5" y="275.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="424.5" y="259.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="427.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="424.5" y="243.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="427.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (606 samples, 17.48%)</title><rect x="424.9" y="307.0" width="206.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.9" y="318.0">one/nio/http/HttpSession.wr..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (37 samples, 1.07%)</title><rect x="425.6" y="291.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="428.6" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="429.3" y="275.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="432.3" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="430.0" y="275.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="433.0" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (23 samples, 0.66%)</title><rect x="430.3" y="275.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.3" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.03%)</title><rect x="430.3" y="259.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.3" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (10 samples, 0.29%)</title><rect x="430.7" y="259.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.09%)</title><rect x="433.1" y="243.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="436.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="433.4" y="227.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="436.4" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.03%)</title><rect x="433.7" y="227.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="436.7" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.35%)</title><rect x="434.1" y="259.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="437.1" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.32%)</title><rect x="434.4" y="243.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="437.8" y="227.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="437.8" y="211.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.8" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (567 samples, 16.35%)</title><rect x="438.2" y="291.0" width="192.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="441.2" y="302.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (567 samples, 16.35%)</title><rect x="438.2" y="275.0" width="192.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="441.2" y="286.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (567 samples, 16.35%)</title><rect x="438.2" y="259.0" width="192.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.2" y="270.0">one/nio/net/Session$Array..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (567 samples, 16.35%)</title><rect x="438.2" y="243.0" width="192.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="441.2" y="254.0">one/nio/net/JavaSocket.wr..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.20%)</title><rect x="438.2" y="227.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="438.2" y="211.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="441.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="438.8" y="195.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.8" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="440.2" y="179.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="443.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="440.2" y="163.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="443.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="440.2" y="147.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.2" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="440.2" y="131.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="443.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (560 samples, 16.15%)</title><rect x="440.5" y="227.0" width="190.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="443.5" y="238.0">sun/nio/ch/SocketChannelI..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="440.5" y="211.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="443.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="440.5" y="195.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="443.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="440.9" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="443.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (558 samples, 16.09%)</title><rect x="441.2" y="211.0" width="189.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.2" y="222.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (558 samples, 16.09%)</title><rect x="441.2" y="195.0" width="189.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.2" y="206.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.09%)</title><rect x="441.9" y="179.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (521 samples, 15.03%)</title><rect x="442.9" y="179.0" width="177.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.9" y="190.0">sun/nio/ch/IOUtil.write..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (521 samples, 15.03%)</title><rect x="442.9" y="163.0" width="177.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.9" y="174.0">sun/nio/ch/SocketDispat..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (521 samples, 15.03%)</title><rect x="442.9" y="147.0" width="177.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.9" y="158.0">sun/nio/ch/FileDispatch..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (11 samples, 0.32%)</title><rect x="449.4" y="131.0" width="3.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="452.4" y="142.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.06%)</title><rect x="452.5" y="115.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="455.5" y="126.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="453.1" y="131.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="456.1" y="142.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.09%)</title><rect x="453.5" y="131.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="456.5" y="142.0"></text>
</g>
<g>
<title>write (487 samples, 14.05%)</title><rect x="454.5" y="131.0" width="165.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="457.5" y="142.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (32 samples, 0.92%)</title><rect x="620.3" y="179.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="623.3" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.23%)</title><rect x="621.3" y="163.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="624.3" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.20%)</title><rect x="621.6" y="147.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="624.6" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.09%)</title><rect x="622.6" y="131.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="625.6" y="142.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.03%)</title><rect x="623.7" y="131.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="626.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (21 samples, 0.61%)</title><rect x="624.0" y="163.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (5 samples, 0.14%)</title><rect x="629.4" y="147.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.4" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (41 samples, 1.18%)</title><rect x="631.1" y="307.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="634.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.06%)</title><rect x="631.8" y="291.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.35%)</title><rect x="632.5" y="291.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.06%)</title><rect x="632.5" y="275.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="635.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.29%)</title><rect x="633.2" y="275.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="636.2" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (7 samples, 0.20%)</title><rect x="633.9" y="259.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.9" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.09%)</title><rect x="635.2" y="243.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.2" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.03%)</title><rect x="635.6" y="227.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.6" y="238.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.03%)</title><rect x="635.9" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="635.9" y="211.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="636.2" y="259.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="639.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (25 samples, 0.72%)</title><rect x="636.6" y="291.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="636.6" y="275.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (24 samples, 0.69%)</title><rect x="636.9" y="275.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.9" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.46%)</title><rect x="637.9" y="259.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="640.9" y="270.0"></text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.06%)</title><rect x="637.9" y="243.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="640.9" y="254.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="638.6" y="243.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="641.6" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.35%)</title><rect x="639.3" y="243.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="642.3" y="254.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.03%)</title><rect x="639.3" y="227.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="642.3" y="238.0"></text>
</g>
<g>
<title>gettimeofday (9 samples, 0.26%)</title><rect x="639.7" y="227.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="642.7" y="238.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="640.7" y="211.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="643.7" y="222.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.14%)</title><rect x="641.0" y="211.0" width="1.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="644.0" y="222.0"></text>
</g>
<g>
<title>_res (3 samples, 0.09%)</title><rect x="641.7" y="195.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="644.7" y="206.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.06%)</title><rect x="642.7" y="227.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="645.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (1 samples, 0.03%)</title><rect x="643.4" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="646.4" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.09%)</title><rect x="643.7" y="259.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="644.8" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="647.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$73/343578854.act (328 samples, 9.46%)</title><rect x="645.1" y="323.0" width="111.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="648.1" y="334.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$1 (328 samples, 9.46%)</title><rect x="645.1" y="307.0" width="111.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.1" y="318.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.doGet (328 samples, 9.46%)</title><rect x="645.1" y="291.0" width="111.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.1" y="302.0">ru/mail/polis..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="646.8" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="649.8" y="286.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="647.1" y="275.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="650.1" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (62 samples, 1.79%)</title><rect x="647.5" y="275.0" width="21.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="650.5" y="286.0">O..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="648.5" y="259.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="651.5" y="270.0"></text>
</g>
<g>
<title>CodeBlob::is_compiled() const (1 samples, 0.03%)</title><rect x="648.8" y="259.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="651.8" y="270.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (2 samples, 0.06%)</title><rect x="649.2" y="259.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="652.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (13 samples, 0.37%)</title><rect x="649.9" y="259.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="652.9" y="270.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (4 samples, 0.12%)</title><rect x="650.2" y="243.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="653.2" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (8 samples, 0.23%)</title><rect x="651.6" y="243.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="654.6" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.06%)</title><rect x="651.9" y="227.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="654.9" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.14%)</title><rect x="652.6" y="227.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="655.6" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.09%)</title><rect x="653.3" y="211.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="656.3" y="222.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack(unsigned char*) (1 samples, 0.03%)</title><rect x="654.3" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="657.3" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (27 samples, 0.78%)</title><rect x="654.6" y="259.0" width="9.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="657.6" y="270.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.06%)</title><rect x="658.4" y="243.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="661.4" y="254.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="658.7" y="227.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="661.7" y="238.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.09%)</title><rect x="659.1" y="243.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="662.1" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.06%)</title><rect x="659.4" y="227.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="662.4" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="660.1" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="663.1" y="254.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (6 samples, 0.17%)</title><rect x="660.4" y="243.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="663.4" y="254.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (4 samples, 0.12%)</title><rect x="661.1" y="227.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="664.1" y="238.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (2 samples, 0.06%)</title><rect x="662.5" y="243.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="665.5" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.06%)</title><rect x="663.1" y="243.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="666.1" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="663.8" y="259.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="666.8" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (12 samples, 0.35%)</title><rect x="664.2" y="259.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="667.2" y="270.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (6 samples, 0.17%)</title><rect x="664.8" y="243.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="667.8" y="254.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (2 samples, 0.06%)</title><rect x="666.9" y="243.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="669.9" y="254.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.06%)</title><rect x="667.6" y="243.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="670.6" y="254.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="668.2" y="259.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="671.2" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="668.6" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="671.6" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="668.6" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="671.6" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="668.6" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="671.6" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="668.6" y="227.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="671.6" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="668.6" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="671.6" y="222.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.03%)</title><rect x="668.6" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="671.6" y="206.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="668.6" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="671.6" y="190.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="668.6" y="163.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="671.6" y="174.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_and_type_ref_index_at(int, bool) (1 samples, 0.03%)</title><rect x="668.6" y="147.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="671.6" y="158.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (2 samples, 0.06%)</title><rect x="668.9" y="275.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="671.9" y="286.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="669.6" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="672.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.20%)</title><rect x="669.9" y="275.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="672.9" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="671.6" y="259.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="674.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.get (248 samples, 7.15%)</title><rect x="672.3" y="275.0" width="84.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.3" y="286.0">ru/mail/po..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (11 samples, 0.32%)</title><rect x="673.0" y="259.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="676.0" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/473581465.invoke (11 samples, 0.32%)</title><rect x="673.0" y="243.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="676.0" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.26%)</title><rect x="673.0" y="227.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="676.0" y="238.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.03%)</title><rect x="673.0" y="211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="676.0" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="673.0" y="195.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="676.0" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.03%)</title><rect x="673.3" y="211.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="676.3" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.03%)</title><rect x="673.3" y="195.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="676.3" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.14%)</title><rect x="673.7" y="211.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="676.7" y="222.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="675.4" y="211.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="678.4" y="222.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1 samples, 0.03%)</title><rect x="675.7" y="211.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="678.7" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/257895351.invoke (2 samples, 0.06%)</title><rect x="676.1" y="227.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="679.1" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.06%)</title><rect x="676.1" y="211.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="679.1" y="222.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.06%)</title><rect x="676.1" y="195.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="679.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.06%)</title><rect x="676.1" y="179.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="679.1" y="190.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="676.1" y="163.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="679.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (29 samples, 0.84%)</title><rect x="676.7" y="259.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.7" y="270.0"></text>
</g>
<g>
<title>java/lang/Class.getName (5 samples, 0.14%)</title><rect x="676.7" y="243.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="679.7" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.12%)</title><rect x="677.1" y="227.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="680.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (24 samples, 0.69%)</title><rect x="678.5" y="243.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="681.5" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 0.58%)</title><rect x="679.8" y="227.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="682.8" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.12%)</title><rect x="681.5" y="211.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="684.5" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.12%)</title><rect x="681.5" y="195.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="684.5" y="206.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="682.5" y="179.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="685.5" y="190.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (7 samples, 0.20%)</title><rect x="682.9" y="211.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (6 samples, 0.17%)</title><rect x="683.2" y="195.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="686.2" y="206.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (4 samples, 0.12%)</title><rect x="685.3" y="211.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.3" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="686.3" y="195.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="689.3" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (184 samples, 5.31%)</title><rect x="686.6" y="259.0" width="62.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="689.6" y="270.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (184 samples, 5.31%)</title><rect x="686.6" y="243.0" width="62.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="689.6" y="254.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (181 samples, 5.22%)</title><rect x="687.6" y="227.0" width="61.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="690.6" y="238.0">Java_o..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="689.3" y="211.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="692.3" y="222.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.03%)</title><rect x="689.7" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="692.7" y="222.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="690.0" y="211.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="693.0" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.23%)</title><rect x="690.4" y="211.0" width="2.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="693.4" y="222.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.03%)</title><rect x="693.1" y="211.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="696.1" y="222.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.03%)</title><rect x="693.4" y="211.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="696.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.09%)</title><rect x="693.8" y="211.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="696.8" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (160 samples, 4.61%)</title><rect x="694.8" y="211.0" width="54.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="697.8" y="222.0">rocks..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.06%)</title><rect x="695.8" y="195.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="698.8" y="206.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="696.5" y="195.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="699.5" y="206.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.03%)</title><rect x="696.8" y="195.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="699.8" y="206.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="697.2" y="195.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="700.2" y="206.0"></text>
</g>
<g>
<title>free (2 samples, 0.06%)</title><rect x="697.5" y="195.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="700.5" y="206.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="697.9" y="179.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="700.9" y="190.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.06%)</title><rect x="698.2" y="195.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="701.2" y="206.0"></text>
</g>
<g>
<title>__ulock_wait (1 samples, 0.03%)</title><rect x="698.5" y="179.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="701.5" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.14%)</title><rect x="698.9" y="195.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="701.9" y="206.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="699.2" y="179.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="702.2" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.09%)</title><rect x="699.6" y="179.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="702.6" y="190.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.03%)</title><rect x="699.6" y="163.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.6" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="699.9" y="163.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="702.9" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="699.9" y="147.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="702.9" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="700.2" y="163.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="703.2" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.20%)</title><rect x="700.6" y="195.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="703.6" y="206.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.03%)</title><rect x="701.6" y="179.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="704.6" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.09%)</title><rect x="701.9" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="704.9" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="701.9" y="163.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="704.9" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.06%)</title><rect x="702.3" y="163.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="705.3" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="702.6" y="147.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="705.6" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="702.6" y="131.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="705.6" y="142.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="702.6" y="115.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="705.6" y="126.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="702.6" y="99.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="705.6" y="110.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.20%)</title><rect x="703.0" y="195.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="706.0" y="206.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.20%)</title><rect x="703.0" y="179.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="706.0" y="190.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="703.0" y="163.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="706.0" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.17%)</title><rect x="703.3" y="163.0" width="2.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="706.3" y="174.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.06%)</title><rect x="703.6" y="147.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="706.6" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.09%)</title><rect x="704.3" y="147.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="707.3" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.06%)</title><rect x="704.7" y="131.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="707.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (127 samples, 3.66%)</title><rect x="705.3" y="195.0" width="43.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="708.3" y="206.0">rock..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (124 samples, 3.58%)</title><rect x="705.7" y="179.0" width="42.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="708.7" y="190.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (123 samples, 3.55%)</title><rect x="706.0" y="163.0" width="41.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="709.0" y="174.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (116 samples, 3.35%)</title><rect x="706.0" y="147.0" width="39.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="709.0" y="158.0">roc..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="710.8" y="131.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="713.8" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.12%)</title><rect x="711.1" y="131.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="714.1" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="712.5" y="131.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="715.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.03%)</title><rect x="712.8" y="131.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="715.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="712.8" y="115.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="715.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.06%)</title><rect x="713.2" y="131.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="716.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.03%)</title><rect x="713.2" y="115.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="716.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="713.5" y="115.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="716.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="713.5" y="99.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="716.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="713.8" y="131.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="716.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (71 samples, 2.05%)</title><rect x="714.2" y="131.0" width="24.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="717.2" y="142.0">r..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="715.5" y="115.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="718.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (66 samples, 1.90%)</title><rect x="715.9" y="115.0" width="22.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="718.9" y="126.0">r..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (26 samples, 0.75%)</title><rect x="727.5" y="99.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="730.5" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.06%)</title><rect x="730.2" y="83.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="733.2" y="94.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="730.9" y="83.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="733.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (15 samples, 0.43%)</title><rect x="731.2" y="83.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="734.2" y="94.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.17%)</title><rect x="734.3" y="67.0" width="2.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="737.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.09%)</title><rect x="736.3" y="99.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="739.3" y="110.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.09%)</title><rect x="737.3" y="99.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.06%)</title><rect x="738.4" y="131.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="741.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="739.0" y="131.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="740.1" y="131.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="743.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (14 samples, 0.40%)</title><rect x="740.4" y="131.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="743.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (4 samples, 0.12%)</title><rect x="742.8" y="115.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="745.8" y="126.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.09%)</title><rect x="743.1" y="99.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="746.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="744.1" y="115.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="747.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.06%)</title><rect x="744.5" y="115.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="747.5" y="126.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="745.2" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="748.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.06%)</title><rect x="745.5" y="147.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="748.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="746.2" y="147.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="749.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.06%)</title><rect x="746.5" y="147.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="749.5" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.06%)</title><rect x="747.2" y="147.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="750.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2 samples, 0.06%)</title><rect x="747.9" y="179.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="750.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.06%)</title><rect x="748.6" y="195.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="751.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (19 samples, 0.55%)</title><rect x="749.2" y="259.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (5 samples, 0.14%)</title><rect x="749.9" y="243.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.9" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.14%)</title><rect x="749.9" y="227.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="752.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (12 samples, 0.35%)</title><rect x="751.6" y="243.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="754.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8 samples, 0.23%)</title><rect x="751.6" y="227.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="754.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.23%)</title><rect x="751.6" y="211.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="754.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.23%)</title><rect x="751.6" y="195.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="754.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="753.0" y="179.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="756.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.06%)</title><rect x="753.7" y="163.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="756.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.06%)</title><rect x="753.7" y="147.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="756.7" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="754.0" y="131.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="757.0" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="754.3" y="227.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="757.3" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.09%)</title><rect x="754.7" y="227.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="757.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/NoSuchElementExceptionLite.&lt;init&gt; (3 samples, 0.09%)</title><rect x="755.7" y="259.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="758.7" y="270.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (2 samples, 0.06%)</title><rect x="756.1" y="243.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.1" y="254.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (2 samples, 0.06%)</title><rect x="756.1" y="227.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="759.1" y="238.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (2 samples, 0.06%)</title><rect x="756.1" y="211.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.1" y="222.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.06%)</title><rect x="756.1" y="195.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="759.1" y="206.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (1 samples, 0.03%)</title><rect x="756.7" y="403.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="759.7" y="414.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (4 samples, 0.12%)</title><rect x="757.1" y="403.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.1" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Socket.acceptNonBlocking (4 samples, 0.12%)</title><rect x="757.1" y="387.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="760.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (4 samples, 0.12%)</title><rect x="757.1" y="371.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.1" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (4 samples, 0.12%)</title><rect x="757.1" y="355.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (4 samples, 0.12%)</title><rect x="757.1" y="339.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="760.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (3 samples, 0.09%)</title><rect x="757.4" y="323.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept0 (3 samples, 0.09%)</title><rect x="757.4" y="307.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.4" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_ServerSocketChannelImpl_accept0 (3 samples, 0.09%)</title><rect x="757.4" y="291.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="760.4" y="302.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (2 samples, 0.06%)</title><rect x="757.4" y="275.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="760.4" y="286.0"></text>
</g>
<g>
<title>jni_NewObject (2 samples, 0.06%)</title><rect x="757.4" y="259.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="760.4" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="757.4" y="243.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="760.4" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="757.4" y="227.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="760.4" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="757.4" y="211.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="760.4" y="222.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.06%)</title><rect x="757.4" y="195.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="760.4" y="206.0"></text>
</g>
<g>
<title>jni_SetObjectArrayElement (1 samples, 0.03%)</title><rect x="758.1" y="275.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="761.1" y="286.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.03%)</title><rect x="758.1" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="761.1" y="270.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,241 samples, 35.79%)</title><rect x="758.4" y="403.0" width="422.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="761.4" y="414.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (11 samples, 0.32%)</title><rect x="759.5" y="387.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.5" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.29%)</title><rect x="759.8" y="371.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="762.8" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (10 samples, 0.29%)</title><rect x="759.8" y="355.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="762.8" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.14%)</title><rect x="760.1" y="339.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="763.1" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (4 samples, 0.12%)</title><rect x="761.8" y="339.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.8" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.12%)</title><rect x="761.8" y="323.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="764.8" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.12%)</title><rect x="761.8" y="307.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="764.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (694 samples, 20.02%)</title><rect x="763.2" y="387.0" width="236.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.2" y="398.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.12%)</title><rect x="763.5" y="371.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="766.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.09%)</title><rect x="763.9" y="355.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="766.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.09%)</title><rect x="763.9" y="339.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.9" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (23 samples, 0.66%)</title><rect x="764.9" y="371.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="767.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (20 samples, 0.58%)</title><rect x="765.9" y="355.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="768.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (20 samples, 0.58%)</title><rect x="765.9" y="339.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.9" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (10 samples, 0.29%)</title><rect x="765.9" y="323.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.9" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (10 samples, 0.29%)</title><rect x="765.9" y="307.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.9" y="318.0"></text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.06%)</title><rect x="766.6" y="291.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="769.6" y="302.0"></text>
</g>
<g>
<title>_res (4 samples, 0.12%)</title><rect x="767.3" y="291.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="770.3" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.06%)</title><rect x="768.6" y="291.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="771.6" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (10 samples, 0.29%)</title><rect x="769.3" y="323.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="772.3" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (3 samples, 0.09%)</title><rect x="771.7" y="307.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.7" y="318.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.03%)</title><rect x="772.4" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (666 samples, 19.21%)</title><rect x="772.7" y="371.0" width="226.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="775.7" y="382.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (666 samples, 19.21%)</title><rect x="772.7" y="355.0" width="226.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="775.7" y="366.0">sun/nio/ch/SelectorImpl.lockAn..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (666 samples, 19.21%)</title><rect x="772.7" y="339.0" width="226.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.7" y="350.0">sun/nio/ch/KQueueSelectorImpl...</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (628 samples, 18.11%)</title><rect x="774.1" y="323.0" width="213.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="777.1" y="334.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.03%)</title><rect x="785.7" y="307.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="788.7" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (7 samples, 0.20%)</title><rect x="786.0" y="307.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="789.0" y="318.0"></text>
</g>
<g>
<title>kevent (586 samples, 16.90%)</title><rect x="788.4" y="307.0" width="199.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="791.4" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 0.23%)</title><rect x="987.8" y="323.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="990.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.03%)</title><rect x="988.5" y="307.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="991.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.14%)</title><rect x="988.9" y="307.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="991.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.14%)</title><rect x="988.9" y="291.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="991.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.14%)</title><rect x="988.9" y="275.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="991.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.14%)</title><rect x="988.9" y="259.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="991.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (9 samples, 0.26%)</title><rect x="990.6" y="323.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="993.6" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.09%)</title><rect x="992.3" y="307.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="995.3" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.inc (2 samples, 0.06%)</title><rect x="992.6" y="291.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="995.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.06%)</title><rect x="992.6" y="275.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="995.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="993.3" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="996.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (17 samples, 0.49%)</title><rect x="993.6" y="323.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="996.6" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.03%)</title><rect x="998.4" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1001.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (2 samples, 0.06%)</title><rect x="998.7" y="307.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1001.7" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (533 samples, 15.37%)</title><rect x="999.4" y="387.0" width="181.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1002.4" y="398.0">one/nio/net/Session.pro..</text>
</g>
<g>
<title>__cxx_global_var_init (3 samples, 0.09%)</title><rect x="1001.4" y="371.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1004.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (521 samples, 15.03%)</title><rect x="1002.5" y="371.0" width="177.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1005.5" y="382.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleSocketClosed (1 samples, 0.03%)</title><rect x="1002.8" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1005.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (1 samples, 0.03%)</title><rect x="1002.8" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1005.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (1 samples, 0.03%)</title><rect x="1002.8" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1005.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.close (1 samples, 0.03%)</title><rect x="1002.8" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1005.8" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.close (1 samples, 0.03%)</title><rect x="1002.8" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1005.8" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.implCloseChannel (1 samples, 0.03%)</title><rect x="1002.8" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1005.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implCloseSelectableChannel (1 samples, 0.03%)</title><rect x="1002.8" y="259.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1005.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getSocketOption (1 samples, 0.03%)</title><rect x="1002.8" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1005.8" y="254.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1002.8" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.8" y="238.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (1 samples, 0.03%)</title><rect x="1002.8" y="211.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.8" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (343 samples, 9.89%)</title><rect x="1003.1" y="355.0" width="116.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1006.1" y="366.0">one/nio/http/H..</text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="1005.5" y="339.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1008.5" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="1005.5" y="323.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.5" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="1005.5" y="307.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.5" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1005.5" y="291.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1008.5" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1005.5" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1008.5" y="286.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="1005.5" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.5" y="270.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="1005.5" y="243.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1008.5" y="254.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 0.03%)</title><rect x="1005.5" y="227.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1008.5" y="238.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.03%)</title><rect x="1005.5" y="211.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.06%)</title><rect x="1005.9" y="339.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1008.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (298 samples, 8.60%)</title><rect x="1006.6" y="339.0" width="101.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1009.6" y="350.0">one/nio/http..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1008.9" y="323.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1011.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (290 samples, 8.36%)</title><rect x="1009.3" y="323.0" width="98.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1012.3" y="334.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.03%)</title><rect x="1010.3" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1013.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (12 samples, 0.35%)</title><rect x="1010.6" y="307.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1013.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.32%)</title><rect x="1011.0" y="291.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1014.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.26%)</title><rect x="1011.0" y="275.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1014.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.06%)</title><rect x="1012.0" y="259.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1015.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="1012.7" y="259.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1015.7" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.06%)</title><rect x="1014.0" y="275.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1017.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.06%)</title><rect x="1014.0" y="259.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1017.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (7 samples, 0.20%)</title><rect x="1014.7" y="307.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1017.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.20%)</title><rect x="1014.7" y="291.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1017.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="1014.7" y="275.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1017.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.06%)</title><rect x="1015.1" y="275.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1018.1" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.12%)</title><rect x="1015.7" y="275.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1018.7" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.12%)</title><rect x="1015.7" y="259.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1018.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (267 samples, 7.70%)</title><rect x="1017.1" y="307.0" width="90.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1020.1" y="318.0">ru/mail/po..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.06%)</title><rect x="1017.1" y="291.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1020.1" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.06%)</title><rect x="1017.1" y="275.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1020.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.06%)</title><rect x="1017.8" y="291.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1018.1" y="275.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1021.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1018.1" y="259.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1021.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (263 samples, 7.59%)</title><rect x="1018.5" y="291.0" width="89.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1021.5" y="302.0">ru/mail/po..</text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.06%)</title><rect x="1019.1" y="275.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1022.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="1019.5" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1022.5" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="1019.8" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1022.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="1019.8" y="259.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1022.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$73/343578854.get$Lambda (1 samples, 0.03%)</title><rect x="1019.8" y="243.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1022.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.09%)</title><rect x="1020.2" y="275.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1023.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.09%)</title><rect x="1020.2" y="259.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1023.2" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="1020.2" y="243.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1023.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="1020.2" y="227.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1023.2" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="1020.2" y="211.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1023.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.09%)</title><rect x="1020.2" y="195.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1023.2" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.06%)</title><rect x="1020.5" y="179.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1023.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (23 samples, 0.66%)</title><rect x="1021.2" y="275.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1022.5" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1025.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (7 samples, 0.20%)</title><rect x="1022.9" y="259.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1025.9" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.17%)</title><rect x="1023.2" y="243.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1026.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.26%)</title><rect x="1025.3" y="259.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1028.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.09%)</title><rect x="1025.6" y="243.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1028.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.09%)</title><rect x="1025.6" y="227.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.09%)</title><rect x="1025.6" y="211.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1028.6" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.14%)</title><rect x="1026.6" y="243.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1029.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.14%)</title><rect x="1026.6" y="227.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1029.6" y="238.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="1027.0" y="211.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1030.0" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1027.3" y="211.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1030.3" y="222.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="1027.7" y="211.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1030.7" y="222.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.06%)</title><rect x="1028.3" y="259.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1031.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1028.7" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1028.7" y="227.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1031.7" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="1028.7" y="211.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1031.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (231 samples, 6.66%)</title><rect x="1029.0" y="275.0" width="78.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1032.0" y="286.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (231 samples, 6.66%)</title><rect x="1029.0" y="259.0" width="78.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1032.0" y="270.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (229 samples, 6.61%)</title><rect x="1029.7" y="243.0" width="77.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1032.7" y="254.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (2 samples, 0.06%)</title><rect x="1029.7" y="227.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1032.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (213 samples, 6.14%)</title><rect x="1030.4" y="227.0" width="72.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.4" y="238.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.09%)</title><rect x="1030.4" y="211.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1033.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.09%)</title><rect x="1030.4" y="195.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1033.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.06%)</title><rect x="1030.7" y="179.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1033.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.06%)</title><rect x="1030.7" y="163.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1033.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.06%)</title><rect x="1030.7" y="147.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1033.7" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.06%)</title><rect x="1030.7" y="131.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1033.7" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.06%)</title><rect x="1030.7" y="115.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1033.7" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.14%)</title><rect x="1031.4" y="211.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.14%)</title><rect x="1031.4" y="195.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.06%)</title><rect x="1032.4" y="179.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1035.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.06%)</title><rect x="1032.4" y="163.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1035.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="1032.4" y="147.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1035.4" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="1032.4" y="131.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1035.4" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="1032.4" y="115.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1035.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="1032.8" y="147.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1035.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (205 samples, 5.91%)</title><rect x="1033.1" y="211.0" width="69.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1036.1" y="222.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (205 samples, 5.91%)</title><rect x="1033.1" y="195.0" width="69.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1036.1" y="206.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (203 samples, 5.86%)</title><rect x="1033.8" y="179.0" width="69.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1036.8" y="190.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (201 samples, 5.80%)</title><rect x="1034.5" y="163.0" width="68.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1037.5" y="174.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (201 samples, 5.80%)</title><rect x="1034.5" y="147.0" width="68.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1037.5" y="158.0">jdk/int..</text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="1037.5" y="131.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1040.5" y="142.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="1037.9" y="131.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.9" y="142.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.06%)</title><rect x="1038.2" y="131.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1041.2" y="142.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="1038.9" y="131.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1041.9" y="142.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="1039.2" y="131.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.2" y="142.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1039.6" y="131.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1042.6" y="142.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="1039.9" y="131.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1042.9" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (183 samples, 5.28%)</title><rect x="1040.2" y="131.0" width="62.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1043.2" y="142.0">Unsafe..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.03%)</title><rect x="1041.3" y="115.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1044.3" y="126.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="1041.6" y="115.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.6" y="126.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.09%)</title><rect x="1041.9" y="115.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1044.9" y="126.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.09%)</title><rect x="1041.9" y="99.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1044.9" y="110.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.09%)</title><rect x="1041.9" y="83.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1044.9" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.06%)</title><rect x="1041.9" y="67.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1044.9" y="78.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="1041.9" y="51.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.9" y="62.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="1042.3" y="51.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.3" y="62.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1042.6" y="67.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1045.6" y="78.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1043.0" y="115.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.0" y="126.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (2 samples, 0.06%)</title><rect x="1043.3" y="115.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1046.3" y="126.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="1044.0" y="115.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.0" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.03%)</title><rect x="1044.3" y="115.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1047.3" y="126.0"></text>
</g>
<g>
<title>Thread::current() (4 samples, 0.12%)</title><rect x="1044.7" y="115.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.7" y="126.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="1044.7" y="99.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.7" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.09%)</title><rect x="1045.0" y="99.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1048.0" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.09%)</title><rect x="1046.0" y="115.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1049.0" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (2 samples, 0.06%)</title><rect x="1046.0" y="99.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.0" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="1046.4" y="83.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.4" y="94.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="1046.7" y="99.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.7" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1046.7" y="83.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.7" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1046.7" y="67.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.7" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1046.7" y="51.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.7" y="62.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (8 samples, 0.23%)</title><rect x="1047.1" y="115.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.1" y="126.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.06%)</title><rect x="1047.1" y="99.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.1" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.12%)</title><rect x="1047.7" y="99.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1050.7" y="110.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.03%)</title><rect x="1047.7" y="83.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1050.7" y="94.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.03%)</title><rect x="1047.7" y="67.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1050.7" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.09%)</title><rect x="1048.1" y="83.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.1" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.09%)</title><rect x="1048.1" y="67.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1051.1" y="78.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.06%)</title><rect x="1048.1" y="51.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.1" y="62.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1048.8" y="51.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.8" y="62.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1048.8" y="35.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.8" y="46.0"></text>
</g>
<g>
<title>SafepointMechanism::should_block(Thread*) (2 samples, 0.06%)</title><rect x="1049.1" y="99.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.1" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (2 samples, 0.06%)</title><rect x="1049.1" y="83.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.1" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1049.8" y="115.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.8" y="126.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.03%)</title><rect x="1049.8" y="99.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1052.8" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.17%)</title><rect x="1050.1" y="115.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.1" y="126.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="1051.5" y="99.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1054.5" y="110.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="1051.8" y="99.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.8" y="110.0"></text>
</g>
<g>
<title>__psynch_cvsignal (139 samples, 4.01%)</title><rect x="1052.2" y="115.0" width="47.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1055.2" y="126.0">__ps..</text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.03%)</title><rect x="1099.5" y="115.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1102.5" y="126.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.03%)</title><rect x="1099.8" y="115.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1102.8" y="126.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="1100.1" y="115.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.1" y="126.0"></text>
</g>
<g>
<title>pthread_cond_signal (4 samples, 0.12%)</title><rect x="1100.5" y="115.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1103.5" y="126.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="1101.5" y="99.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1104.5" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="1101.8" y="115.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1104.8" y="126.0"></text>
</g>
<g>
<title>os::verify_stack_alignment() (1 samples, 0.03%)</title><rect x="1102.5" y="131.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.17%)</title><rect x="1102.9" y="227.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1105.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.17%)</title><rect x="1102.9" y="211.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1105.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="1102.9" y="195.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1105.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.14%)</title><rect x="1103.2" y="195.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1106.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.14%)</title><rect x="1103.2" y="179.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1106.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="1104.6" y="163.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1107.6" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="1104.6" y="147.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1107.6" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="1104.6" y="131.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1107.6" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.23%)</title><rect x="1104.9" y="227.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1107.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.23%)</title><rect x="1104.9" y="211.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1107.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.23%)</title><rect x="1104.9" y="195.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1107.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/NodeDescriptor.getNodeIdByKey (1 samples, 0.03%)</title><rect x="1107.6" y="275.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1110.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21 samples, 0.61%)</title><rect x="1108.0" y="339.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1111.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.17%)</title><rect x="1108.3" y="323.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1111.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.09%)</title><rect x="1109.0" y="307.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1112.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.09%)</title><rect x="1109.0" y="291.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.09%)</title><rect x="1109.0" y="275.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1112.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="1110.0" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1113.0" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.37%)</title><rect x="1110.4" y="323.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1113.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.37%)</title><rect x="1110.4" y="307.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1113.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1114.1" y="291.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1117.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1114.1" y="275.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1117.1" y="286.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.03%)</title><rect x="1114.1" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1117.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.03%)</title><rect x="1114.4" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1117.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.03%)</title><rect x="1114.4" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1117.4" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="1114.8" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1117.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (9 samples, 0.26%)</title><rect x="1115.1" y="339.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1118.1" y="350.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (9 samples, 0.26%)</title><rect x="1115.1" y="323.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1118.1" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (9 samples, 0.26%)</title><rect x="1115.1" y="307.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1118.1" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.digit (4 samples, 0.12%)</title><rect x="1115.8" y="291.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1118.8" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.digit (4 samples, 0.12%)</title><rect x="1115.8" y="275.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1118.8" y="286.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (4 samples, 0.12%)</title><rect x="1115.8" y="259.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1118.8" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.09%)</title><rect x="1116.1" y="243.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1119.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.06%)</title><rect x="1117.2" y="291.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1120.2" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.06%)</title><rect x="1117.2" y="275.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1120.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1117.8" y="291.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1120.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="1118.2" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1121.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.12%)</title><rect x="1118.5" y="339.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1121.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.12%)</title><rect x="1118.5" y="323.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1121.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1119.5" y="307.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1122.5" y="318.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.03%)</title><rect x="1119.5" y="291.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1122.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.03%)</title><rect x="1119.5" y="275.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1122.5" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (176 samples, 5.08%)</title><rect x="1119.9" y="355.0" width="59.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1122.9" y="366.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (175 samples, 5.05%)</title><rect x="1120.2" y="339.0" width="59.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1123.2" y="350.0">one/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.20%)</title><rect x="1120.6" y="323.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1123.6" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="1120.6" y="307.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1123.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="1120.6" y="291.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1123.6" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="1121.2" y="275.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1124.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.14%)</title><rect x="1121.2" y="259.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1124.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1122.6" y="243.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1125.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (167 samples, 4.82%)</title><rect x="1123.0" y="323.0" width="56.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1126.0" y="334.0">sun/ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (15 samples, 0.43%)</title><rect x="1123.0" y="307.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (15 samples, 0.43%)</title><rect x="1123.0" y="291.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1126.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.09%)</title><rect x="1124.0" y="275.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1124.3" y="259.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1127.3" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="1124.3" y="243.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1127.3" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.03%)</title><rect x="1124.3" y="227.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1127.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.03%)</title><rect x="1124.7" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1127.7" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="1124.7" y="243.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.26%)</title><rect x="1125.0" y="275.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.26%)</title><rect x="1125.0" y="259.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1128.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.09%)</title><rect x="1125.3" y="243.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1128.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="1126.4" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1129.4" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="1126.4" y="227.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1129.4" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.03%)</title><rect x="1126.4" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1129.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="1126.7" y="243.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1129.7" y="254.0"></text>
</g>
<g>
<title>jlong_arraycopy (1 samples, 0.03%)</title><rect x="1127.0" y="243.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1130.0" y="254.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="1127.4" y="243.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1130.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (152 samples, 4.38%)</title><rect x="1128.1" y="307.0" width="51.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1131.1" y="318.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (152 samples, 4.38%)</title><rect x="1128.1" y="291.0" width="51.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1131.1" y="302.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (152 samples, 4.38%)</title><rect x="1128.1" y="275.0" width="51.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1131.1" y="286.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (150 samples, 4.33%)</title><rect x="1128.7" y="259.0" width="51.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1131.7" y="270.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (150 samples, 4.33%)</title><rect x="1128.7" y="243.0" width="51.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1131.7" y="254.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.14%)</title><rect x="1131.8" y="227.0" width="1.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1134.8" y="238.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1133.2" y="211.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1136.2" y="222.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1133.5" y="227.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1136.5" y="238.0"></text>
</g>
<g>
<title>read (135 samples, 3.89%)</title><rect x="1133.8" y="227.0" width="46.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1136.8" y="238.0">read</text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.09%)</title><rect x="1179.8" y="371.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="382.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="1179.8" y="355.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1182.8" y="366.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="1180.1" y="339.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1183.1" y="350.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="1180.5" y="355.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1183.5" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.09%)</title><rect x="1180.8" y="403.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="414.0"></text>
</g>
<g>
<title>start_wqthread (2 samples, 0.06%)</title><rect x="1181.8" y="403.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1184.8" y="414.0"></text>
</g>
<g>
<title>_pthread_wqthread (2 samples, 0.06%)</title><rect x="1181.8" y="387.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1184.8" y="398.0"></text>
</g>
<g>
<title>_dispatch_kevent_worker_thread (2 samples, 0.06%)</title><rect x="1181.8" y="371.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1184.8" y="382.0"></text>
</g>
<g>
<title>_dispatch_lane_serial_drain (2 samples, 0.06%)</title><rect x="1181.8" y="355.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1184.8" y="366.0"></text>
</g>
<g>
<title>_dispatch_source_invoke (2 samples, 0.06%)</title><rect x="1181.8" y="339.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1184.8" y="350.0"></text>
</g>
<g>
<title>_dispatch_continuation_pop (2 samples, 0.06%)</title><rect x="1181.8" y="323.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1184.8" y="334.0"></text>
</g>
<g>
<title>_dispatch_client_callout (2 samples, 0.06%)</title><rect x="1181.8" y="307.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1184.8" y="318.0"></text>
</g>
<g>
<title>malloc_memory_event_handler (2 samples, 0.06%)</title><rect x="1181.8" y="291.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1184.8" y="302.0"></text>
</g>
<g>
<title>malloc_zone_pressure_relief (2 samples, 0.06%)</title><rect x="1181.8" y="275.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1184.8" y="286.0"></text>
</g>
<g>
<title>szone_pressure_relief (2 samples, 0.06%)</title><rect x="1181.8" y="259.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1184.8" y="270.0"></text>
</g>
<g>
<title>tiny_madvise_pressure_relief (2 samples, 0.06%)</title><rect x="1181.8" y="243.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1184.8" y="254.0"></text>
</g>
<g>
<title>tiny_free_detach_region (2 samples, 0.06%)</title><rect x="1181.8" y="227.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1184.8" y="238.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="1182.2" y="211.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1185.2" y="222.0"></text>
</g>
<g>
<title>thread_start (21 samples, 0.61%)</title><rect x="1182.5" y="403.0" width="7.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1185.5" y="414.0"></text>
</g>
<g>
<title>_pthread_start (21 samples, 0.61%)</title><rect x="1182.5" y="387.0" width="7.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1185.5" y="398.0"></text>
</g>
<g>
<title>_pthread_body (21 samples, 0.61%)</title><rect x="1182.5" y="371.0" width="7.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1185.5" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (21 samples, 0.61%)</title><rect x="1182.5" y="355.0" width="7.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1185.5" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (21 samples, 0.61%)</title><rect x="1182.5" y="339.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="350.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (5 samples, 0.14%)</title><rect x="1182.5" y="323.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (5 samples, 0.14%)</title><rect x="1182.5" y="307.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.03%)</title><rect x="1182.5" y="291.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1182.5" y="275.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="286.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1182.5" y="259.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="270.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="1182.5" y="243.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="254.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="1182.5" y="227.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="238.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (4 samples, 0.12%)</title><rect x="1182.9" y="291.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="302.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.12%)</title><rect x="1182.9" y="275.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="286.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.12%)</title><rect x="1182.9" y="259.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.12%)</title><rect x="1182.9" y="243.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.12%)</title><rect x="1182.9" y="227.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.12%)</title><rect x="1184.2" y="323.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="334.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.12%)</title><rect x="1184.2" y="307.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="318.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 0.09%)</title><rect x="1184.2" y="291.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="302.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.09%)</title><rect x="1184.2" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 0.09%)</title><rect x="1184.2" y="259.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="270.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (3 samples, 0.09%)</title><rect x="1184.2" y="243.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="254.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (3 samples, 0.09%)</title><rect x="1184.2" y="227.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="238.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.09%)</title><rect x="1184.2" y="211.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="222.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.09%)</title><rect x="1184.2" y="195.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="206.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.09%)</title><rect x="1184.2" y="179.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="190.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.06%)</title><rect x="1184.2" y="163.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="174.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1184.6" y="147.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.6" y="158.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead_with_size(oopDesc*, G1CMBitMap const*, unsigned long*) const (1 samples, 0.03%)</title><rect x="1184.9" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="174.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1185.2" y="291.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="302.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1185.2" y="275.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="286.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.03%)</title><rect x="1185.2" y="259.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="270.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.03%)</title><rect x="1185.2" y="243.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="254.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1185.2" y="227.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="238.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.03%)</title><rect x="1185.6" y="323.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.03%)</title><rect x="1185.6" y="307.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.6" y="318.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.03%)</title><rect x="1185.6" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.6" y="302.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.03%)</title><rect x="1185.6" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.6" y="286.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1185.6" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.6" y="270.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1185.6" y="243.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.6" y="254.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1185.6" y="227.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.6" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1185.6" y="211.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1188.6" y="222.0"></text>
</g>
<g>
<title>WatcherThread::run() (11 samples, 0.32%)</title><rect x="1185.9" y="323.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="334.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.03%)</title><rect x="1185.9" y="307.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="318.0"></text>
</g>
<g>
<title>StatSampler::collect_sample() (1 samples, 0.03%)</title><rect x="1185.9" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="302.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.03%)</title><rect x="1185.9" y="275.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="286.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="1185.9" y="259.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="270.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (10 samples, 0.29%)</title><rect x="1186.3" y="307.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (10 samples, 0.29%)</title><rect x="1186.3" y="291.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.3" y="302.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 0.26%)</title><rect x="1186.6" y="275.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 0.23%)</title><rect x="1186.9" y="259.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="270.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.03%)</title><rect x="1186.9" y="243.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1189.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.20%)</title><rect x="1187.3" y="243.0" width="2.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1190.3" y="254.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="1189.7" y="403.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1192.7" y="414.0"></text>
</g>
</g>
</svg>
