<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="501"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="501"> </text>
<g id="frames">
<g>
<title>all (5,174 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="478.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (20 samples, 0.39%)</title><rect x="10.5" y="451.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.5" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (17 samples, 0.33%)</title><rect x="10.9" y="435.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.9" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.08%)</title><rect x="11.1" y="419.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.1" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="11.4" y="403.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.4" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="11.6" y="387.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="14.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="12.1" y="419.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="15.1" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.19%)</title><rect x="12.5" y="419.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.5" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (6 samples, 0.12%)</title><rect x="13.4" y="403.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.4" y="414.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.08%)</title><rect x="15.0" y="451.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="18.0" y="462.0"></text>
</g>
<g>
<title>[unknown_Java] (13 samples, 0.25%)</title><rect x="16.2" y="451.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="19.2" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.08%)</title><rect x="18.2" y="435.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.2" y="446.0"></text>
</g>
<g>
<title>_res (4 samples, 0.08%)</title><rect x="18.2" y="419.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="21.2" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,993 samples, 77.17%)</title><rect x="19.1" y="451.0" width="910.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.1" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,993 samples, 77.17%)</title><rect x="19.1" y="435.0" width="910.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.1" y="446.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,993 samples, 77.17%)</title><rect x="19.1" y="419.0" width="910.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.1" y="430.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.06%)</title><rect x="19.1" y="403.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.06%)</title><rect x="19.1" y="387.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (937 samples, 18.11%)</title><rect x="19.8" y="403.0" width="213.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.8" y="414.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (931 samples, 17.99%)</title><rect x="20.5" y="387.0" width="212.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.5" y="398.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (843 samples, 16.29%)</title><rect x="21.2" y="371.0" width="192.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.2" y="382.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (8 samples, 0.15%)</title><rect x="21.2" y="355.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (5 samples, 0.10%)</title><rect x="23.0" y="355.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.10%)</title><rect x="24.1" y="355.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="24.4" y="339.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.04%)</title><rect x="24.4" y="323.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title><rect x="24.4" y="307.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.4" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.04%)</title><rect x="24.4" y="291.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="27.4" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.04%)</title><rect x="24.4" y="275.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="27.4" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="24.4" y="259.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="27.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.12%)</title><rect x="25.3" y="355.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.12%)</title><rect x="25.3" y="339.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.06%)</title><rect x="25.3" y="323.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.06%)</title><rect x="25.3" y="307.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.3" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.06%)</title><rect x="25.3" y="291.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="28.3" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.06%)</title><rect x="25.3" y="275.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="28.3" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="25.5" y="259.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="28.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.06%)</title><rect x="26.0" y="323.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (818 samples, 15.81%)</title><rect x="26.9" y="355.0" width="186.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.9" y="366.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (818 samples, 15.81%)</title><rect x="26.9" y="339.0" width="186.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.9" y="350.0">jdk/internal/misc/Unsafe..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="31.4" y="323.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="34.4" y="334.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (2 samples, 0.04%)</title><rect x="32.6" y="323.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="35.6" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (787 samples, 15.21%)</title><rect x="33.3" y="323.0" width="179.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="36.3" y="334.0">Unsafe_Park(JNIEnv_*, _..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.06%)</title><rect x="33.7" y="307.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="36.7" y="318.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.06%)</title><rect x="34.9" y="307.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="37.9" y="318.0"></text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.04%)</title><rect x="35.5" y="307.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="38.5" y="318.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.04%)</title><rect x="36.0" y="307.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="39.0" y="318.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.10%)</title><rect x="36.5" y="307.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="39.5" y="318.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (4 samples, 0.08%)</title><rect x="36.7" y="291.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="39.7" y="302.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.08%)</title><rect x="36.7" y="275.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="39.7" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (4 samples, 0.08%)</title><rect x="36.7" y="259.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="39.7" y="270.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="36.9" y="243.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="39.9" y="254.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="37.6" y="307.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="40.6" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (739 samples, 14.28%)</title><rect x="39.2" y="307.0" width="168.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="42.2" y="318.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.06%)</title><rect x="40.6" y="291.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="43.6" y="302.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.17%)</title><rect x="41.2" y="291.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="44.2" y="302.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.06%)</title><rect x="42.4" y="275.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="45.4" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (701 samples, 13.55%)</title><rect x="43.3" y="291.0" width="159.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="46.3" y="302.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (9 samples, 0.17%)</title><rect x="203.2" y="291.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="206.2" y="302.0"></text>
</g>
<g>
<title>_pthread_testcancel (6 samples, 0.12%)</title><rect x="205.2" y="291.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="208.2" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.08%)</title><rect x="206.8" y="291.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="209.8" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.10%)</title><rect x="208.4" y="307.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="211.4" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.08%)</title><rect x="208.6" y="291.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="211.6" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.06%)</title><rect x="208.9" y="275.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="211.9" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.06%)</title><rect x="208.9" y="259.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="211.9" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.12%)</title><rect x="209.6" y="307.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="212.6" y="318.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.04%)</title><rect x="211.2" y="307.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="214.2" y="318.0"></text>
</g>
<g>
<title>pthread_cond_wait (3 samples, 0.06%)</title><rect x="211.6" y="307.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="214.6" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="212.3" y="307.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="215.3" y="318.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="212.7" y="323.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="215.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (18 samples, 0.35%)</title><rect x="213.4" y="371.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (18 samples, 0.35%)</title><rect x="213.4" y="355.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (13 samples, 0.25%)</title><rect x="213.4" y="339.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.15%)</title><rect x="213.4" y="323.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.14%)</title><rect x="213.7" y="307.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.12%)</title><rect x="213.9" y="291.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.9" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.12%)</title><rect x="213.9" y="275.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="216.9" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.10%)</title><rect x="213.9" y="259.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="216.9" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.10%)</title><rect x="213.9" y="243.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="216.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (5 samples, 0.10%)</title><rect x="215.3" y="323.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.10%)</title><rect x="216.4" y="339.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.10%)</title><rect x="216.4" y="323.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="216.9" y="307.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (67 samples, 1.29%)</title><rect x="217.5" y="371.0" width="15.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="220.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (67 samples, 1.29%)</title><rect x="217.5" y="355.0" width="15.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (67 samples, 1.29%)</title><rect x="217.5" y="339.0" width="15.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (67 samples, 1.29%)</title><rect x="217.5" y="323.0" width="15.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (67 samples, 1.29%)</title><rect x="217.5" y="307.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.5" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (60 samples, 1.16%)</title><rect x="218.7" y="291.0" width="13.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="221.7" y="302.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.04%)</title><rect x="219.1" y="275.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="222.1" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="219.8" y="275.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="222.8" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.04%)</title><rect x="220.5" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="223.5" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (46 samples, 0.89%)</title><rect x="221.0" y="275.0" width="10.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="224.0" y="286.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="231.7" y="275.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="234.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (3 samples, 0.06%)</title><rect x="232.8" y="387.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$76/2009892315.run (3,053 samples, 59.01%)</title><rect x="233.5" y="403.0" width="696.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.5" y="414.0">ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$76/2009892315.run</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$4 (3,053 samples, 59.01%)</title><rect x="233.5" y="387.0" width="696.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.5" y="398.0">ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (750 samples, 14.50%)</title><rect x="235.1" y="371.0" width="171.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.1" y="382.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.06%)</title><rect x="235.3" y="355.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="235.3" y="339.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.3" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="235.3" y="323.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (696 samples, 13.45%)</title><rect x="236.0" y="355.0" width="158.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.0" y="366.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (30 samples, 0.58%)</title><rect x="236.0" y="339.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.0" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.10%)</title><rect x="237.2" y="323.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="240.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (20 samples, 0.39%)</title><rect x="238.3" y="323.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (12 samples, 0.23%)</title><rect x="239.0" y="307.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.14%)</title><rect x="239.9" y="291.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (5 samples, 0.10%)</title><rect x="240.1" y="275.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.1" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.10%)</title><rect x="241.7" y="307.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.7" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.08%)</title><rect x="241.9" y="291.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (666 samples, 12.87%)</title><rect x="242.9" y="339.0" width="151.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.9" y="350.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session.write (666 samples, 12.87%)</title><rect x="242.9" y="323.0" width="151.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.9" y="334.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (665 samples, 12.85%)</title><rect x="243.1" y="307.0" width="151.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.1" y="318.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (665 samples, 12.85%)</title><rect x="243.1" y="291.0" width="151.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.1" y="302.0">one/nio/net/JavaSoc..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.19%)</title><rect x="243.1" y="275.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.17%)</title><rect x="243.3" y="259.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.3" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="243.5" y="243.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="246.5" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.04%)</title><rect x="243.5" y="227.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="246.5" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="243.5" y="211.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="246.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="244.0" y="243.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (655 samples, 12.66%)</title><rect x="245.4" y="275.0" width="149.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.4" y="286.0">sun/nio/ch/SocketCh..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="245.4" y="259.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="245.4" y="243.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="245.4" y="227.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="245.4" y="211.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (652 samples, 12.60%)</title><rect x="246.0" y="259.0" width="148.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="270.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (652 samples, 12.60%)</title><rect x="246.0" y="243.0" width="148.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.0" y="254.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (620 samples, 11.98%)</title><rect x="246.3" y="227.0" width="141.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.3" y="238.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (620 samples, 11.98%)</title><rect x="246.3" y="211.0" width="141.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.3" y="222.0">sun/nio/ch/SocketD..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (620 samples, 11.98%)</title><rect x="246.3" y="195.0" width="141.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="249.3" y="206.0">sun/nio/ch/FileDis..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (12 samples, 0.23%)</title><rect x="252.2" y="179.0" width="2.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="255.2" y="190.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="254.5" y="163.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="257.5" y="174.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.06%)</title><rect x="254.9" y="179.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="257.9" y="190.0"></text>
</g>
<g>
<title>write (579 samples, 11.19%)</title><rect x="255.6" y="179.0" width="132.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="258.6" y="190.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (31 samples, 0.60%)</title><rect x="387.7" y="227.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.7" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.12%)</title><rect x="389.5" y="211.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.5" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.08%)</title><rect x="390.0" y="195.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (17 samples, 0.33%)</title><rect x="390.9" y="211.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.9" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="394.1" y="195.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.1" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="394.1" y="179.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="394.1" y="163.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.1" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.04%)</title><rect x="394.1" y="147.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (50 samples, 0.97%)</title><rect x="394.7" y="355.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (6 samples, 0.12%)</title><rect x="395.9" y="339.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="398.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.coder (6 samples, 0.12%)</title><rect x="395.9" y="323.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="398.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (18 samples, 0.35%)</title><rect x="397.3" y="339.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="400.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="397.3" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="400.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="397.3" y="307.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.3" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (16 samples, 0.31%)</title><rect x="397.7" y="323.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.7" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (7 samples, 0.14%)</title><rect x="398.6" y="307.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.6" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.12%)</title><rect x="398.8" y="291.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.8" y="302.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.04%)</title><rect x="399.1" y="275.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.1" y="286.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.06%)</title><rect x="399.5" y="275.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.5" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="399.8" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.8" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="400.2" y="307.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="400.2" y="291.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="403.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (3 samples, 0.06%)</title><rect x="400.7" y="307.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (21 samples, 0.41%)</title><rect x="401.4" y="339.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (21 samples, 0.41%)</title><rect x="401.4" y="323.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.19%)</title><rect x="401.8" y="307.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.8" y="318.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="402.0" y="291.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="405.0" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.12%)</title><rect x="402.7" y="291.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="405.7" y="302.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.08%)</title><rect x="402.7" y="275.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="405.7" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.06%)</title><rect x="403.0" y="259.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="406.0" y="270.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="403.2" y="243.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="406.2" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="403.6" y="275.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="406.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.14%)</title><rect x="404.5" y="307.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="407.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$77/168123737.act (2,296 samples, 44.38%)</title><rect x="406.1" y="371.0" width="523.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.1" y="382.0">ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$77/168123737.act</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$2 (2,296 samples, 44.38%)</title><rect x="406.1" y="355.0" width="523.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.1" y="366.0">ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$2</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="406.1" y="339.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.upsert (2,292 samples, 44.30%)</title><rect x="407.1" y="339.0" width="522.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="410.1" y="350.0">ru/mail/polis/dao/lorismelik/RocksDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,271 samples, 43.89%)</title><rect x="407.1" y="323.0" width="517.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.1" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,271 samples, 43.89%)</title><rect x="407.1" y="307.0" width="517.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.1" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,249 samples, 43.47%)</title><rect x="412.1" y="291.0" width="512.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="415.1" y="302.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="413.2" y="275.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="416.2" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.10%)</title><rect x="413.7" y="275.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="416.7" y="286.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.04%)</title><rect x="415.3" y="275.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="418.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.06%)</title><rect x="415.7" y="275.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="418.7" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,230 samples, 43.10%)</title><rect x="416.4" y="275.0" width="508.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="419.4" y="286.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const..</text>
</g>
<g>
<title>free (5 samples, 0.10%)</title><rect x="418.5" y="259.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="421.5" y="270.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.06%)</title><rect x="418.9" y="243.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="421.9" y="254.0"></text>
</g>
<g>
<title>free_tiny (11 samples, 0.21%)</title><rect x="419.6" y="259.0" width="2.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="422.6" y="270.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (6 samples, 0.12%)</title><rect x="419.8" y="243.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="422.8" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.08%)</title><rect x="421.2" y="243.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="424.2" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.15%)</title><rect x="422.1" y="259.0" width="1.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="425.1" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.12%)</title><rect x="422.6" y="243.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="425.6" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.12%)</title><rect x="422.6" y="227.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="425.6" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.12%)</title><rect x="422.6" y="211.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="425.6" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.10%)</title><rect x="422.8" y="195.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="425.8" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.10%)</title><rect x="422.8" y="179.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="425.8" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.04%)</title><rect x="423.0" y="163.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="426.0" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (14 samples, 0.27%)</title><rect x="423.9" y="259.0" width="3.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="426.9" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.14%)</title><rect x="425.3" y="243.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="428.3" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.12%)</title><rect x="425.5" y="227.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="428.5" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.12%)</title><rect x="425.5" y="211.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="428.5" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.12%)</title><rect x="425.5" y="195.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="428.5" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.12%)</title><rect x="425.5" y="179.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="428.5" y="190.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (2 samples, 0.04%)</title><rect x="425.8" y="163.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="428.8" y="174.0"></text>
</g>
<g>
<title>operator new(unsigned long) (20 samples, 0.39%)</title><rect x="427.4" y="259.0" width="4.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="430.4" y="270.0"></text>
</g>
<g>
<title>malloc (20 samples, 0.39%)</title><rect x="427.4" y="243.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="430.4" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (19 samples, 0.37%)</title><rect x="427.6" y="227.0" width="4.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="430.6" y="238.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.06%)</title><rect x="428.3" y="211.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="431.3" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (13 samples, 0.25%)</title><rect x="429.0" y="211.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="432.0" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (13 samples, 0.25%)</title><rect x="429.0" y="195.0" width="2.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="432.0" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (7 samples, 0.14%)</title><rect x="430.3" y="179.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="433.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,160 samples, 41.75%)</title><rect x="431.9" y="259.0" width="492.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="434.9" y="270.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::ba..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="432.4" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="435.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,156 samples, 41.67%)</title><rect x="432.8" y="243.0" width="491.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="435.8" y="254.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFa..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,154 samples, 41.63%)</title><rect x="433.1" y="227.0" width="491.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="436.1" y="238.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamily..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (3 samples, 0.06%)</title><rect x="433.7" y="211.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="436.7" y="222.0"></text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="434.7" y="211.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="437.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,092 samples, 40.43%)</title><rect x="435.8" y="211.0" width="477.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="438.8" y="222.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::ColumnFamilyHandleImpl(rocksdb::ColumnFamilyData*, rocksdb::DBImpl*, rocksdb::InstrumentedMutex*) (3 samples, 0.06%)</title><rect x="436.0" y="195.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="439.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,067 samples, 39.95%)</title><rect x="436.9" y="195.0" width="471.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="439.9" y="206.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb:..</text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (2 samples, 0.04%)</title><rect x="447.7" y="179.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="450.7" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.10%)</title><rect x="448.3" y="179.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="451.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::~ColumnFamilyHandleImpl() (2 samples, 0.04%)</title><rect x="449.9" y="179.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="452.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.06%)</title><rect x="450.6" y="179.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="453.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (618 samples, 11.94%)</title><rect x="451.3" y="179.0" width="140.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="454.3" y="190.0">rocksdb::DBImpl::W..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (4 samples, 0.08%)</title><rect x="452.4" y="163.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="455.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (3 samples, 0.06%)</title><rect x="452.7" y="147.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="455.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (605 samples, 11.69%)</title><rect x="453.4" y="163.0" width="137.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="456.4" y="174.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (599 samples, 11.58%)</title><rect x="454.7" y="147.0" width="136.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="457.7" y="158.0">rocksdb::log::Wri..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (11 samples, 0.21%)</title><rect x="455.6" y="131.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="458.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (584 samples, 11.29%)</title><rect x="458.1" y="131.0" width="133.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="461.1" y="142.0">rocksdb::log::Wri..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="458.8" y="115.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="461.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (4 samples, 0.08%)</title><rect x="459.5" y="115.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="462.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (11 samples, 0.21%)</title><rect x="460.9" y="115.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="463.9" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.10%)</title><rect x="462.2" y="99.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="465.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (561 samples, 10.84%)</title><rect x="463.4" y="115.0" width="127.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="466.4" y="126.0">rocksdb::Writabl..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.10%)</title><rect x="464.3" y="99.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="467.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (3 samples, 0.06%)</title><rect x="465.4" y="99.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="468.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (3 samples, 0.06%)</title><rect x="466.1" y="99.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="469.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (546 samples, 10.55%)</title><rect x="466.8" y="99.0" width="124.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="469.8" y="110.0">rocksdb::Writab..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (5 samples, 0.10%)</title><rect x="468.2" y="83.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="471.2" y="94.0"></text>
</g>
<g>
<title>write (535 samples, 10.34%)</title><rect x="469.3" y="83.0" width="122.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="472.3" y="94.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (3 samples, 0.06%)</title><rect x="591.3" y="163.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="594.3" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.06%)</title><rect x="591.3" y="147.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="594.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.04%)</title><rect x="592.2" y="179.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="595.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.06%)</title><rect x="592.7" y="179.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="595.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (9 samples, 0.17%)</title><rect x="593.4" y="179.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.4" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="593.4" y="163.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="596.4" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.10%)</title><rect x="594.1" y="163.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="597.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (191 samples, 3.69%)</title><rect x="595.7" y="179.0" width="43.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="598.7" y="190.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (4 samples, 0.08%)</title><rect x="597.7" y="163.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="600.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (178 samples, 3.44%)</title><rect x="598.6" y="163.0" width="40.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="601.6" y="174.0">roc..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (6 samples, 0.12%)</title><rect x="599.5" y="147.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="602.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (168 samples, 3.25%)</title><rect x="600.9" y="147.0" width="38.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.9" y="158.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (164 samples, 3.17%)</title><rect x="601.8" y="131.0" width="37.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="604.8" y="142.0">roc..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (5 samples, 0.10%)</title><rect x="603.0" y="115.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="606.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (149 samples, 2.88%)</title><rect x="604.3" y="115.0" width="34.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="607.3" y="126.0">ro..</text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (6 samples, 0.12%)</title><rect x="607.5" y="99.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="610.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (128 samples, 2.47%)</title><rect x="609.1" y="99.0" width="29.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="612.1" y="110.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="623.5" y="83.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="626.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (9 samples, 0.17%)</title><rect x="624.2" y="83.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="627.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (7 samples, 0.14%)</title><rect x="624.6" y="67.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="627.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (6 samples, 0.12%)</title><rect x="626.2" y="83.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="629.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="627.1" y="67.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="630.1" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="627.1" y="51.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="630.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (39 samples, 0.75%)</title><rect x="627.6" y="83.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="630.6" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="631.5" y="67.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="634.5" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="631.9" y="67.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="634.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (17 samples, 0.33%)</title><rect x="632.6" y="67.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="635.6" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (10 samples, 0.19%)</title><rect x="634.2" y="51.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="637.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.04%)</title><rect x="636.5" y="83.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="639.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="636.9" y="83.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="639.9" y="94.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.06%)</title><rect x="637.6" y="83.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="640.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="638.5" y="115.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="641.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (124 samples, 2.40%)</title><rect x="639.2" y="179.0" width="28.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="642.2" y="190.0">ro..</text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="643.1" y="163.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="646.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (103 samples, 1.99%)</title><rect x="644.0" y="163.0" width="23.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="647.0" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (98 samples, 1.89%)</title><rect x="645.2" y="147.0" width="22.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="648.2" y="158.0">r..</text>
</g>
<g>
<title>Java_org_rocksdb_Statistics_toString (2 samples, 0.04%)</title><rect x="645.6" y="131.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="648.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (92 samples, 1.78%)</title><rect x="646.5" y="131.0" width="21.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="649.5" y="142.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="647.7" y="115.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="650.7" y="126.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.17%)</title><rect x="648.1" y="115.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="651.1" y="126.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.17%)</title><rect x="648.1" y="99.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="651.1" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.15%)</title><rect x="648.3" y="83.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="651.3" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="648.3" y="67.0" width="1.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="651.3" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="648.6" y="51.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="651.6" y="62.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="649.3" y="35.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="652.3" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (72 samples, 1.39%)</title><rect x="650.2" y="115.0" width="16.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="653.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (65 samples, 1.26%)</title><rect x="651.8" y="99.0" width="14.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="654.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (60 samples, 1.16%)</title><rect x="652.9" y="83.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="655.9" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="660.0" y="67.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="663.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.06%)</title><rect x="660.4" y="67.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="663.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="660.7" y="51.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.7" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (20 samples, 0.39%)</title><rect x="661.1" y="67.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="664.1" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="662.3" y="51.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="665.3" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (10 samples, 0.19%)</title><rect x="662.7" y="51.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="665.7" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.14%)</title><rect x="663.4" y="35.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="666.4" y="46.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.06%)</title><rect x="665.0" y="51.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="668.0" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="665.7" y="67.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="668.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="666.6" y="115.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="669.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="667.1" y="115.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="670.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (514 samples, 9.93%)</title><rect x="667.5" y="179.0" width="117.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="670.5" y="190.0">rocksdb::Write..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (510 samples, 9.86%)</title><rect x="668.0" y="163.0" width="116.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="671.0" y="174.0">rocksdb::Write..</text>
</g>
<g>
<title>sched_yield (6 samples, 0.12%)</title><rect x="672.3" y="147.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="675.3" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (11 samples, 0.21%)</title><rect x="673.7" y="147.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="676.7" y="158.0"></text>
</g>
<g>
<title>clock_gettime (9 samples, 0.17%)</title><rect x="674.1" y="131.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="677.1" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.08%)</title><rect x="674.6" y="115.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="677.6" y="126.0"></text>
</g>
<g>
<title>mach_timebase_info (2 samples, 0.04%)</title><rect x="675.0" y="99.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="678.0" y="110.0"></text>
</g>
<g>
<title>mach_timebase_info (3 samples, 0.06%)</title><rect x="675.5" y="115.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="678.5" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (5 samples, 0.10%)</title><rect x="676.2" y="147.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="679.2" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.10%)</title><rect x="676.2" y="131.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="679.2" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (468 samples, 9.05%)</title><rect x="677.5" y="147.0" width="106.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="680.5" y="158.0">xdrrec_ops</text>
</g>
<g>
<title>sched_yield (2 samples, 0.04%)</title><rect x="784.3" y="163.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="787.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (4 samples, 0.08%)</title><rect x="784.7" y="179.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="787.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (10 samples, 0.19%)</title><rect x="785.6" y="179.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="788.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (9 samples, 0.17%)</title><rect x="785.6" y="163.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="788.6" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.08%)</title><rect x="786.6" y="147.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="789.6" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.08%)</title><rect x="786.6" y="131.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="789.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (47 samples, 0.91%)</title><rect x="787.9" y="179.0" width="10.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="790.9" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.04%)</title><rect x="789.7" y="163.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="792.7" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (32 samples, 0.62%)</title><rect x="790.2" y="163.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="793.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (31 samples, 0.60%)</title><rect x="790.2" y="147.0" width="7.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="793.2" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (4 samples, 0.08%)</title><rect x="797.7" y="163.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="800.7" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.08%)</title><rect x="797.7" y="147.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="800.7" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.08%)</title><rect x="797.7" y="131.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="800.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (393 samples, 7.60%)</title><rect x="798.6" y="179.0" width="89.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="801.6" y="190.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (382 samples, 7.38%)</title><rect x="799.6" y="163.0" width="87.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="802.6" y="174.0">rocksdb::W..</text>
</g>
<g>
<title>pthread_cond_wait (4 samples, 0.08%)</title><rect x="808.9" y="147.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="811.9" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.04%)</title><rect x="809.8" y="147.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="812.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.04%)</title><rect x="810.3" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="813.3" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (307 samples, 5.93%)</title><rect x="810.7" y="147.0" width="70.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="813.7" y="158.0">std::__1..</text>
</g>
<g>
<title>__psynch_cvwait (253 samples, 4.89%)</title><rect x="811.2" y="131.0" width="57.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="814.2" y="142.0">__psyn..</text>
</g>
<g>
<title>_pthread_cond_wait (51 samples, 0.99%)</title><rect x="868.9" y="131.0" width="11.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="871.9" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (48 samples, 0.93%)</title><rect x="869.6" y="115.0" width="10.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="872.6" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (47 samples, 0.91%)</title><rect x="869.6" y="99.0" width="10.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="872.6" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (25 samples, 0.48%)</title><rect x="881.0" y="147.0" width="5.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="884.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (3 samples, 0.06%)</title><rect x="886.7" y="163.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="889.7" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.04%)</title><rect x="887.4" y="163.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (69 samples, 1.33%)</title><rect x="888.3" y="179.0" width="15.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="891.3" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (53 samples, 1.02%)</title><rect x="889.0" y="163.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="892.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (52 samples, 1.01%)</title><rect x="889.0" y="147.0" width="11.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="892.0" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (13 samples, 0.25%)</title><rect x="901.0" y="163.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="904.0" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (13 samples, 0.25%)</title><rect x="901.0" y="147.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="904.0" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (13 samples, 0.25%)</title><rect x="901.0" y="131.0" width="3.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="904.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.04%)</title><rect x="904.0" y="179.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="907.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.04%)</title><rect x="904.5" y="179.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="907.5" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.04%)</title><rect x="904.9" y="179.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.9" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.08%)</title><rect x="906.3" y="179.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="909.3" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (5 samples, 0.10%)</title><rect x="907.2" y="179.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="910.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="907.9" y="163.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="910.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="908.8" y="195.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="911.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.08%)</title><rect x="909.3" y="195.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="912.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (3 samples, 0.06%)</title><rect x="910.6" y="195.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="913.6" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="912.0" y="195.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="915.0" y="206.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="912.4" y="195.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="915.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.06%)</title><rect x="912.9" y="211.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="915.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 0.19%)</title><rect x="913.6" y="211.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="916.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.06%)</title><rect x="913.8" y="195.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.8" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.08%)</title><rect x="914.5" y="195.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back(char) (2 samples, 0.04%)</title><rect x="915.4" y="195.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (22 samples, 0.43%)</title><rect x="915.9" y="211.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="918.9" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.08%)</title><rect x="916.1" y="195.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="919.1" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (11 samples, 0.21%)</title><rect x="917.2" y="195.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="920.2" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (10 samples, 0.19%)</title><rect x="917.5" y="179.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="920.5" y="190.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.19%)</title><rect x="917.5" y="163.0" width="2.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="920.5" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (9 samples, 0.17%)</title><rect x="917.7" y="147.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="920.7" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.15%)</title><rect x="917.9" y="131.0" width="1.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="920.9" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.15%)</title><rect x="917.9" y="115.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="920.9" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (5 samples, 0.10%)</title><rect x="918.6" y="99.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="921.6" y="110.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (5 samples, 0.10%)</title><rect x="919.7" y="195.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="922.7" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (4 samples, 0.08%)</title><rect x="920.0" y="179.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="923.0" y="190.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="920.2" y="163.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="923.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (13 samples, 0.25%)</title><rect x="920.9" y="211.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.9" y="222.0"></text>
</g>
<g>
<title>__ulock_wake (2 samples, 0.04%)</title><rect x="921.1" y="195.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="924.1" y="206.0"></text>
</g>
<g>
<title>free (4 samples, 0.08%)</title><rect x="921.6" y="195.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="924.6" y="206.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.06%)</title><rect x="921.8" y="179.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="924.8" y="190.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.08%)</title><rect x="922.5" y="195.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="925.5" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.04%)</title><rect x="922.9" y="179.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="925.9" y="190.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.04%)</title><rect x="923.4" y="195.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="926.4" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.04%)</title><rect x="923.9" y="211.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="926.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (6 samples, 0.12%)</title><rect x="925.0" y="323.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="928.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (6 samples, 0.12%)</title><rect x="925.0" y="307.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="928.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (6 samples, 0.12%)</title><rect x="925.0" y="291.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="928.0" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="925.0" y="275.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="928.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="925.0" y="259.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArray (15 samples, 0.29%)</title><rect x="926.4" y="323.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="929.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (14 samples, 0.27%)</title><rect x="926.6" y="307.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="929.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.23%)</title><rect x="927.0" y="291.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.23%)</title><rect x="927.0" y="275.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="930.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="927.5" y="259.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="927.7" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="930.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="927.7" y="227.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="930.7" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="927.7" y="211.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="930.7" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.14%)</title><rect x="928.2" y="259.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="931.2" y="270.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,127 samples, 21.78%)</title><rect x="930.0" y="451.0" width="257.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="933.0" y="462.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.04%)</title><rect x="930.5" y="435.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="933.5" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.04%)</title><rect x="930.9" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="933.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.04%)</title><rect x="930.9" y="419.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="933.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (667 samples, 12.89%)</title><rect x="931.4" y="435.0" width="152.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="934.4" y="446.0">one/nio/net/JavaSel..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7 samples, 0.14%)</title><rect x="931.4" y="419.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.08%)</title><rect x="932.1" y="403.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="935.1" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.08%)</title><rect x="932.1" y="387.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="935.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.06%)</title><rect x="932.3" y="371.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.06%)</title><rect x="932.3" y="355.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="935.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.06%)</title><rect x="932.3" y="339.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="935.3" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (7 samples, 0.14%)</title><rect x="933.0" y="419.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="936.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (5 samples, 0.10%)</title><rect x="933.4" y="403.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="936.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (5 samples, 0.10%)</title><rect x="933.4" y="387.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="936.4" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.06%)</title><rect x="933.4" y="371.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="936.4" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (3 samples, 0.06%)</title><rect x="933.4" y="355.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="936.4" y="366.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="933.7" y="339.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="936.7" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="934.1" y="371.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="937.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (651 samples, 12.58%)</title><rect x="934.6" y="419.0" width="148.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="937.6" y="430.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (651 samples, 12.58%)</title><rect x="934.6" y="403.0" width="148.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.6" y="414.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (651 samples, 12.58%)</title><rect x="934.6" y="387.0" width="148.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="937.6" y="398.0">sun/nio/ch/KQueueSe..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (606 samples, 11.71%)</title><rect x="936.8" y="371.0" width="138.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="939.8" y="382.0">sun/nio/ch/KQueue..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (7 samples, 0.14%)</title><rect x="942.6" y="355.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="945.6" y="366.0"></text>
</g>
<g>
<title>kevent (574 samples, 11.09%)</title><rect x="944.1" y="355.0" width="131.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="947.1" y="366.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.17%)</title><rect x="1075.1" y="371.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1078.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getDescriptor (2 samples, 0.04%)</title><rect x="1075.3" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1078.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getInt (2 samples, 0.04%)</title><rect x="1075.3" y="339.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1078.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.10%)</title><rect x="1076.0" y="355.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1079.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.10%)</title><rect x="1076.0" y="339.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1079.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.10%)</title><rect x="1076.0" y="323.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1079.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.10%)</title><rect x="1076.0" y="307.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1079.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (18 samples, 0.35%)</title><rect x="1077.1" y="371.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1080.1" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.04%)</title><rect x="1080.5" y="355.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1083.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (7 samples, 0.14%)</title><rect x="1081.4" y="371.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1084.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (2 samples, 0.04%)</title><rect x="1083.0" y="419.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1086.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (2 samples, 0.04%)</title><rect x="1083.0" y="403.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1086.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (454 samples, 8.77%)</title><rect x="1083.5" y="435.0" width="103.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1086.5" y="446.0">one/nio/net/..</text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.04%)</title><rect x="1084.4" y="419.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1087.4" y="430.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="1084.9" y="419.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1087.9" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (441 samples, 8.52%)</title><rect x="1085.5" y="419.0" width="100.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1088.5" y="430.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (289 samples, 5.59%)</title><rect x="1086.5" y="403.0" width="65.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1089.5" y="414.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (237 samples, 4.58%)</title><rect x="1089.2" y="387.0" width="54.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1092.2" y="398.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (232 samples, 4.48%)</title><rect x="1090.3" y="371.0" width="52.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.3" y="382.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.04%)</title><rect x="1091.2" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1094.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="1091.2" y="339.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1094.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (226 samples, 4.37%)</title><rect x="1091.7" y="355.0" width="51.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1094.7" y="366.0">ru/ma..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.08%)</title><rect x="1092.2" y="339.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1095.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.08%)</title><rect x="1092.2" y="323.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1095.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="1092.4" y="307.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.4" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="1092.6" y="291.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1095.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (220 samples, 4.25%)</title><rect x="1093.1" y="339.0" width="50.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1096.1" y="350.0">ru/ma..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.12%)</title><rect x="1093.8" y="323.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1096.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.04%)</title><rect x="1093.8" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1096.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.06%)</title><rect x="1094.4" y="307.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1097.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="1094.7" y="291.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1097.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="1094.7" y="275.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1097.7" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="1094.7" y="259.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1097.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (210 samples, 4.06%)</title><rect x="1095.1" y="323.0" width="47.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1098.1" y="334.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (210 samples, 4.06%)</title><rect x="1095.1" y="307.0" width="47.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1098.1" y="318.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (209 samples, 4.04%)</title><rect x="1095.4" y="291.0" width="47.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1098.4" y="302.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (201 samples, 3.88%)</title><rect x="1095.8" y="275.0" width="45.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1098.8" y="286.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (10 samples, 0.19%)</title><rect x="1096.0" y="259.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1099.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (10 samples, 0.19%)</title><rect x="1096.0" y="243.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1099.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.12%)</title><rect x="1097.0" y="227.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1100.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.04%)</title><rect x="1097.9" y="211.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1100.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.04%)</title><rect x="1097.9" y="195.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1100.9" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="1097.9" y="179.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1100.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.04%)</title><rect x="1097.9" y="163.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1100.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (189 samples, 3.65%)</title><rect x="1098.5" y="259.0" width="43.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1101.5" y="270.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (189 samples, 3.65%)</title><rect x="1098.5" y="243.0" width="43.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1101.5" y="254.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (188 samples, 3.63%)</title><rect x="1098.5" y="227.0" width="42.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1101.5" y="238.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (185 samples, 3.58%)</title><rect x="1098.8" y="211.0" width="42.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1101.8" y="222.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (185 samples, 3.58%)</title><rect x="1098.8" y="195.0" width="42.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1101.8" y="206.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (171 samples, 3.30%)</title><rect x="1102.0" y="179.0" width="39.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1105.0" y="190.0">Uns..</text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (3 samples, 0.06%)</title><rect x="1103.3" y="163.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.3" y="174.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (2 samples, 0.04%)</title><rect x="1104.5" y="163.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.5" y="174.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.06%)</title><rect x="1104.9" y="163.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.9" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="1104.9" y="147.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1107.9" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="1105.6" y="163.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.6" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.06%)</title><rect x="1106.1" y="163.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.1" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.04%)</title><rect x="1106.8" y="163.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.8" y="174.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (2 samples, 0.04%)</title><rect x="1106.8" y="147.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.8" y="158.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples, 0.14%)</title><rect x="1107.2" y="163.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.2" y="174.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (2 samples, 0.04%)</title><rect x="1107.7" y="147.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1110.7" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (130 samples, 2.51%)</title><rect x="1108.8" y="163.0" width="29.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1111.8" y="174.0">__..</text>
</g>
<g>
<title>in_ByteSize(int) (2 samples, 0.04%)</title><rect x="1138.5" y="163.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1141.5" y="174.0"></text>
</g>
<g>
<title>pthread_cond_signal (4 samples, 0.08%)</title><rect x="1139.1" y="163.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1142.1" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.08%)</title><rect x="1140.1" y="163.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1143.1" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.04%)</title><rect x="1141.0" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1144.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.06%)</title><rect x="1141.7" y="275.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1144.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="1141.7" y="259.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1144.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="1141.9" y="243.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1144.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="1141.9" y="227.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1144.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="1141.9" y="211.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1144.9" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="1141.9" y="195.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1144.9" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="1141.9" y="179.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1144.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.06%)</title><rect x="1142.3" y="275.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1145.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.06%)</title><rect x="1142.3" y="259.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1145.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.04%)</title><rect x="1142.6" y="243.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1145.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.12%)</title><rect x="1143.2" y="387.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1146.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1143.2" y="371.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1146.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="1143.7" y="371.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1146.7" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="1143.7" y="355.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1146.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (14 samples, 0.27%)</title><rect x="1144.6" y="387.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1147.6" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (12 samples, 0.23%)</title><rect x="1144.6" y="371.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1147.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (12 samples, 0.23%)</title><rect x="1144.6" y="355.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1147.6" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.04%)</title><rect x="1144.8" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1147.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.04%)</title><rect x="1144.8" y="323.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1147.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.15%)</title><rect x="1145.3" y="339.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1148.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="1146.0" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1149.0" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.06%)</title><rect x="1146.4" y="323.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1149.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.19%)</title><rect x="1148.0" y="387.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1151.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.10%)</title><rect x="1148.3" y="371.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1151.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.10%)</title><rect x="1148.3" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1151.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.08%)</title><rect x="1149.4" y="371.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1152.4" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="1149.6" y="355.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1152.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.17%)</title><rect x="1150.3" y="387.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1153.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.15%)</title><rect x="1150.5" y="371.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1153.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (148 samples, 2.86%)</title><rect x="1152.4" y="403.0" width="33.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1155.4" y="414.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (148 samples, 2.86%)</title><rect x="1152.4" y="387.0" width="33.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1155.4" y="398.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.10%)</title><rect x="1152.6" y="371.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1155.6" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="1152.6" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1155.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="1152.6" y="339.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1155.6" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="1152.8" y="323.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1155.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="1153.1" y="307.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1156.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="1153.3" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1156.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (142 samples, 2.74%)</title><rect x="1153.7" y="371.0" width="32.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1156.7" y="382.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 0.33%)</title><rect x="1153.7" y="355.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1156.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (17 samples, 0.33%)</title><rect x="1153.7" y="339.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1156.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.08%)</title><rect x="1154.0" y="323.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1157.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1154.4" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1157.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (12 samples, 0.23%)</title><rect x="1154.9" y="323.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1157.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (12 samples, 0.23%)</title><rect x="1154.9" y="307.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1157.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.12%)</title><rect x="1155.1" y="291.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1158.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="1156.5" y="291.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1159.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="1156.5" y="275.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1159.5" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (2 samples, 0.04%)</title><rect x="1156.5" y="259.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1159.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (125 samples, 2.42%)</title><rect x="1157.6" y="355.0" width="28.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1160.6" y="366.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (125 samples, 2.42%)</title><rect x="1157.6" y="339.0" width="28.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1160.6" y="350.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (125 samples, 2.42%)</title><rect x="1157.6" y="323.0" width="28.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1160.6" y="334.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (124 samples, 2.40%)</title><rect x="1157.8" y="307.0" width="28.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1160.8" y="318.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (124 samples, 2.40%)</title><rect x="1157.8" y="291.0" width="28.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1160.8" y="302.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.10%)</title><rect x="1159.0" y="275.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1162.0" y="286.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.06%)</title><rect x="1159.4" y="259.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1162.4" y="270.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="1160.1" y="275.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1163.1" y="286.0"></text>
</g>
<g>
<title>read (112 samples, 2.16%)</title><rect x="1160.6" y="275.0" width="25.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1163.6" y="286.0">r..</text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.08%)</title><rect x="1186.1" y="419.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="430.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="1186.4" y="403.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1189.4" y="414.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.06%)</title><rect x="1186.4" y="387.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1189.4" y="398.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="1186.6" y="371.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1189.6" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="1187.3" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="462.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.15%)</title><rect x="1187.7" y="451.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1190.7" y="462.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.15%)</title><rect x="1187.7" y="435.0" width="1.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1190.7" y="446.0"></text>
</g>
<g>
<title>_pthread_body (8 samples, 0.15%)</title><rect x="1187.7" y="419.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1190.7" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.15%)</title><rect x="1187.7" y="403.0" width="1.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1190.7" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.15%)</title><rect x="1187.7" y="387.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.7" y="398.0"></text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.04%)</title><rect x="1187.9" y="371.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="382.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.04%)</title><rect x="1187.9" y="355.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="366.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.04%)</title><rect x="1187.9" y="339.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.9" y="350.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.08%)</title><rect x="1188.6" y="371.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.6" y="382.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.08%)</title><rect x="1188.6" y="355.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.6" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.08%)</title><rect x="1188.6" y="339.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.6" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.08%)</title><rect x="1188.6" y="323.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.6" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.08%)</title><rect x="1188.6" y="307.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.6" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.08%)</title><rect x="1188.6" y="291.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1191.6" y="302.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="1189.5" y="451.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.5" y="462.0"></text>
</g>
</g>
</svg>
