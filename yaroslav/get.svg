<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1157"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1157"> </text>
<g id="frames">
<g>
<title>all (5,025 samples, 100.00%)</title><rect x="10.0" y="1123.0" width="1180.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="1134.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=40195] (2,241 samples, 44.60%)</title><rect x="10.0" y="1107.0" width="526.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="1118.0">[NIO Selector #0 tid=40195]</text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (4 samples, 0.08%)</title><rect x="11.2" y="1091.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.2" y="1102.0"></text>
</g>
<g>
<title>[deoptimization] (2 samples, 0.04%)</title><rect x="12.3" y="1091.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="15.3" y="1102.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*, int) (2 samples, 0.04%)</title><rect x="12.3" y="1075.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.3" y="1086.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*, int) (2 samples, 0.04%)</title><rect x="12.3" y="1059.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.3" y="1070.0"></text>
</g>
<g>
<title>Deoptimization::create_vframeArray(JavaThread*, frame, RegisterMap*, GrowableArray&lt;compiledVFrame*&gt;*, bool) (2 samples, 0.04%)</title><rect x="12.3" y="1043.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.3" y="1054.0"></text>
</g>
<g>
<title>vframeArray::allocate(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap*, frame, frame, frame, bool) (2 samples, 0.04%)</title><rect x="12.3" y="1027.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.3" y="1038.0"></text>
</g>
<g>
<title>vframeArray::fill_in(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap const*, bool) (2 samples, 0.04%)</title><rect x="12.3" y="1011.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.3" y="1022.0"></text>
</g>
<g>
<title>[not_walkable_Java] (7 samples, 0.14%)</title><rect x="12.8" y="1091.0" width="1.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="15.8" y="1102.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.04%)</title><rect x="13.3" y="1075.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.3" y="1086.0"></text>
</g>
<g>
<title>caller_is_deopted() (2 samples, 0.04%)</title><rect x="13.3" y="1059.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="16.3" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.04%)</title><rect x="13.3" y="1043.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.3" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.06%)</title><rect x="13.8" y="1075.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="16.8" y="1086.0"></text>
</g>
<g>
<title>[unknown_Java] (28 samples, 0.56%)</title><rect x="14.5" y="1091.0" width="6.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="17.5" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (9 samples, 0.18%)</title><rect x="17.5" y="1075.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.5" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (9 samples, 0.18%)</title><rect x="17.5" y="1059.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.5" y="1070.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (8 samples, 0.16%)</title><rect x="17.5" y="1043.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="20.5" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (6 samples, 0.12%)</title><rect x="19.6" y="1075.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="22.6" y="1086.0"></text>
</g>
<g>
<title>_res (6 samples, 0.12%)</title><rect x="19.6" y="1059.0" width="1.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="22.6" y="1070.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,193 samples, 43.64%)</title><rect x="21.0" y="1091.0" width="515.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.0" y="1102.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (709 samples, 14.11%)</title><rect x="23.6" y="1075.0" width="166.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.6" y="1086.0">one/nio/net/JavaSelec..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (8 samples, 0.16%)</title><rect x="23.6" y="1059.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.6" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.08%)</title><rect x="24.6" y="1043.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.08%)</title><rect x="24.6" y="1027.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="24.6" y="1011.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="24.6" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="24.6" y="979.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.04%)</title><rect x="25.0" y="1011.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (16 samples, 0.32%)</title><rect x="25.5" y="1059.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.08%)</title><rect x="25.5" y="1043.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (12 samples, 0.24%)</title><rect x="26.4" y="1043.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.4" y="1054.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="26.9" y="1027.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="29.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (6 samples, 0.12%)</title><rect x="27.4" y="1027.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (4 samples, 0.08%)</title><rect x="27.8" y="1011.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.8" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="28.8" y="1027.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="31.8" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (681 samples, 13.55%)</title><rect x="29.3" y="1059.0" width="159.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.3" y="1070.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (681 samples, 13.55%)</title><rect x="29.3" y="1043.0" width="159.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.3" y="1054.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (672 samples, 13.37%)</title><rect x="29.3" y="1027.0" width="157.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.3" y="1038.0">sun/nio/ch/KQueueSel..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (661 samples, 13.15%)</title><rect x="29.5" y="1011.0" width="155.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="32.5" y="1022.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.06%)</title><rect x="34.7" y="995.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="37.7" y="1006.0"></text>
</g>
<g>
<title>kevent (636 samples, 12.66%)</title><rect x="35.4" y="995.0" width="149.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="38.4" y="1006.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.06%)</title><rect x="184.7" y="1011.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.7" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.06%)</title><rect x="184.7" y="995.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.06%)</title><rect x="184.7" y="979.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.06%)</title><rect x="184.7" y="963.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="187.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.06%)</title><rect x="184.7" y="947.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="187.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (6 samples, 0.12%)</title><rect x="185.6" y="1011.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="188.6" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (9 samples, 0.18%)</title><rect x="187.1" y="1027.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="190.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (9 samples, 0.18%)</title><rect x="187.1" y="1011.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (4 samples, 0.08%)</title><rect x="189.2" y="1059.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (4 samples, 0.08%)</title><rect x="189.2" y="1043.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="192.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (4 samples, 0.08%)</title><rect x="189.2" y="1027.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,473 samples, 29.31%)</title><rect x="190.1" y="1075.0" width="345.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.1" y="1086.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,468 samples, 29.21%)</title><rect x="190.3" y="1059.0" width="344.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.3" y="1070.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,270 samples, 25.27%)</title><rect x="191.1" y="1043.0" width="298.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="194.1" y="1054.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,202 samples, 23.92%)</title><rect x="193.2" y="1027.0" width="282.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.2" y="1038.0">one/nio/http/HttpSession.handleParsedR..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,202 samples, 23.92%)</title><rect x="193.2" y="1011.0" width="282.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.2" y="1022.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,167 samples, 23.22%)</title><rect x="193.2" y="995.0" width="274.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.2" y="1006.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (682 samples, 13.57%)</title><rect x="193.6" y="979.0" width="160.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.6" y="990.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (675 samples, 13.43%)</title><rect x="194.1" y="963.0" width="158.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.1" y="974.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (27 samples, 0.54%)</title><rect x="194.3" y="947.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.3" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (647 samples, 12.88%)</title><rect x="200.7" y="947.0" width="151.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.7" y="958.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session.write (647 samples, 12.88%)</title><rect x="200.7" y="931.0" width="151.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.7" y="942.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (647 samples, 12.88%)</title><rect x="200.7" y="915.0" width="151.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.7" y="926.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (646 samples, 12.86%)</title><rect x="200.9" y="899.0" width="151.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.9" y="910.0">one/nio/net/JavaSoc..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="201.1" y="883.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.1" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="201.1" y="867.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.1" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="201.1" y="851.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (642 samples, 12.78%)</title><rect x="201.9" y="883.0" width="150.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.9" y="894.0">sun/nio/ch/SocketCh..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="201.9" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="201.9" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="201.9" y="835.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="201.9" y="819.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="201.9" y="803.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="204.9" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="201.9" y="787.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.9" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="201.9" y="771.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.04%)</title><rect x="202.3" y="867.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="202.3" y="851.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.3" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (638 samples, 12.70%)</title><rect x="202.8" y="867.0" width="149.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.8" y="878.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (638 samples, 12.70%)</title><rect x="202.8" y="851.0" width="149.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.8" y="862.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (638 samples, 12.70%)</title><rect x="202.8" y="835.0" width="149.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.8" y="846.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (3 samples, 0.06%)</title><rect x="202.8" y="819.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.8" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (635 samples, 12.64%)</title><rect x="203.5" y="819.0" width="149.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.5" y="830.0">sun/nio/ch/SocketDi..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (629 samples, 12.52%)</title><rect x="204.7" y="803.0" width="147.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.7" y="814.0">sun/nio/ch/FileDisp..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.06%)</title><rect x="209.1" y="787.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="212.1" y="798.0"></text>
</g>
<g>
<title>write (606 samples, 12.06%)</title><rect x="210.1" y="787.0" width="142.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="213.1" y="798.0">write</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.10%)</title><rect x="352.6" y="963.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="355.6" y="974.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="353.1" y="947.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.1" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="353.1" y="931.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="356.1" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (16 samples, 0.32%)</title><rect x="353.8" y="979.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.8" y="990.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.08%)</title><rect x="354.3" y="963.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="357.3" y="974.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="354.3" y="947.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="357.3" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="354.7" y="947.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.7" y="958.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (5 samples, 0.10%)</title><rect x="355.2" y="963.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.2" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="355.7" y="947.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="358.7" y="958.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.08%)</title><rect x="356.4" y="963.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.4" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="356.6" y="947.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.6" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="356.6" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.6" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.entity (467 samples, 9.29%)</title><rect x="357.5" y="979.0" width="109.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.5" y="990.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.06%)</title><rect x="357.5" y="963.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="360.5" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.get (457 samples, 9.09%)</title><rect x="358.5" y="963.0" width="107.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="361.5" y="974.0">ru/mail/polis..</text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.06%)</title><rect x="359.2" y="947.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="362.2" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (32 samples, 0.64%)</title><rect x="359.9" y="947.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="362.9" y="958.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (7 samples, 0.14%)</title><rect x="359.9" y="931.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="362.9" y="942.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.08%)</title><rect x="360.4" y="915.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="363.4" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.04%)</title><rect x="360.4" y="899.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="363.4" y="910.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.04%)</title><rect x="360.8" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="363.8" y="910.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.04%)</title><rect x="360.8" y="883.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="363.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (16 samples, 0.32%)</title><rect x="361.5" y="931.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="364.5" y="942.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.04%)</title><rect x="363.2" y="915.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="366.2" y="926.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (2 samples, 0.04%)</title><rect x="364.4" y="915.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="367.4" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (8 samples, 0.16%)</title><rect x="365.5" y="931.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="368.5" y="942.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (2 samples, 0.04%)</title><rect x="366.2" y="915.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="369.2" y="926.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.06%)</title><rect x="366.7" y="915.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="369.7" y="926.0"></text>
</g>
<g>
<title>_rethrow_Java (2 samples, 0.04%)</title><rect x="367.6" y="947.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="370.6" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (11 samples, 0.22%)</title><rect x="368.6" y="947.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="371.6" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.06%)</title><rect x="370.5" y="931.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="373.5" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.06%)</title><rect x="370.5" y="915.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="373.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (2 samples, 0.04%)</title><rect x="370.7" y="899.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="373.7" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (403 samples, 8.02%)</title><rect x="371.2" y="947.0" width="94.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.2" y="958.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (15 samples, 0.30%)</title><rect x="371.9" y="931.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.9" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/57494364.invoke (14 samples, 0.28%)</title><rect x="372.1" y="915.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.1" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (12 samples, 0.24%)</title><rect x="372.1" y="899.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="375.1" y="910.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2 samples, 0.04%)</title><rect x="372.1" y="883.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="375.1" y="894.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.04%)</title><rect x="372.6" y="883.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="375.6" y="894.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.04%)</title><rect x="372.6" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="375.6" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (6 samples, 0.12%)</title><rect x="373.0" y="883.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="376.0" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (6 samples, 0.12%)</title><rect x="373.0" y="867.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="376.0" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.08%)</title><rect x="373.5" y="851.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="376.5" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$Stringifiers$ObjectStringifier.valueOf (2 samples, 0.04%)</title><rect x="374.4" y="883.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.4" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1725097945.invoke (2 samples, 0.04%)</title><rect x="374.9" y="899.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="377.9" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="374.9" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.9" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (27 samples, 0.54%)</title><rect x="375.4" y="931.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.4" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.04%)</title><rect x="375.6" y="915.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.6" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (19 samples, 0.38%)</title><rect x="376.1" y="915.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.1" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 0.34%)</title><rect x="376.6" y="899.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="379.6" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.10%)</title><rect x="377.3" y="883.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.3" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (2 samples, 0.04%)</title><rect x="377.5" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.5" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="378.0" y="867.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="381.0" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (2 samples, 0.04%)</title><rect x="378.4" y="883.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="381.4" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (3 samples, 0.06%)</title><rect x="378.9" y="883.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="381.9" y="894.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.06%)</title><rect x="378.9" y="867.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (4 samples, 0.08%)</title><rect x="379.6" y="883.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.6" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="380.1" y="867.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="383.1" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (5 samples, 0.10%)</title><rect x="380.6" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="383.6" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.10%)</title><rect x="380.6" y="899.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="383.6" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.06%)</title><rect x="380.6" y="883.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.6" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="381.3" y="883.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="384.3" y="894.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (334 samples, 6.65%)</title><rect x="381.7" y="931.0" width="78.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="384.7" y="942.0">org/rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (334 samples, 6.65%)</title><rect x="381.7" y="915.0" width="78.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="384.7" y="926.0">org/rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (331 samples, 6.59%)</title><rect x="382.4" y="899.0" width="77.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="385.4" y="910.0">Java_org_..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (3 samples, 0.06%)</title><rect x="383.4" y="883.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="386.4" y="894.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.06%)</title><rect x="384.1" y="883.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="387.1" y="894.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="384.8" y="883.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="387.8" y="894.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (5 samples, 0.10%)</title><rect x="385.5" y="883.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="388.5" y="894.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.08%)</title><rect x="386.7" y="883.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="389.7" y="894.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (309 samples, 6.15%)</title><rect x="387.6" y="883.0" width="72.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="390.6" y="894.0">rocksdb_..</text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.04%)</title><rect x="389.2" y="867.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="392.2" y="878.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.04%)</title><rect x="389.9" y="867.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="392.9" y="878.0"></text>
</g>
<g>
<title>free (7 samples, 0.14%)</title><rect x="390.7" y="867.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="393.7" y="878.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.10%)</title><rect x="391.1" y="851.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="394.1" y="862.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.12%)</title><rect x="392.3" y="867.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="395.3" y="878.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.14%)</title><rect x="393.7" y="867.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="396.7" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.06%)</title><rect x="394.6" y="851.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="397.6" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="394.9" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="397.9" y="846.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (28 samples, 0.56%)</title><rect x="395.3" y="867.0" width="6.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="398.3" y="878.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (2 samples, 0.04%)</title><rect x="396.5" y="851.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="399.5" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (2 samples, 0.04%)</title><rect x="397.5" y="851.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="400.5" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (12 samples, 0.24%)</title><rect x="397.9" y="851.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="400.9" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (10 samples, 0.20%)</title><rect x="398.2" y="835.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="401.2" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (10 samples, 0.20%)</title><rect x="398.2" y="819.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="401.2" y="830.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.16%)</title><rect x="398.6" y="803.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="401.6" y="814.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.14%)</title><rect x="398.6" y="787.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="401.6" y="798.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="399.8" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="402.8" y="782.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="400.8" y="851.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="403.8" y="862.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="401.9" y="867.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="404.9" y="878.0"></text>
</g>
<g>
<title>operator new(unsigned long) (17 samples, 0.34%)</title><rect x="402.6" y="867.0" width="4.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="405.6" y="878.0"></text>
</g>
<g>
<title>malloc (17 samples, 0.34%)</title><rect x="402.6" y="851.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="405.6" y="862.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.04%)</title><rect x="402.6" y="835.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="405.6" y="846.0"></text>
</g>
<g>
<title>malloc_zone_malloc (12 samples, 0.24%)</title><rect x="403.1" y="835.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="406.1" y="846.0"></text>
</g>
<g>
<title>default_zone_malloc (5 samples, 0.10%)</title><rect x="403.1" y="819.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="406.1" y="830.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="404.3" y="819.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="407.3" y="830.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="404.5" y="803.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="407.5" y="814.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="406.2" y="835.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="409.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (224 samples, 4.46%)</title><rect x="406.6" y="867.0" width="52.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="409.6" y="878.0">rocks..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (223 samples, 4.44%)</title><rect x="406.9" y="851.0" width="52.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="409.9" y="862.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (221 samples, 4.40%)</title><rect x="407.3" y="835.0" width="51.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="410.3" y="846.0">rocks..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.04%)</title><rect x="407.8" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="410.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (211 samples, 4.20%)</title><rect x="408.3" y="819.0" width="49.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="411.3" y="830.0">rocks..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.10%)</title><rect x="410.8" y="803.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="413.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (15 samples, 0.30%)</title><rect x="412.5" y="803.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="415.5" y="814.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.04%)</title><rect x="413.2" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="416.2" y="798.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (7 samples, 0.14%)</title><rect x="413.7" y="787.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="416.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.06%)</title><rect x="415.3" y="787.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="418.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.04%)</title><rect x="415.5" y="771.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="418.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.06%)</title><rect x="416.0" y="803.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="419.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (2 samples, 0.04%)</title><rect x="417.0" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="420.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (66 samples, 1.31%)</title><rect x="417.4" y="803.0" width="15.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="420.4" y="814.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="419.1" y="787.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="422.1" y="798.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (2 samples, 0.04%)</title><rect x="419.8" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="422.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (53 samples, 1.05%)</title><rect x="420.2" y="787.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="423.2" y="798.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (26 samples, 0.52%)</title><rect x="426.1" y="771.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="429.1" y="782.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="427.8" y="755.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="430.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (13 samples, 0.26%)</title><rect x="428.7" y="755.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="431.7" y="766.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="431.7" y="755.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="434.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="432.2" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="435.2" y="782.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (98 samples, 1.95%)</title><rect x="433.9" y="803.0" width="23.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="436.9" y="814.0">r..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (2 samples, 0.04%)</title><rect x="436.4" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="439.4" y="798.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (3 samples, 0.06%)</title><rect x="436.9" y="787.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="439.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.04%)</title><rect x="438.1" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="441.1" y="798.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int) (74 samples, 1.47%)</title><rect x="438.6" y="787.0" width="17.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="441.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Close() (2 samples, 0.04%)</title><rect x="439.7" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="442.7" y="782.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (63 samples, 1.25%)</title><rect x="440.4" y="771.0" width="14.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="443.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Close() (5 samples, 0.10%)</title><rect x="443.7" y="755.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="446.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter* rocksdb::Block::NewIterator&lt;rocksdb::IndexBlockIter&gt;(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (4 samples, 0.08%)</title><rect x="444.0" y="739.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="447.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (2 samples, 0.04%)</title><rect x="445.4" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="448.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (40 samples, 0.80%)</title><rect x="445.8" y="755.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="448.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (6 samples, 0.12%)</title><rect x="451.2" y="739.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="454.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (10 samples, 0.20%)</title><rect x="452.6" y="739.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="455.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (4 samples, 0.08%)</title><rect x="455.9" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="458.9" y="798.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.08%)</title><rect x="456.9" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="459.9" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="458.3" y="819.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="461.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.06%)</title><rect x="459.2" y="867.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="462.2" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (21 samples, 0.42%)</title><rect x="460.2" y="931.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="463.2" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (18 samples, 0.36%)</title><rect x="460.9" y="915.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="463.9" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.08%)</title><rect x="461.6" y="899.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.6" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.06%)</title><rect x="461.8" y="883.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="464.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (3 samples, 0.06%)</title><rect x="461.8" y="867.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.8" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (11 samples, 0.22%)</title><rect x="462.5" y="899.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.5" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.18%)</title><rect x="462.7" y="883.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="465.7" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.18%)</title><rect x="462.7" y="867.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.7" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.14%)</title><rect x="463.0" y="851.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.0" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (3 samples, 0.06%)</title><rect x="465.1" y="931.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.1" y="942.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (3 samples, 0.06%)</title><rect x="465.1" y="915.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="468.1" y="926.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (3 samples, 0.06%)</title><rect x="465.1" y="899.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (3 samples, 0.06%)</title><rect x="465.1" y="883.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.1" y="894.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (3 samples, 0.06%)</title><rect x="465.1" y="867.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="468.1" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.put (6 samples, 0.12%)</title><rect x="465.8" y="963.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.8" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (5 samples, 0.10%)</title><rect x="466.0" y="947.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="469.0" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (4 samples, 0.08%)</title><rect x="466.0" y="931.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="469.0" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.08%)</title><rect x="466.0" y="915.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="469.0" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="466.3" y="899.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.3" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="466.3" y="883.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.3" y="894.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (32 samples, 0.64%)</title><rect x="467.2" y="995.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="470.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (32 samples, 0.64%)</title><rect x="467.2" y="979.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (17 samples, 0.34%)</title><rect x="467.4" y="963.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.4" y="974.0"></text>
</g>
<g>
<title>java/lang/String.equals (14 samples, 0.28%)</title><rect x="467.4" y="947.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.4" y="958.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="468.4" y="931.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="471.4" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.16%)</title><rect x="468.8" y="931.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="471.8" y="942.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.04%)</title><rect x="468.8" y="915.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="471.8" y="926.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.10%)</title><rect x="469.3" y="915.0" width="1.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="472.3" y="926.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.06%)</title><rect x="469.8" y="899.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="472.8" y="910.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="470.0" y="883.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="473.0" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="470.7" y="947.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="473.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (14 samples, 0.28%)</title><rect x="471.4" y="963.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="474.4" y="974.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (14 samples, 0.28%)</title><rect x="471.4" y="947.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="474.4" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="473.5" y="931.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="476.5" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.06%)</title><rect x="474.7" y="995.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="477.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="475.0" y="979.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.0" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="475.0" y="963.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="478.0" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="475.0" y="947.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="478.0" y="958.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (30 samples, 0.60%)</title><rect x="475.4" y="1027.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="478.4" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (12 samples, 0.24%)</title><rect x="475.7" y="1011.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="478.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.12%)</title><rect x="477.1" y="995.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="480.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.12%)</title><rect x="477.1" y="979.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="480.1" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.08%)</title><rect x="477.3" y="963.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.3" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.34%)</title><rect x="478.5" y="1011.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.5" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.34%)</title><rect x="478.5" y="995.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="481.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (15 samples, 0.30%)</title><rect x="482.5" y="1027.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (15 samples, 0.30%)</title><rect x="482.5" y="1011.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (14 samples, 0.28%)</title><rect x="482.5" y="995.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/Character.digit (7 samples, 0.14%)</title><rect x="483.2" y="979.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Character.digit (7 samples, 0.14%)</title><rect x="483.2" y="963.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="486.2" y="974.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (7 samples, 0.14%)</title><rect x="483.2" y="947.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.2" y="958.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.08%)</title><rect x="484.8" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="487.8" y="990.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.06%)</title><rect x="485.1" y="963.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="488.1" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.06%)</title><rect x="486.0" y="1027.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.0" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.20%)</title><rect x="486.9" y="1027.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="489.9" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.20%)</title><rect x="486.9" y="1011.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (195 samples, 3.88%)</title><rect x="489.3" y="1043.0" width="45.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.3" y="1054.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (195 samples, 3.88%)</title><rect x="489.3" y="1027.0" width="45.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="492.3" y="1038.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.14%)</title><rect x="489.3" y="1011.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.14%)</title><rect x="489.3" y="995.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="492.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.14%)</title><rect x="489.3" y="979.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.3" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (188 samples, 3.74%)</title><rect x="490.9" y="1011.0" width="44.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="493.9" y="1022.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.04%)</title><rect x="491.4" y="995.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="494.4" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (184 samples, 3.66%)</title><rect x="491.9" y="995.0" width="43.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.9" y="1006.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (182 samples, 3.62%)</title><rect x="492.3" y="979.0" width="42.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.3" y="990.0">sun/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.12%)</title><rect x="492.3" y="963.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="495.3" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.12%)</title><rect x="492.3" y="947.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.3" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="492.3" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.3" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="492.3" y="915.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.3" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="492.3" y="899.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="495.3" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="492.3" y="883.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="495.3" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.08%)</title><rect x="492.8" y="931.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="495.8" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.08%)</title><rect x="492.8" y="915.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="495.8" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.08%)</title><rect x="492.8" y="899.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="495.8" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (4 samples, 0.08%)</title><rect x="492.8" y="883.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="495.8" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (166 samples, 3.30%)</title><rect x="494.0" y="963.0" width="39.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="497.0" y="974.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (164 samples, 3.26%)</title><rect x="494.4" y="947.0" width="38.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="497.4" y="958.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (164 samples, 3.26%)</title><rect x="494.4" y="931.0" width="38.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.4" y="942.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.06%)</title><rect x="496.8" y="915.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="499.8" y="926.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.06%)</title><rect x="497.5" y="915.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="500.5" y="926.0"></text>
</g>
<g>
<title>read (147 samples, 2.93%)</title><rect x="498.4" y="915.0" width="34.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="501.4" y="926.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.08%)</title><rect x="533.0" y="963.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="536.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.06%)</title><rect x="533.0" y="947.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="536.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (5 samples, 0.10%)</title><rect x="533.9" y="963.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="536.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.06%)</title><rect x="534.1" y="947.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="537.1" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.08%)</title><rect x="535.1" y="1059.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="538.1" y="1070.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.08%)</title><rect x="535.1" y="1043.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="538.1" y="1054.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.08%)</title><rect x="535.1" y="1027.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="538.1" y="1038.0"></text>
</g>
<g>
<title>_res (3 samples, 0.06%)</title><rect x="535.3" y="1011.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="538.3" y="1022.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25091] (2,277 samples, 45.31%)</title><rect x="536.5" y="1107.0" width="534.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="539.5" y="1118.0">[NIO Selector #2 tid=25091]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.04%)</title><rect x="536.7" y="1091.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="539.7" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.04%)</title><rect x="536.7" y="1075.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="539.7" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.04%)</title><rect x="536.7" y="1059.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="539.7" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.04%)</title><rect x="536.7" y="1043.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="539.7" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (2 samples, 0.04%)</title><rect x="537.2" y="1091.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="540.2" y="1102.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.04%)</title><rect x="537.7" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="540.7" y="1102.0"></text>
</g>
<g>
<title>[not_walkable_Java] (9 samples, 0.18%)</title><rect x="538.6" y="1091.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="541.6" y="1102.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (4 samples, 0.08%)</title><rect x="538.8" y="1075.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="541.8" y="1086.0"></text>
</g>
<g>
<title>caller_is_deopted() (3 samples, 0.06%)</title><rect x="539.1" y="1059.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="542.1" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (4 samples, 0.08%)</title><rect x="539.8" y="1075.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="542.8" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="539.8" y="1059.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="542.8" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.04%)</title><rect x="539.8" y="1043.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="542.8" y="1054.0"></text>
</g>
<g>
<title>[unknown_Java] (20 samples, 0.40%)</title><rect x="540.7" y="1091.0" width="4.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="543.7" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (10 samples, 0.20%)</title><rect x="542.4" y="1075.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="545.4" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (10 samples, 0.20%)</title><rect x="542.4" y="1059.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="545.4" y="1070.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (9 samples, 0.18%)</title><rect x="542.4" y="1043.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="545.4" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.06%)</title><rect x="544.7" y="1075.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="547.7" y="1086.0"></text>
</g>
<g>
<title>_res (3 samples, 0.06%)</title><rect x="544.7" y="1059.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="547.7" y="1070.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,235 samples, 44.48%)</title><rect x="545.4" y="1091.0" width="524.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="548.4" y="1102.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (696 samples, 13.85%)</title><rect x="546.8" y="1075.0" width="163.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="549.8" y="1086.0">one/nio/net/JavaSelec..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (11 samples, 0.22%)</title><rect x="546.8" y="1059.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="549.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.06%)</title><rect x="547.3" y="1043.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="550.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.06%)</title><rect x="547.3" y="1027.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="550.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (6 samples, 0.12%)</title><rect x="548.0" y="1043.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (6 samples, 0.12%)</title><rect x="548.0" y="1027.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="548.2" y="1011.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="551.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="548.2" y="995.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="551.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.06%)</title><rect x="548.7" y="1011.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="551.7" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (19 samples, 0.38%)</title><rect x="549.4" y="1059.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (18 samples, 0.36%)</title><rect x="549.6" y="1043.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="552.6" y="1054.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="550.1" y="1027.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="553.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (12 samples, 0.24%)</title><rect x="550.6" y="1027.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (7 samples, 0.14%)</title><rect x="550.6" y="1011.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (6 samples, 0.12%)</title><rect x="550.8" y="995.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="553.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.10%)</title><rect x="552.2" y="1011.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="555.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (3 samples, 0.06%)</title><rect x="552.7" y="995.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="555.7" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="553.4" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="556.4" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="553.9" y="1059.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="556.9" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (663 samples, 13.19%)</title><rect x="554.3" y="1059.0" width="155.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="557.3" y="1070.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (663 samples, 13.19%)</title><rect x="554.3" y="1043.0" width="155.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="557.3" y="1054.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (654 samples, 13.01%)</title><rect x="554.3" y="1027.0" width="153.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="557.3" y="1038.0">sun/nio/ch/KQueueSe..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (632 samples, 12.58%)</title><rect x="554.8" y="1011.0" width="148.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="557.8" y="1022.0">sun/nio/ch/KQueue.p..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.08%)</title><rect x="561.1" y="995.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="564.1" y="1006.0"></text>
</g>
<g>
<title>kevent (601 samples, 11.96%)</title><rect x="562.1" y="995.0" width="141.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="565.1" y="1006.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 0.16%)</title><rect x="703.2" y="1011.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="706.2" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 0.16%)</title><rect x="703.2" y="995.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="706.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.16%)</title><rect x="703.2" y="979.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="706.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.16%)</title><rect x="703.2" y="963.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="706.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 0.16%)</title><rect x="703.2" y="947.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="706.2" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.06%)</title><rect x="705.1" y="1011.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="708.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (9 samples, 0.18%)</title><rect x="705.8" y="1011.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="708.8" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (2 samples, 0.04%)</title><rect x="707.4" y="995.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.4" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (9 samples, 0.18%)</title><rect x="707.9" y="1027.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (9 samples, 0.18%)</title><rect x="707.9" y="1011.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,533 samples, 30.51%)</title><rect x="710.3" y="1075.0" width="359.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="713.3" y="1086.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,528 samples, 30.41%)</title><rect x="711.0" y="1059.0" width="358.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="714.0" y="1070.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,314 samples, 26.15%)</title><rect x="711.4" y="1043.0" width="308.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="714.4" y="1054.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,241 samples, 24.70%)</title><rect x="714.5" y="1027.0" width="291.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.5" y="1038.0">one/nio/http/HttpSession.handleParsedRe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,238 samples, 24.64%)</title><rect x="715.2" y="1011.0" width="290.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.2" y="1022.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,204 samples, 23.96%)</title><rect x="715.2" y="995.0" width="282.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="718.2" y="1006.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (674 samples, 13.41%)</title><rect x="715.7" y="979.0" width="158.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="718.7" y="990.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (671 samples, 13.35%)</title><rect x="715.9" y="963.0" width="157.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.9" y="974.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (21 samples, 0.42%)</title><rect x="715.9" y="947.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="718.9" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="720.1" y="931.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="723.1" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (650 samples, 12.94%)</title><rect x="720.8" y="947.0" width="152.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="723.8" y="958.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session.write (650 samples, 12.94%)</title><rect x="720.8" y="931.0" width="152.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.8" y="942.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (647 samples, 12.88%)</title><rect x="721.1" y="915.0" width="151.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="724.1" y="926.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (647 samples, 12.88%)</title><rect x="721.1" y="899.0" width="151.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="724.1" y="910.0">one/nio/net/JavaSoc..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (646 samples, 12.86%)</title><rect x="721.3" y="883.0" width="151.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.3" y="894.0">sun/nio/ch/SocketCh..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="721.3" y="867.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="724.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="721.3" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="721.3" y="835.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="724.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="721.3" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="724.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="721.3" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="724.3" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="721.3" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="724.3" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="721.3" y="771.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="724.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (642 samples, 12.78%)</title><rect x="722.0" y="867.0" width="150.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.0" y="878.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (639 samples, 12.72%)</title><rect x="722.7" y="851.0" width="150.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="725.7" y="862.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (639 samples, 12.72%)</title><rect x="722.7" y="835.0" width="150.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="725.7" y="846.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (7 samples, 0.14%)</title><rect x="722.7" y="819.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="725.7" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (632 samples, 12.58%)</title><rect x="724.3" y="819.0" width="148.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.3" y="830.0">sun/nio/ch/SocketDi..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (622 samples, 12.38%)</title><rect x="726.7" y="803.0" width="146.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="729.7" y="814.0">sun/nio/ch/FileDis..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (8 samples, 0.16%)</title><rect x="732.6" y="787.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="735.6" y="798.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.04%)</title><rect x="734.4" y="787.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="737.4" y="798.0"></text>
</g>
<g>
<title>write (587 samples, 11.68%)</title><rect x="734.9" y="787.0" width="137.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="737.9" y="798.0">write</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="873.0" y="915.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="876.0" y="926.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="873.0" y="899.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="876.0" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (19 samples, 0.38%)</title><rect x="873.9" y="979.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="876.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (6 samples, 0.12%)</title><rect x="874.4" y="963.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="877.4" y="974.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.04%)</title><rect x="874.4" y="947.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="877.4" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.08%)</title><rect x="874.9" y="947.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="877.9" y="958.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.16%)</title><rect x="875.8" y="963.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="878.8" y="974.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (2 samples, 0.04%)</title><rect x="875.8" y="947.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="878.8" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="876.5" y="947.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="879.5" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="877.0" y="947.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="880.0" y="958.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.06%)</title><rect x="877.7" y="963.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="880.7" y="974.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="877.9" y="947.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="880.9" y="958.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="877.9" y="931.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="880.9" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="877.9" y="915.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="880.9" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.entity (509 samples, 10.13%)</title><rect x="878.4" y="979.0" width="119.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="881.4" y="990.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.get (504 samples, 10.03%)</title><rect x="878.6" y="963.0" width="118.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.6" y="974.0">ru/mail/polis/..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.04%)</title><rect x="879.1" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.1" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (43 samples, 0.86%)</title><rect x="879.8" y="947.0" width="10.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.8" y="958.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.04%)</title><rect x="879.8" y="931.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="882.8" y="942.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (8 samples, 0.16%)</title><rect x="880.3" y="931.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="883.3" y="942.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (3 samples, 0.06%)</title><rect x="880.3" y="915.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="883.3" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.10%)</title><rect x="881.0" y="915.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="884.0" y="926.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.08%)</title><rect x="881.2" y="899.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="884.2" y="910.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.06%)</title><rect x="881.4" y="883.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="884.4" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (25 samples, 0.50%)</title><rect x="882.6" y="931.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="885.6" y="942.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="885.0" y="915.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="888.0" y="926.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (7 samples, 0.14%)</title><rect x="885.4" y="915.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.4" y="926.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (6 samples, 0.12%)</title><rect x="885.7" y="899.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="888.7" y="910.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (2 samples, 0.04%)</title><rect x="887.1" y="915.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.1" y="926.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (3 samples, 0.06%)</title><rect x="887.8" y="915.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="890.8" y="926.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.04%)</title><rect x="888.5" y="931.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="891.5" y="942.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.08%)</title><rect x="889.0" y="931.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="892.0" y="942.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.04%)</title><rect x="889.4" y="915.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="892.4" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="889.4" y="899.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="892.4" y="910.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (4 samples, 0.08%)</title><rect x="890.1" y="947.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="893.1" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.06%)</title><rect x="891.1" y="947.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="894.1" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (11 samples, 0.22%)</title><rect x="891.8" y="947.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="894.8" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (3 samples, 0.06%)</title><rect x="893.6" y="931.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="896.6" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="893.6" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="896.6" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="893.6" y="899.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="896.6" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (437 samples, 8.70%)</title><rect x="894.4" y="947.0" width="102.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="897.4" y="958.0">ru/mail/poli..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (19 samples, 0.38%)</title><rect x="895.5" y="931.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="898.5" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/57494364.invoke (19 samples, 0.38%)</title><rect x="895.5" y="915.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="898.5" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (18 samples, 0.36%)</title><rect x="895.5" y="899.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="898.5" y="910.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2 samples, 0.04%)</title><rect x="895.5" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="898.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="895.5" y="867.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="898.5" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="895.5" y="851.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="898.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (3 samples, 0.06%)</title><rect x="896.0" y="883.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="899.0" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (12 samples, 0.24%)</title><rect x="896.7" y="883.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="899.7" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (10 samples, 0.20%)</title><rect x="897.2" y="867.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="900.2" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="898.6" y="851.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="901.6" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (37 samples, 0.74%)</title><rect x="900.0" y="931.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="903.0" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.08%)</title><rect x="900.0" y="915.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="903.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="901.2" y="915.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.2" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.04%)</title><rect x="901.2" y="899.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="904.2" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (28 samples, 0.56%)</title><rect x="901.6" y="915.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="904.6" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (24 samples, 0.48%)</title><rect x="902.6" y="899.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="905.6" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.18%)</title><rect x="904.0" y="883.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="907.0" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="905.6" y="867.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="908.6" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.04%)</title><rect x="906.1" y="883.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="909.1" y="894.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.04%)</title><rect x="906.1" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="909.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (3 samples, 0.06%)</title><rect x="906.8" y="883.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="909.8" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="907.7" y="883.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="910.7" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (2 samples, 0.04%)</title><rect x="908.2" y="915.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="911.2" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="908.2" y="899.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="911.2" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="908.2" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="911.2" y="894.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (361 samples, 7.18%)</title><rect x="908.7" y="931.0" width="84.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.7" y="942.0">org/rocksd..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (360 samples, 7.16%)</title><rect x="908.9" y="915.0" width="84.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="911.9" y="926.0">org/rocksd..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (355 samples, 7.06%)</title><rect x="909.9" y="899.0" width="83.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="912.9" y="910.0">Java_org_..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (4 samples, 0.08%)</title><rect x="912.9" y="883.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.9" y="894.0"></text>
</g>
<g>
<title>free (4 samples, 0.08%)</title><rect x="913.8" y="883.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="916.8" y="894.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.08%)</title><rect x="915.0" y="883.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="918.0" y="894.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.04%)</title><rect x="916.4" y="883.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="919.4" y="894.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.06%)</title><rect x="916.9" y="883.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="919.9" y="894.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.04%)</title><rect x="917.6" y="883.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="920.6" y="894.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (319 samples, 6.35%)</title><rect x="918.3" y="883.0" width="74.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.3" y="894.0">rocksdb_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.06%)</title><rect x="919.2" y="867.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="922.2" y="878.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.04%)</title><rect x="920.0" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="923.0" y="878.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.04%)</title><rect x="920.4" y="867.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.4" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="921.1" y="867.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.1" y="878.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="921.8" y="867.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="924.8" y="878.0"></text>
</g>
<g>
<title>free (5 samples, 0.10%)</title><rect x="923.0" y="867.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="926.0" y="878.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.06%)</title><rect x="923.5" y="851.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="926.5" y="862.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="924.2" y="867.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="927.2" y="878.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.14%)</title><rect x="924.6" y="867.0" width="1.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="927.6" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.10%)</title><rect x="925.1" y="851.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.1" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.06%)</title><rect x="925.6" y="835.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="928.6" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="925.6" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.6" y="830.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="925.6" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="928.6" y="814.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="925.6" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.6" y="798.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (29 samples, 0.58%)</title><rect x="926.3" y="867.0" width="6.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="929.3" y="878.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (3 samples, 0.06%)</title><rect x="928.2" y="851.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="931.2" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (3 samples, 0.06%)</title><rect x="929.3" y="851.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="932.3" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.16%)</title><rect x="930.0" y="851.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="933.0" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.16%)</title><rect x="930.0" y="835.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.0" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.14%)</title><rect x="930.0" y="819.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.0" y="830.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.14%)</title><rect x="930.0" y="803.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="933.0" y="814.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.14%)</title><rect x="930.0" y="787.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.0" y="798.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (2 samples, 0.04%)</title><rect x="931.0" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.0" y="782.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="931.9" y="851.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="934.9" y="862.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="933.1" y="867.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="936.1" y="878.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.08%)</title><rect x="933.6" y="867.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="936.6" y="878.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.08%)</title><rect x="933.6" y="851.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="936.6" y="862.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.08%)</title><rect x="933.6" y="835.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="936.6" y="846.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.04%)</title><rect x="933.8" y="819.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="936.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (249 samples, 4.96%)</title><rect x="934.5" y="867.0" width="58.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.5" y="878.0">rocksd..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (247 samples, 4.92%)</title><rect x="935.0" y="851.0" width="58.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.0" y="862.0">rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (244 samples, 4.86%)</title><rect x="935.7" y="835.0" width="57.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="938.7" y="846.0">rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (234 samples, 4.66%)</title><rect x="936.9" y="819.0" width="54.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="939.9" y="830.0">rocks..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.12%)</title><rect x="939.4" y="803.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="942.4" y="814.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Close() (2 samples, 0.04%)</title><rect x="940.8" y="803.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="943.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (9 samples, 0.18%)</title><rect x="941.3" y="803.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (4 samples, 0.08%)</title><rect x="941.8" y="787.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.06%)</title><rect x="942.7" y="787.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.04%)</title><rect x="943.0" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="946.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.06%)</title><rect x="943.4" y="803.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.4" y="814.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.04%)</title><rect x="943.7" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="944.1" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="947.1" y="814.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (2 samples, 0.04%)</title><rect x="944.6" y="803.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.6" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (83 samples, 1.65%)</title><rect x="945.3" y="803.0" width="19.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.08%)</title><rect x="946.7" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="949.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (3 samples, 0.06%)</title><rect x="947.9" y="787.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (69 samples, 1.37%)</title><rect x="948.6" y="787.0" width="16.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.6" y="798.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="955.4" y="771.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="958.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (35 samples, 0.70%)</title><rect x="956.1" y="771.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="959.1" y="782.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.10%)</title><rect x="959.2" y="755.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="962.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (14 samples, 0.28%)</title><rect x="960.6" y="755.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="963.6" y="766.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.14%)</title><rect x="962.2" y="739.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="965.2" y="750.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="963.9" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="966.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (2 samples, 0.04%)</title><rect x="964.8" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="967.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (3 samples, 0.06%)</title><rect x="965.3" y="803.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="968.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.04%)</title><rect x="966.0" y="803.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (99 samples, 1.97%)</title><rect x="967.4" y="803.0" width="23.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="970.4" y="814.0">r..</text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (4 samples, 0.08%)</title><rect x="971.8" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (3 samples, 0.06%)</title><rect x="972.8" y="787.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.04%)</title><rect x="973.5" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.5" y="798.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int) (68 samples, 1.35%)</title><rect x="974.0" y="787.0" width="15.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="977.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (56 samples, 1.11%)</title><rect x="975.6" y="771.0" width="13.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="978.6" y="782.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (2 samples, 0.04%)</title><rect x="979.8" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (36 samples, 0.72%)</title><rect x="980.3" y="755.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.3" y="766.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="984.8" y="739.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="987.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (10 samples, 0.20%)</title><rect x="985.7" y="739.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.08%)</title><rect x="986.6" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.6" y="734.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="987.6" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="988.0" y="739.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.04%)</title><rect x="989.0" y="771.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (3 samples, 0.06%)</title><rect x="989.9" y="787.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.9" y="798.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.10%)</title><rect x="990.6" y="803.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.6" y="814.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="991.8" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.8" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (14 samples, 0.28%)</title><rect x="993.5" y="931.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="996.5" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (12 samples, 0.24%)</title><rect x="993.9" y="915.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="996.9" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (6 samples, 0.12%)</title><rect x="993.9" y="899.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="996.9" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.10%)</title><rect x="994.2" y="883.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="997.2" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (2 samples, 0.04%)</title><rect x="994.4" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="997.4" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="994.9" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="997.9" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="994.9" y="851.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="997.9" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.12%)</title><rect x="995.3" y="899.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="998.3" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="995.8" y="883.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="998.8" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="995.8" y="867.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="998.8" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="996.0" y="851.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="999.0" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="996.0" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="999.0" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="996.0" y="819.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="999.0" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="996.0" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="999.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/SimpleSer.put (4 samples, 0.08%)</title><rect x="997.0" y="963.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1000.0" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (2 samples, 0.04%)</title><rect x="997.4" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1000.4" y="958.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (31 samples, 0.62%)</title><rect x="998.4" y="995.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1001.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (31 samples, 0.62%)</title><rect x="998.4" y="979.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1001.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (18 samples, 0.36%)</title><rect x="998.4" y="963.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1001.4" y="974.0"></text>
</g>
<g>
<title>java/lang/String.equals (15 samples, 0.30%)</title><rect x="998.6" y="947.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1001.6" y="958.0"></text>
</g>
<g>
<title>__cxx_global_var_init (4 samples, 0.08%)</title><rect x="999.1" y="931.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1002.1" y="942.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.08%)</title><rect x="1000.0" y="931.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1003.0" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.10%)</title><rect x="1001.0" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1004.0" y="942.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.10%)</title><rect x="1001.0" y="915.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1004.0" y="926.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.08%)</title><rect x="1001.2" y="899.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1004.2" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="1002.1" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1005.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (13 samples, 0.26%)</title><rect x="1002.6" y="963.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1005.6" y="974.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (13 samples, 0.26%)</title><rect x="1002.6" y="947.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1005.6" y="958.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (25 samples, 0.50%)</title><rect x="1005.9" y="1027.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1008.9" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (14 samples, 0.28%)</title><rect x="1005.9" y="1011.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1008.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.14%)</title><rect x="1007.5" y="995.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1010.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.14%)</title><rect x="1007.5" y="979.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1010.5" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.06%)</title><rect x="1008.2" y="963.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1011.2" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.22%)</title><rect x="1009.2" y="1011.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1012.2" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.22%)</title><rect x="1009.2" y="995.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1012.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (24 samples, 0.48%)</title><rect x="1011.8" y="1027.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1014.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (22 samples, 0.44%)</title><rect x="1012.2" y="1011.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1015.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (17 samples, 0.34%)</title><rect x="1012.2" y="995.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1015.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Character.digit (11 samples, 0.22%)</title><rect x="1012.7" y="979.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1015.7" y="990.0"></text>
</g>
<g>
<title>java/lang/Character.digit (11 samples, 0.22%)</title><rect x="1012.7" y="963.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1015.7" y="974.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (10 samples, 0.20%)</title><rect x="1012.9" y="947.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1015.9" y="958.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.08%)</title><rect x="1015.3" y="979.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1018.3" y="990.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="1015.3" y="963.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1018.3" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.04%)</title><rect x="1015.8" y="963.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1018.8" y="974.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.10%)</title><rect x="1016.2" y="995.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1019.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (5 samples, 0.10%)</title><rect x="1017.4" y="1027.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1020.4" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="1018.6" y="1027.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1021.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="1019.0" y="1027.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1022.0" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="1019.0" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1022.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (212 samples, 4.22%)</title><rect x="1020.0" y="1043.0" width="49.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1023.0" y="1054.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (212 samples, 4.22%)</title><rect x="1020.0" y="1027.0" width="49.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1023.0" y="1038.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="1020.0" y="1011.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1023.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1020.0" y="995.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1023.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1020.0" y="979.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1023.0" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (209 samples, 4.16%)</title><rect x="1020.7" y="1011.0" width="49.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1023.7" y="1022.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.06%)</title><rect x="1020.9" y="995.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1023.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="1020.9" y="979.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1023.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.06%)</title><rect x="1020.9" y="963.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1023.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.06%)</title><rect x="1020.9" y="947.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1023.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.06%)</title><rect x="1020.9" y="931.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1023.9" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.06%)</title><rect x="1020.9" y="915.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1023.9" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.06%)</title><rect x="1020.9" y="899.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1023.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.04%)</title><rect x="1021.6" y="995.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="1021.6" y="979.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1024.6" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (202 samples, 4.02%)</title><rect x="1022.3" y="995.0" width="47.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1025.3" y="1006.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (202 samples, 4.02%)</title><rect x="1022.3" y="979.0" width="47.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.3" y="990.0">sun/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.08%)</title><rect x="1022.8" y="963.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1025.8" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.08%)</title><rect x="1022.8" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1025.8" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.06%)</title><rect x="1022.8" y="931.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.8" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="1022.8" y="915.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1025.8" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.06%)</title><rect x="1022.8" y="899.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1025.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (185 samples, 3.68%)</title><rect x="1023.7" y="963.0" width="43.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1026.7" y="974.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (181 samples, 3.60%)</title><rect x="1024.7" y="947.0" width="42.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1027.7" y="958.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (181 samples, 3.60%)</title><rect x="1024.7" y="931.0" width="42.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1027.7" y="942.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (8 samples, 0.16%)</title><rect x="1028.2" y="915.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1031.2" y="926.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.06%)</title><rect x="1029.4" y="899.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1032.4" y="910.0"></text>
</g>
<g>
<title>read (158 samples, 3.14%)</title><rect x="1030.1" y="915.0" width="37.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1033.1" y="926.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.18%)</title><rect x="1067.2" y="963.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1070.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.12%)</title><rect x="1067.2" y="947.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.06%)</title><rect x="1067.9" y="931.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.9" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.06%)</title><rect x="1068.6" y="947.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1071.6" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.04%)</title><rect x="1069.3" y="963.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1072.3" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="1069.8" y="1059.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.8" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="1070.2" y="1091.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.2" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="1070.7" y="1091.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.7" y="1102.0"></text>
</g>
<g>
<title>[tid=19459] (2 samples, 0.04%)</title><rect x="1071.2" y="1107.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1074.2" y="1118.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.04%)</title><rect x="1071.2" y="1091.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1074.2" y="1102.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.04%)</title><rect x="1071.2" y="1075.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1074.2" y="1086.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.04%)</title><rect x="1071.2" y="1059.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1074.2" y="1070.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.04%)</title><rect x="1071.2" y="1043.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1074.2" y="1054.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.04%)</title><rect x="1071.2" y="1027.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1074.2" y="1038.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.04%)</title><rect x="1071.2" y="1011.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1074.2" y="1022.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.04%)</title><rect x="1071.2" y="995.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1074.2" y="1006.0"></text>
</g>
<g>
<title>[tid=19971] (2 samples, 0.04%)</title><rect x="1071.6" y="1107.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1074.6" y="1118.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.04%)</title><rect x="1071.6" y="1091.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1074.6" y="1102.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.04%)</title><rect x="1071.6" y="1075.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1074.6" y="1086.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.04%)</title><rect x="1071.6" y="1059.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1074.6" y="1070.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.04%)</title><rect x="1071.6" y="1043.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1074.6" y="1054.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.04%)</title><rect x="1071.6" y="1027.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.6" y="1038.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.04%)</title><rect x="1071.6" y="1011.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.6" y="1022.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.04%)</title><rect x="1071.6" y="995.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.6" y="1006.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 0.04%)</title><rect x="1071.6" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.6" y="990.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title><rect x="1071.6" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1074.6" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title><rect x="1071.6" y="947.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.6" y="958.0"></text>
</g>
<g>
<title>[tid=22019] (487 samples, 9.69%)</title><rect x="1072.1" y="1107.0" width="114.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1075.1" y="1118.0">[tid=22019]</text>
</g>
<g>
<title>thread_start (487 samples, 9.69%)</title><rect x="1072.1" y="1091.0" width="114.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1075.1" y="1102.0">thread_start</text>
</g>
<g>
<title>_pthread_start (487 samples, 9.69%)</title><rect x="1072.1" y="1075.0" width="114.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1075.1" y="1086.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (487 samples, 9.69%)</title><rect x="1072.1" y="1059.0" width="114.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1075.1" y="1070.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (487 samples, 9.69%)</title><rect x="1072.1" y="1043.0" width="114.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1075.1" y="1054.0">thread_native_..</text>
</g>
<g>
<title>Thread::call_run() (487 samples, 9.69%)</title><rect x="1072.1" y="1027.0" width="114.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1075.1" y="1038.0">Thread::call_r..</text>
</g>
<g>
<title>JavaThread::run() (487 samples, 9.69%)</title><rect x="1072.1" y="1011.0" width="114.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.1" y="1022.0">JavaThread::ru..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (487 samples, 9.69%)</title><rect x="1072.1" y="995.0" width="114.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.1" y="1006.0">JavaThread::th..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (487 samples, 9.69%)</title><rect x="1072.1" y="979.0" width="114.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.1" y="990.0">CompileBroker:..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (487 samples, 9.69%)</title><rect x="1072.1" y="963.0" width="114.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.1" y="974.0">CompileBroker:..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (486 samples, 9.67%)</title><rect x="1072.1" y="947.0" width="114.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.1" y="958.0">C2Compiler::co..</text>
</g>
<g>
<title>Arena::~Arena() (2 samples, 0.04%)</title><rect x="1072.1" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1075.1" y="942.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (2 samples, 0.04%)</title><rect x="1072.1" y="915.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.1" y="926.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.04%)</title><rect x="1072.1" y="899.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.1" y="910.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (484 samples, 9.63%)</title><rect x="1072.6" y="931.0" width="113.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1075.6" y="942.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (263 samples, 5.23%)</title><rect x="1072.6" y="915.0" width="61.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.6" y="926.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (7 samples, 0.14%)</title><rect x="1072.6" y="899.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.6" y="910.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.08%)</title><rect x="1072.6" y="883.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.6" y="894.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.06%)</title><rect x="1073.5" y="883.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.5" y="894.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (2 samples, 0.04%)</title><rect x="1073.5" y="867.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.5" y="878.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (2 samples, 0.04%)</title><rect x="1073.5" y="851.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.5" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.10%)</title><rect x="1074.2" y="899.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.2" y="910.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (2 samples, 0.04%)</title><rect x="1074.7" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.7" y="894.0"></text>
</g>
<g>
<title>Matcher::match() (15 samples, 0.30%)</title><rect x="1075.4" y="899.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.4" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (15 samples, 0.30%)</title><rect x="1075.4" y="883.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.4" y="894.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.06%)</title><rect x="1075.4" y="867.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.4" y="878.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (9 samples, 0.18%)</title><rect x="1076.3" y="867.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.3" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.08%)</title><rect x="1077.0" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.0" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.06%)</title><rect x="1077.0" y="835.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.0" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.04%)</title><rect x="1077.3" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.3" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.04%)</title><rect x="1078.0" y="851.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.0" y="862.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.04%)</title><rect x="1078.0" y="835.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.0" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.04%)</title><rect x="1078.0" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.0" y="830.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.04%)</title><rect x="1078.9" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.9" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (30 samples, 0.60%)</title><rect x="1079.4" y="899.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.4" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (30 samples, 0.60%)</title><rect x="1079.4" y="883.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.10%)</title><rect x="1079.6" y="867.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.6" y="878.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.04%)</title><rect x="1079.9" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.9" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.06%)</title><rect x="1080.8" y="867.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (2 samples, 0.04%)</title><rect x="1081.0" y="851.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.0" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.04%)</title><rect x="1081.5" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.5" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (5 samples, 0.10%)</title><rect x="1082.0" y="867.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.0" y="878.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1082.7" y="851.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1085.7" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (14 samples, 0.28%)</title><rect x="1083.2" y="867.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.2" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (8 samples, 0.16%)</title><rect x="1084.1" y="851.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1087.1" y="862.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.12%)</title><rect x="1084.1" y="835.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.1" y="846.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (2 samples, 0.04%)</title><rect x="1086.0" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.0" y="862.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (2 samples, 0.04%)</title><rect x="1086.0" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (202 samples, 4.02%)</title><rect x="1086.7" y="899.0" width="47.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.7" y="910.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (2 samples, 0.04%)</title><rect x="1086.7" y="883.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.7" y="894.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.04%)</title><rect x="1087.4" y="883.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.4" y="894.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (13 samples, 0.26%)</title><rect x="1087.9" y="883.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (9 samples, 0.18%)</title><rect x="1090.9" y="883.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 0.04%)</title><rect x="1091.4" y="867.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.4" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.10%)</title><rect x="1091.8" y="867.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.8" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.04%)</title><rect x="1092.1" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.1" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="1092.5" y="851.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (9 samples, 0.18%)</title><rect x="1093.0" y="883.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.0" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.08%)</title><rect x="1094.2" y="867.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (26 samples, 0.52%)</title><rect x="1095.1" y="883.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (3 samples, 0.06%)</title><rect x="1099.6" y="867.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.6" y="878.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int) (3 samples, 0.06%)</title><rect x="1100.3" y="867.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.3" y="878.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (3 samples, 0.06%)</title><rect x="1100.3" y="851.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (51 samples, 1.01%)</title><rect x="1101.5" y="883.0" width="11.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.5" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.08%)</title><rect x="1103.1" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.1" y="878.0"></text>
</g>
<g>
<title>Node::jvms() const (2 samples, 0.04%)</title><rect x="1104.3" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (8 samples, 0.16%)</title><rect x="1104.8" y="867.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (7 samples, 0.14%)</title><rect x="1107.1" y="867.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.1" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="1107.6" y="851.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.04%)</title><rect x="1108.3" y="851.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (12 samples, 0.24%)</title><rect x="1108.8" y="867.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.8" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.08%)</title><rect x="1108.8" y="851.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.8" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.04%)</title><rect x="1109.7" y="851.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.7" y="862.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (6 samples, 0.12%)</title><rect x="1110.2" y="851.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (6 samples, 0.12%)</title><rect x="1111.6" y="867.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.6" y="878.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.06%)</title><rect x="1112.3" y="851.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.3" y="862.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (2 samples, 0.04%)</title><rect x="1113.0" y="867.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (19 samples, 0.38%)</title><rect x="1113.7" y="883.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.7" y="894.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (3 samples, 0.06%)</title><rect x="1117.0" y="867.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.0" y="878.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.04%)</title><rect x="1117.2" y="851.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (16 samples, 0.32%)</title><rect x="1118.1" y="883.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.08%)</title><rect x="1119.8" y="867.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (2 samples, 0.04%)</title><rect x="1120.3" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.3" y="862.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (4 samples, 0.08%)</title><rect x="1120.7" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.7" y="878.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 0.20%)</title><rect x="1122.1" y="883.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.1" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 0.14%)</title><rect x="1122.4" y="867.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.4" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 0.14%)</title><rect x="1122.4" y="851.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.4" y="862.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.04%)</title><rect x="1122.4" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.4" y="846.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.04%)</title><rect x="1122.4" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.4" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.10%)</title><rect x="1122.8" y="835.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.8" y="846.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.10%)</title><rect x="1122.8" y="819.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.8" y="830.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (2 samples, 0.04%)</title><rect x="1124.0" y="867.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.0" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (6 samples, 0.12%)</title><rect x="1124.5" y="883.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.5" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (6 samples, 0.12%)</title><rect x="1124.5" y="867.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.5" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="1125.4" y="851.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.4" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.08%)</title><rect x="1125.9" y="883.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.9" y="894.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="1125.9" y="867.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.9" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (5 samples, 0.10%)</title><rect x="1126.8" y="883.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.8" y="894.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.04%)</title><rect x="1127.1" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.1" y="878.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1127.5" y="867.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1130.5" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (22 samples, 0.44%)</title><rect x="1128.0" y="883.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.0" y="894.0"></text>
</g>
<g>
<title>IndexSet::clear() (3 samples, 0.06%)</title><rect x="1129.9" y="867.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.9" y="878.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="1130.6" y="867.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.6" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.14%)</title><rect x="1131.1" y="867.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.1" y="878.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.08%)</title><rect x="1131.5" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.5" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (179 samples, 3.56%)</title><rect x="1134.3" y="915.0" width="42.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.3" y="926.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.06%)</title><rect x="1134.3" y="899.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.3" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (3 samples, 0.06%)</title><rect x="1134.3" y="883.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.3" y="894.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (75 samples, 1.49%)</title><rect x="1135.1" y="899.0" width="17.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.1" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (75 samples, 1.49%)</title><rect x="1135.1" y="883.0" width="17.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.08%)</title><rect x="1135.3" y="867.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.3" y="878.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.04%)</title><rect x="1135.8" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.12%)</title><rect x="1136.2" y="867.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1137.2" y="851.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1137.2" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (39 samples, 0.78%)</title><rect x="1137.6" y="867.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (32 samples, 0.64%)</title><rect x="1139.3" y="851.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1139.5" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.04%)</title><rect x="1139.5" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.5" y="830.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.04%)</title><rect x="1139.5" y="803.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (23 samples, 0.46%)</title><rect x="1140.0" y="835.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (5 samples, 0.10%)</title><rect x="1140.9" y="819.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (5 samples, 0.10%)</title><rect x="1140.9" y="803.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (5 samples, 0.10%)</title><rect x="1140.9" y="787.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (4 samples, 0.08%)</title><rect x="1141.2" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.06%)</title><rect x="1141.4" y="755.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.4" y="766.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (3 samples, 0.06%)</title><rect x="1141.4" y="739.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.06%)</title><rect x="1142.1" y="819.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1142.3" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (10 samples, 0.20%)</title><rect x="1143.0" y="819.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.06%)</title><rect x="1143.0" y="803.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (7 samples, 0.14%)</title><rect x="1143.7" y="803.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (7 samples, 0.14%)</title><rect x="1143.7" y="787.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.7" y="798.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (3 samples, 0.06%)</title><rect x="1144.7" y="771.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (5 samples, 0.10%)</title><rect x="1145.4" y="835.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.4" y="846.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (5 samples, 0.10%)</title><rect x="1145.4" y="819.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.06%)</title><rect x="1146.8" y="867.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (11 samples, 0.22%)</title><rect x="1147.7" y="867.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (4 samples, 0.08%)</title><rect x="1147.7" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1148.0" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (7 samples, 0.14%)</title><rect x="1148.7" y="851.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1148.7" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (3 samples, 0.06%)</title><rect x="1149.4" y="835.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.14%)</title><rect x="1150.3" y="867.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.3" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.12%)</title><rect x="1150.3" y="851.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.3" y="862.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (5 samples, 0.10%)</title><rect x="1150.5" y="835.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.5" y="846.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (5 samples, 0.10%)</title><rect x="1150.5" y="819.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.10%)</title><rect x="1150.5" y="803.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.10%)</title><rect x="1150.5" y="787.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.10%)</title><rect x="1150.5" y="771.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1150.5" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.06%)</title><rect x="1150.5" y="739.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.06%)</title><rect x="1150.5" y="723.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.06%)</title><rect x="1150.5" y="707.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.06%)</title><rect x="1150.5" y="691.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.06%)</title><rect x="1150.5" y="675.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1150.5" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1150.5" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1150.5" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.5" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1150.5" y="611.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.5" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1150.5" y="595.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.5" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1150.5" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.5" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1150.5" y="563.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.5" y="574.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.04%)</title><rect x="1150.5" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.5" y="558.0"></text>
</g>
<g>
<title>SuperWord::transform_loop(IdealLoopTree*, bool) (2 samples, 0.04%)</title><rect x="1152.2" y="867.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.2" y="878.0"></text>
</g>
<g>
<title>SuperWord::SLP_extract() (2 samples, 0.04%)</title><rect x="1152.2" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.2" y="862.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.06%)</title><rect x="1152.7" y="899.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.06%)</title><rect x="1153.4" y="899.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.06%)</title><rect x="1153.4" y="883.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.4" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (8 samples, 0.16%)</title><rect x="1154.1" y="899.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.1" y="910.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (4 samples, 0.08%)</title><rect x="1155.0" y="883.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="894.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (2 samples, 0.04%)</title><rect x="1155.5" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (63 samples, 1.25%)</title><rect x="1156.2" y="899.0" width="14.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.14%)</title><rect x="1156.4" y="883.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (33 samples, 0.66%)</title><rect x="1158.3" y="883.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (23 samples, 0.46%)</title><rect x="1160.2" y="867.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (20 samples, 0.40%)</title><rect x="1160.6" y="851.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.04%)</title><rect x="1160.9" y="835.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1161.4" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.4" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (15 samples, 0.30%)</title><rect x="1161.8" y="835.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.08%)</title><rect x="1161.8" y="819.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (11 samples, 0.22%)</title><rect x="1162.8" y="819.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (10 samples, 0.20%)</title><rect x="1163.0" y="803.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.0" y="814.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (7 samples, 0.14%)</title><rect x="1163.7" y="787.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="1165.6" y="867.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.06%)</title><rect x="1166.0" y="883.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.04%)</title><rect x="1166.8" y="883.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.8" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (14 samples, 0.28%)</title><rect x="1167.2" y="883.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.2" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 0.26%)</title><rect x="1167.5" y="867.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.5" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (2 samples, 0.04%)</title><rect x="1168.2" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.2" y="862.0"></text>
</g>
<g>
<title>ConNode::hash() const (2 samples, 0.04%)</title><rect x="1168.2" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.2" y="846.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (2 samples, 0.04%)</title><rect x="1168.2" y="819.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.2" y="830.0"></text>
</g>
<g>
<title>TypeOopPtr::hash() const (2 samples, 0.04%)</title><rect x="1168.2" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.2" y="814.0"></text>
</g>
<g>
<title>ciObject::hash() (2 samples, 0.04%)</title><rect x="1168.2" y="787.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.2" y="798.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (2 samples, 0.04%)</title><rect x="1168.2" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.06%)</title><rect x="1169.3" y="851.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.3" y="862.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.04%)</title><rect x="1169.6" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="846.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1170.0" y="851.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.04%)</title><rect x="1170.0" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1170.0" y="819.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1170.0" y="803.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.0" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1170.0" y="787.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.0" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1170.0" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.0" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1170.0" y="755.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1170.0" y="739.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1170.0" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.0" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (14 samples, 0.28%)</title><rect x="1171.2" y="899.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.2" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (14 samples, 0.28%)</title><rect x="1171.2" y="883.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="894.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.08%)</title><rect x="1172.6" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (2 samples, 0.04%)</title><rect x="1173.1" y="851.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.1" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.04%)</title><rect x="1173.1" y="835.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.1" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.04%)</title><rect x="1173.1" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.1" y="830.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1173.8" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="878.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.04%)</title><rect x="1173.8" y="851.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1173.8" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1173.8" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (4 samples, 0.08%)</title><rect x="1174.7" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (2 samples, 0.04%)</title><rect x="1175.2" y="883.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (2 samples, 0.04%)</title><rect x="1175.2" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="878.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.04%)</title><rect x="1175.7" y="899.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.7" y="910.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (8 samples, 0.16%)</title><rect x="1176.4" y="915.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="926.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.04%)</title><rect x="1176.4" y="899.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="910.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (3 samples, 0.06%)</title><rect x="1176.8" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1176.8" y="883.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1176.8" y="867.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1176.8" y="851.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1176.8" y="835.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1176.8" y="819.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1176.8" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1176.8" y="787.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1176.8" y="771.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1176.8" y="755.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1176.8" y="739.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1176.8" y="723.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1176.8" y="707.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1177.1" y="691.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1177.1" y="675.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1177.1" y="659.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1177.1" y="643.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1177.1" y="627.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1177.1" y="611.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1177.1" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>PhaseStringOpts::PhaseStringOpts(PhaseGVN*, Unique_Node_List*) (2 samples, 0.04%)</title><rect x="1177.8" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="910.0"></text>
</g>
<g>
<title>PhaseStringOpts::replace_string_concat(StringConcat*) (2 samples, 0.04%)</title><rect x="1177.8" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="894.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.04%)</title><rect x="1178.3" y="915.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (31 samples, 0.62%)</title><rect x="1178.7" y="915.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (31 samples, 0.62%)</title><rect x="1178.7" y="899.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (31 samples, 0.62%)</title><rect x="1178.7" y="883.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (31 samples, 0.62%)</title><rect x="1178.7" y="867.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (29 samples, 0.58%)</title><rect x="1178.7" y="851.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (24 samples, 0.48%)</title><rect x="1178.7" y="835.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (24 samples, 0.48%)</title><rect x="1178.7" y="819.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (23 samples, 0.46%)</title><rect x="1178.7" y="803.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (23 samples, 0.46%)</title><rect x="1178.7" y="787.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (22 samples, 0.44%)</title><rect x="1179.0" y="771.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.38%)</title><rect x="1179.2" y="755.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.38%)</title><rect x="1179.2" y="739.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 0.38%)</title><rect x="1179.2" y="723.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 0.38%)</title><rect x="1179.2" y="707.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 0.34%)</title><rect x="1179.2" y="691.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1179.4" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1179.4" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1179.4" y="643.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1179.4" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1179.4" y="611.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1179.4" y="595.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1179.4" y="579.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1179.7" y="563.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1179.7" y="547.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (12 samples, 0.24%)</title><rect x="1180.4" y="675.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.24%)</title><rect x="1180.4" y="659.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.24%)</title><rect x="1180.4" y="643.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.24%)</title><rect x="1180.4" y="627.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.24%)</title><rect x="1180.4" y="611.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.22%)</title><rect x="1180.4" y="595.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.22%)</title><rect x="1180.4" y="579.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.22%)</title><rect x="1180.4" y="563.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.22%)</title><rect x="1180.4" y="547.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.22%)</title><rect x="1180.4" y="531.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.22%)</title><rect x="1180.4" y="515.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.22%)</title><rect x="1180.4" y="499.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.22%)</title><rect x="1180.4" y="483.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.22%)</title><rect x="1180.4" y="467.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.22%)</title><rect x="1180.4" y="451.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.20%)</title><rect x="1180.4" y="435.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1180.6" y="419.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1180.6" y="403.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1180.6" y="387.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1180.6" y="371.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1180.6" y="355.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1181.5" y="419.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1181.5" y="403.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="1181.5" y="387.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1181.5" y="371.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1181.5" y="355.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="1181.5" y="339.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1181.5" y="323.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1181.5" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1181.5" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1181.5" y="275.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="1181.5" y="259.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1181.5" y="243.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1181.5" y="227.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1181.5" y="211.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1181.5" y="195.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="1181.5" y="179.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1181.5" y="163.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1181.5" y="147.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1181.8" y="131.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1181.8" y="115.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1181.8" y="99.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1181.8" y="83.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1181.8" y="67.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1181.8" y="51.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1181.8" y="35.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1183.7" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1183.7" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1183.7" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1183.7" y="707.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1183.7" y="691.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1183.7" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1183.7" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1183.7" y="643.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1183.7" y="627.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1183.7" y="611.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1183.7" y="595.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1183.7" y="579.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1183.7" y="563.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1183.7" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1183.7" y="531.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1183.7" y="515.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.7" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1184.4" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1184.4" y="819.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="1184.4" y="803.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.10%)</title><rect x="1184.4" y="787.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.10%)</title><rect x="1184.4" y="771.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.10%)</title><rect x="1184.4" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1184.4" y="739.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="1184.4" y="723.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.10%)</title><rect x="1184.4" y="707.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.10%)</title><rect x="1184.4" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.10%)</title><rect x="1184.4" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1184.4" y="659.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="1184.4" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.10%)</title><rect x="1184.4" y="627.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.10%)</title><rect x="1184.4" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.10%)</title><rect x="1184.4" y="595.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1184.4" y="579.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1184.4" y="563.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1184.4" y="547.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1184.4" y="531.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1184.4" y="515.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.4" y="499.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1184.4" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1184.4" y="467.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1184.4" y="451.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="462.0"></text>
</g>
<g>
<title>[tid=41475] (3 samples, 0.06%)</title><rect x="1186.7" y="1107.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1189.7" y="1118.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.06%)</title><rect x="1186.7" y="1091.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1189.7" y="1102.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.06%)</title><rect x="1186.7" y="1075.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1189.7" y="1086.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.06%)</title><rect x="1186.7" y="1059.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1189.7" y="1070.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.06%)</title><rect x="1186.7" y="1043.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1189.7" y="1054.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.06%)</title><rect x="1186.7" y="1027.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.7" y="1038.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.06%)</title><rect x="1186.7" y="1011.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="1022.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 0.06%)</title><rect x="1186.7" y="995.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="1006.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.06%)</title><rect x="1186.7" y="979.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="990.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.06%)</title><rect x="1186.7" y="963.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="1186.7" y="947.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="1186.7" y="931.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1189.7" y="942.0"></text>
</g>
<g>
<title>[tid=41987] (6 samples, 0.12%)</title><rect x="1187.4" y="1107.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.4" y="1118.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.12%)</title><rect x="1187.4" y="1091.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1190.4" y="1102.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.12%)</title><rect x="1187.4" y="1075.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1190.4" y="1086.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.12%)</title><rect x="1187.4" y="1059.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1190.4" y="1070.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.12%)</title><rect x="1187.4" y="1043.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1190.4" y="1054.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.12%)</title><rect x="1187.4" y="1027.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (6 samples, 0.12%)</title><rect x="1187.4" y="1011.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.4" y="1022.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (6 samples, 0.12%)</title><rect x="1187.4" y="995.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.4" y="1006.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (6 samples, 0.12%)</title><rect x="1187.4" y="979.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.4" y="990.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (5 samples, 0.10%)</title><rect x="1187.4" y="963.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.4" y="974.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (5 samples, 0.10%)</title><rect x="1187.4" y="947.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.4" y="958.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (4 samples, 0.08%)</title><rect x="1187.4" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.4" y="942.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (4 samples, 0.08%)</title><rect x="1187.4" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.4" y="926.0"></text>
</g>
<g>
<title>[tid=42755] (5 samples, 0.10%)</title><rect x="1188.8" y="1107.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.8" y="1118.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.08%)</title><rect x="1189.1" y="1091.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1192.1" y="1102.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.08%)</title><rect x="1189.1" y="1075.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1192.1" y="1086.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.08%)</title><rect x="1189.1" y="1059.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1192.1" y="1070.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.08%)</title><rect x="1189.1" y="1043.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1192.1" y="1054.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.08%)</title><rect x="1189.1" y="1027.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.08%)</title><rect x="1189.1" y="1011.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="1022.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.08%)</title><rect x="1189.1" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.1" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (4 samples, 0.08%)</title><rect x="1189.1" y="979.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.1" y="990.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.06%)</title><rect x="1189.1" y="963.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.1" y="974.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.06%)</title><rect x="1189.1" y="947.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.06%)</title><rect x="1189.1" y="931.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.06%)</title><rect x="1189.1" y="915.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.1" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.06%)</title><rect x="1189.1" y="899.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.1" y="910.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.04%)</title><rect x="1189.1" y="883.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.1" y="894.0"></text>
</g>
</g>
</svg>
