<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (5,420 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=40707] (1,342 samples, 24.76%)</title><rect x="10.2" y="1043.0" width="292.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.2" y="1054.0">[NIO Selector #0 tid=40707]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.04%)</title><rect x="10.2" y="1027.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.2" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.04%)</title><rect x="10.2" y="1011.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.2" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.04%)</title><rect x="10.2" y="995.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.2" y="1006.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.04%)</title><rect x="10.2" y="979.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.2" y="990.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.04%)</title><rect x="10.2" y="963.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.2" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.04%)</title><rect x="10.2" y="947.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.2" y="958.0"></text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.11%)</title><rect x="11.1" y="1027.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="14.1" y="1038.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (4 samples, 0.07%)</title><rect x="11.5" y="1011.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.5" y="1022.0"></text>
</g>
<g>
<title>caller_is_deopted() (2 samples, 0.04%)</title><rect x="11.7" y="995.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.7" y="1006.0"></text>
</g>
<g>
<title>[unknown_Java] (8 samples, 0.15%)</title><rect x="12.4" y="1027.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="15.4" y="1038.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,320 samples, 24.35%)</title><rect x="14.4" y="1027.0" width="287.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.4" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (586 samples, 10.81%)</title><rect x="14.8" y="1011.0" width="127.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.8" y="1022.0">one/nio/net/Java..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.07%)</title><rect x="15.9" y="995.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectionKey.isValid (2 samples, 0.04%)</title><rect x="16.1" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.1" y="990.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.06%)</title><rect x="16.7" y="995.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.7" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (572 samples, 10.55%)</title><rect x="17.6" y="995.0" width="124.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.6" y="1006.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (572 samples, 10.55%)</title><rect x="17.6" y="979.0" width="124.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.6" y="990.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (571 samples, 10.54%)</title><rect x="17.8" y="963.0" width="124.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.8" y="974.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (542 samples, 10.00%)</title><rect x="18.1" y="947.0" width="118.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.1" y="958.0">sun/nio/ch/KQu..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.09%)</title><rect x="25.7" y="931.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="28.7" y="942.0"></text>
</g>
<g>
<title>kevent (502 samples, 9.26%)</title><rect x="26.8" y="931.0" width="109.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="29.8" y="942.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 0.15%)</title><rect x="136.1" y="947.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.1" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (2 samples, 0.04%)</title><rect x="136.3" y="931.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.3" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.07%)</title><rect x="136.9" y="931.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.07%)</title><rect x="136.9" y="915.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.07%)</title><rect x="136.9" y="899.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.07%)</title><rect x="136.9" y="883.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.9" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (15 samples, 0.28%)</title><rect x="137.8" y="947.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="140.8" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (2 samples, 0.04%)</title><rect x="140.0" y="931.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.0" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.06%)</title><rect x="140.4" y="931.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.4" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.inc (3 samples, 0.06%)</title><rect x="140.4" y="915.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="143.4" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (3 samples, 0.06%)</title><rect x="140.4" y="899.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.07%)</title><rect x="141.3" y="947.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.06%)</title><rect x="141.5" y="931.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="144.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.06%)</title><rect x="141.5" y="915.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="144.5" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (731 samples, 13.49%)</title><rect x="142.4" y="1011.0" width="159.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.4" y="1022.0">one/nio/net/Session...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (731 samples, 13.49%)</title><rect x="142.4" y="995.0" width="159.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.4" y="1006.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (610 samples, 11.25%)</title><rect x="142.4" y="979.0" width="132.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.4" y="990.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (567 samples, 10.46%)</title><rect x="145.4" y="963.0" width="123.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.4" y="974.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (565 samples, 10.42%)</title><rect x="145.9" y="947.0" width="123.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.9" y="958.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (547 samples, 10.09%)</title><rect x="146.1" y="931.0" width="119.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.1" y="942.0">RequestHandler1..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (366 samples, 6.75%)</title><rect x="146.3" y="915.0" width="79.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.3" y="926.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (364 samples, 6.72%)</title><rect x="146.3" y="899.0" width="79.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="149.3" y="910.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.30%)</title><rect x="146.5" y="883.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.5" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (347 samples, 6.40%)</title><rect x="150.0" y="883.0" width="75.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="153.0" y="894.0">one/nio/..</text>
</g>
<g>
<title>gettimeofday (8 samples, 0.15%)</title><rect x="150.6" y="867.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="153.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (328 samples, 6.05%)</title><rect x="152.4" y="867.0" width="71.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.4" y="878.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (326 samples, 6.01%)</title><rect x="152.8" y="851.0" width="71.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.8" y="862.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (326 samples, 6.01%)</title><rect x="152.8" y="835.0" width="71.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.8" y="846.0">one/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (325 samples, 6.00%)</title><rect x="153.0" y="819.0" width="70.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.0" y="830.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (325 samples, 6.00%)</title><rect x="153.0" y="803.0" width="70.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.0" y="814.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (320 samples, 5.90%)</title><rect x="154.1" y="787.0" width="69.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.1" y="798.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (320 samples, 5.90%)</title><rect x="154.1" y="771.0" width="69.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.1" y="782.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (3 samples, 0.06%)</title><rect x="154.1" y="755.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (317 samples, 5.85%)</title><rect x="154.8" y="755.0" width="69.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="157.8" y="766.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (311 samples, 5.74%)</title><rect x="155.9" y="739.0" width="67.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.9" y="750.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.09%)</title><rect x="157.4" y="723.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="160.4" y="734.0"></text>
</g>
<g>
<title>write (298 samples, 5.50%)</title><rect x="158.7" y="723.0" width="64.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="161.7" y="734.0">write</text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.15%)</title><rect x="223.8" y="867.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="226.8" y="878.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.11%)</title><rect x="223.8" y="851.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="226.8" y="862.0"></text>
</g>
<g>
<title>_res (3 samples, 0.06%)</title><rect x="224.0" y="835.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="227.0" y="846.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="224.7" y="835.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="227.7" y="846.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="225.1" y="851.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="228.1" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="225.5" y="899.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.5" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.09%)</title><rect x="226.0" y="915.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="226.2" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.2" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="226.2" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.2" y="894.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="226.6" y="899.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.6" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="226.6" y="883.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.6" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="226.6" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.6" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (175 samples, 3.23%)</title><rect x="227.1" y="915.0" width="38.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.1" y="926.0">ru/..</text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.06%)</title><rect x="227.1" y="899.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.1" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="227.9" y="899.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.9" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.get (169 samples, 3.12%)</title><rect x="228.4" y="899.0" width="36.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.4" y="910.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (167 samples, 3.08%)</title><rect x="228.8" y="883.0" width="36.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.8" y="894.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.06%)</title><rect x="228.8" y="867.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.8" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1277608996.invoke (3 samples, 0.06%)</title><rect x="228.8" y="851.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.8" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.06%)</title><rect x="228.8" y="835.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.8" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (32 samples, 0.59%)</title><rect x="229.5" y="867.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.5" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (22 samples, 0.41%)</title><rect x="230.3" y="851.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.3" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (22 samples, 0.41%)</title><rect x="230.3" y="835.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.3" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (13 samples, 0.24%)</title><rect x="230.8" y="819.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.8" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (2 samples, 0.04%)</title><rect x="231.2" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.2" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.17%)</title><rect x="231.6" y="803.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.6" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.07%)</title><rect x="232.7" y="787.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="235.7" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.04%)</title><rect x="233.6" y="819.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.04%)</title><rect x="233.6" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.07%)</title><rect x="234.2" y="819.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.06%)</title><rect x="234.5" y="803.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (6 samples, 0.11%)</title><rect x="235.1" y="851.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.1" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.09%)</title><rect x="235.3" y="835.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.3" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (127 samples, 2.34%)</title><rect x="236.4" y="867.0" width="27.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.4" y="878.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (126 samples, 2.32%)</title><rect x="236.6" y="851.0" width="27.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.6" y="862.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (122 samples, 2.25%)</title><rect x="237.5" y="835.0" width="26.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="240.5" y="846.0">J..</text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="238.6" y="819.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="241.6" y="830.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.04%)</title><rect x="239.5" y="819.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="242.5" y="830.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.06%)</title><rect x="239.9" y="819.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="242.9" y="830.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (108 samples, 1.99%)</title><rect x="240.6" y="819.0" width="23.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="243.6" y="830.0">r..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.04%)</title><rect x="241.9" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="244.9" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.04%)</title><rect x="242.3" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="245.3" y="814.0"></text>
</g>
<g>
<title>free (4 samples, 0.07%)</title><rect x="243.6" y="803.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="246.6" y="814.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="244.0" y="787.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="247.0" y="798.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.06%)</title><rect x="244.5" y="803.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="247.5" y="814.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.11%)</title><rect x="245.1" y="803.0" width="1.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="248.1" y="814.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.04%)</title><rect x="245.3" y="787.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="248.3" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.06%)</title><rect x="245.8" y="787.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="248.8" y="798.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.06%)</title><rect x="245.8" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="248.8" y="782.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="245.8" y="755.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="248.8" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (17 samples, 0.31%)</title><rect x="246.4" y="803.0" width="3.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="249.4" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.13%)</title><rect x="248.0" y="787.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="251.0" y="798.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.09%)</title><rect x="248.4" y="771.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="251.4" y="782.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.07%)</title><rect x="248.4" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="251.4" y="766.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.06%)</title><rect x="248.6" y="739.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="251.6" y="750.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="248.6" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="251.6" y="734.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="249.5" y="787.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="252.5" y="798.0"></text>
</g>
<g>
<title>operator new(unsigned long) (12 samples, 0.22%)</title><rect x="250.4" y="803.0" width="2.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="253.4" y="814.0"></text>
</g>
<g>
<title>malloc (12 samples, 0.22%)</title><rect x="250.4" y="787.0" width="2.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="253.4" y="798.0"></text>
</g>
<g>
<title>malloc_zone_malloc (9 samples, 0.17%)</title><rect x="250.8" y="771.0" width="1.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="253.8" y="782.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (7 samples, 0.13%)</title><rect x="251.0" y="755.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="254.0" y="766.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (7 samples, 0.13%)</title><rect x="251.0" y="739.0" width="1.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="254.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (51 samples, 0.94%)</title><rect x="253.0" y="803.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="256.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (49 samples, 0.90%)</title><rect x="253.4" y="787.0" width="10.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="256.4" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (48 samples, 0.89%)</title><rect x="253.4" y="771.0" width="10.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="256.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (36 samples, 0.66%)</title><rect x="254.3" y="755.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="257.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (8 samples, 0.15%)</title><rect x="255.4" y="739.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="258.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.06%)</title><rect x="256.0" y="723.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="259.0" y="734.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="256.2" y="707.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="259.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.04%)</title><rect x="256.7" y="723.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="259.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.04%)</title><rect x="256.7" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="259.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.04%)</title><rect x="257.1" y="739.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="260.1" y="750.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (2 samples, 0.04%)</title><rect x="257.8" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="260.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="258.2" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="261.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (13 samples, 0.24%)</title><rect x="259.1" y="739.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="262.1" y="750.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.04%)</title><rect x="261.2" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="264.2" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="262.3" y="755.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="265.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="262.8" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="265.8" y="766.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.06%)</title><rect x="263.2" y="755.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="266.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (4 samples, 0.07%)</title><rect x="264.1" y="867.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="267.1" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (4 samples, 0.07%)</title><rect x="264.1" y="851.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.1" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.06%)</title><rect x="264.3" y="835.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.3" y="846.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (13 samples, 0.24%)</title><rect x="265.2" y="931.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 0.24%)</title><rect x="265.2" y="915.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (13 samples, 0.24%)</title><rect x="265.2" y="899.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.2" y="910.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="266.2" y="883.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.2" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="266.9" y="883.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="269.9" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.07%)</title><rect x="268.0" y="931.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.0" y="942.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.07%)</title><rect x="268.0" y="915.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="268.4" y="899.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.4" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="268.4" y="883.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.4" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13 samples, 0.24%)</title><rect x="268.9" y="963.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="271.9" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.09%)</title><rect x="269.1" y="947.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.1" y="958.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="269.7" y="931.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.7" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.13%)</title><rect x="270.2" y="947.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.2" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.13%)</title><rect x="270.2" y="931.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.2" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (4 samples, 0.07%)</title><rect x="271.7" y="963.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.7" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.20%)</title><rect x="272.6" y="963.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.6" y="974.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="272.6" y="947.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.6" y="958.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.04%)</title><rect x="272.6" y="931.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.6" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.15%)</title><rect x="273.0" y="947.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.0" y="958.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.06%)</title><rect x="273.0" y="931.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.0" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.09%)</title><rect x="273.6" y="931.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.06%)</title><rect x="274.1" y="915.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.1" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.06%)</title><rect x="274.1" y="899.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.1" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.06%)</title><rect x="274.1" y="883.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.1" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.04%)</title><rect x="274.3" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.3" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (120 samples, 2.21%)</title><rect x="275.4" y="979.0" width="26.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.4" y="990.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (115 samples, 2.12%)</title><rect x="276.5" y="963.0" width="25.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.5" y="974.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="276.7" y="947.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="279.7" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="276.7" y="931.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.7" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="276.7" y="915.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.7" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="276.9" y="899.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.9" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="277.1" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.1" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="277.1" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (110 samples, 2.03%)</title><rect x="277.6" y="947.0" width="23.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.6" y="958.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.07%)</title><rect x="278.0" y="931.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.07%)</title><rect x="278.0" y="915.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.07%)</title><rect x="278.0" y="899.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.07%)</title><rect x="278.0" y="883.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.07%)</title><rect x="278.0" y="867.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.0" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.07%)</title><rect x="278.0" y="851.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (100 samples, 1.85%)</title><rect x="279.1" y="931.0" width="21.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.1" y="942.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (100 samples, 1.85%)</title><rect x="279.1" y="915.0" width="21.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.1" y="926.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.11%)</title><rect x="279.1" y="899.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.1" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.11%)</title><rect x="279.1" y="883.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.1" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (6 samples, 0.11%)</title><rect x="279.1" y="867.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.1" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (3 samples, 0.06%)</title><rect x="279.3" y="851.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.3" y="862.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (3 samples, 0.06%)</title><rect x="279.3" y="835.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="282.3" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.04%)</title><rect x="280.0" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.04%)</title><rect x="280.0" y="835.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.0" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (94 samples, 1.73%)</title><rect x="280.4" y="899.0" width="20.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (94 samples, 1.73%)</title><rect x="280.4" y="883.0" width="20.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (94 samples, 1.73%)</title><rect x="280.4" y="867.0" width="20.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.4" y="878.0"></text>
</g>
<g>
<title>read (85 samples, 1.57%)</title><rect x="282.4" y="851.0" width="18.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="285.4" y="862.0"></text>
</g>
<g>
<title>unsafe_arraycopy (2 samples, 0.04%)</title><rect x="301.1" y="931.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="304.1" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="301.7" y="1027.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="304.7" y="1038.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25091] (1,323 samples, 24.41%)</title><rect x="302.4" y="1043.0" width="288.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="305.4" y="1054.0">[NIO Selector #1 tid=25091]</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="302.6" y="1027.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="305.6" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.04%)</title><rect x="302.6" y="1011.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="305.6" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.04%)</title><rect x="302.6" y="995.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="305.6" y="1006.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.04%)</title><rect x="302.6" y="979.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.6" y="990.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.06%)</title><rect x="303.9" y="1027.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="306.9" y="1038.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (2 samples, 0.04%)</title><rect x="304.1" y="1011.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="307.1" y="1022.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.06%)</title><rect x="304.6" y="1027.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="307.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,307 samples, 24.11%)</title><rect x="305.4" y="1027.0" width="284.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.4" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2 samples, 0.04%)</title><rect x="306.1" y="1011.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="309.1" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (7 samples, 0.13%)</title><rect x="306.5" y="1011.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.5" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (7 samples, 0.13%)</title><rect x="306.5" y="995.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="309.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (612 samples, 11.29%)</title><rect x="308.0" y="1011.0" width="133.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="311.0" y="1022.0">one/nio/net/JavaS..</text>
</g>
<g>
<title>_res (4 samples, 0.07%)</title><rect x="309.1" y="995.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="312.1" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (13 samples, 0.24%)</title><rect x="310.0" y="995.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.0" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (6 samples, 0.11%)</title><rect x="311.3" y="979.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (6 samples, 0.11%)</title><rect x="311.3" y="963.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.07%)</title><rect x="311.7" y="947.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="314.7" y="958.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.04%)</title><rect x="312.8" y="995.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.04%)</title><rect x="312.8" y="979.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.8" y="990.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.09%)</title><rect x="313.3" y="995.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="316.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (583 samples, 10.76%)</title><rect x="314.4" y="995.0" width="126.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.4" y="1006.0">sun/nio/ch/Selec..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (582 samples, 10.74%)</title><rect x="314.6" y="979.0" width="126.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.6" y="990.0">sun/nio/ch/Selec..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (580 samples, 10.70%)</title><rect x="315.0" y="963.0" width="126.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.0" y="974.0">sun/nio/ch/KQueu..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (544 samples, 10.04%)</title><rect x="315.2" y="947.0" width="118.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.2" y="958.0">sun/nio/ch/KQu..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (7 samples, 0.13%)</title><rect x="322.4" y="931.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="325.4" y="942.0"></text>
</g>
<g>
<title>kevent (504 samples, 9.30%)</title><rect x="323.9" y="931.0" width="109.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="326.9" y="942.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.13%)</title><rect x="433.7" y="947.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="436.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.11%)</title><rect x="433.9" y="931.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="436.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.07%)</title><rect x="433.9" y="915.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.07%)</title><rect x="433.9" y="899.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.07%)</title><rect x="433.9" y="883.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.9" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (19 samples, 0.35%)</title><rect x="435.2" y="947.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.2" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (4 samples, 0.07%)</title><rect x="438.0" y="931.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.0" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.06%)</title><rect x="438.2" y="915.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.2" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.06%)</title><rect x="439.3" y="947.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="442.3" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.04%)</title><rect x="439.5" y="931.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.5" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="439.5" y="915.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="442.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="439.5" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.5" y="910.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.04%)</title><rect x="439.5" y="883.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="442.5" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.09%)</title><rect x="440.2" y="947.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="443.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (2 samples, 0.04%)</title><rect x="440.9" y="931.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.9" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (681 samples, 12.56%)</title><rect x="441.3" y="1011.0" width="148.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="444.3" y="1022.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (681 samples, 12.56%)</title><rect x="441.3" y="995.0" width="148.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.3" y="1006.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (531 samples, 9.80%)</title><rect x="441.5" y="979.0" width="115.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="444.5" y="990.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (493 samples, 9.10%)</title><rect x="442.2" y="963.0" width="107.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.2" y="974.0">one/nio/http/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (2 samples, 0.04%)</title><rect x="442.4" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.4" y="958.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (490 samples, 9.04%)</title><rect x="442.8" y="947.0" width="106.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.8" y="958.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (472 samples, 8.71%)</title><rect x="443.2" y="931.0" width="102.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.2" y="942.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (314 samples, 5.79%)</title><rect x="443.7" y="915.0" width="68.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="446.7" y="926.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (313 samples, 5.77%)</title><rect x="443.7" y="899.0" width="68.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.7" y="910.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.22%)</title><rect x="443.9" y="883.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.9" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (300 samples, 5.54%)</title><rect x="446.5" y="883.0" width="65.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.5" y="894.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (292 samples, 5.39%)</title><rect x="446.9" y="867.0" width="63.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="449.9" y="878.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (291 samples, 5.37%)</title><rect x="447.2" y="851.0" width="63.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="450.2" y="862.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (291 samples, 5.37%)</title><rect x="447.2" y="835.0" width="63.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="450.2" y="846.0">one/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="447.2" y="819.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (288 samples, 5.31%)</title><rect x="447.8" y="819.0" width="62.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="450.8" y="830.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (288 samples, 5.31%)</title><rect x="447.8" y="803.0" width="62.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="450.8" y="814.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (285 samples, 5.26%)</title><rect x="448.5" y="787.0" width="62.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.5" y="798.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (285 samples, 5.26%)</title><rect x="448.5" y="771.0" width="62.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.5" y="782.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.07%)</title><rect x="448.5" y="755.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="451.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.04%)</title><rect x="448.9" y="739.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="451.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (281 samples, 5.18%)</title><rect x="449.3" y="755.0" width="61.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.3" y="766.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (273 samples, 5.04%)</title><rect x="450.9" y="739.0" width="59.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="453.9" y="750.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.09%)</title><rect x="451.3" y="723.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="454.3" y="734.0"></text>
</g>
<g>
<title>write (266 samples, 4.91%)</title><rect x="452.4" y="723.0" width="57.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="455.4" y="734.0">write</text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.11%)</title><rect x="510.5" y="867.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="513.5" y="878.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.09%)</title><rect x="510.7" y="851.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="513.7" y="862.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.09%)</title><rect x="510.7" y="835.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="513.7" y="846.0"></text>
</g>
<g>
<title>_res (3 samples, 0.06%)</title><rect x="511.2" y="819.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="514.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.09%)</title><rect x="512.0" y="915.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="515.0" y="926.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.06%)</title><rect x="512.5" y="899.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.5" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="512.5" y="883.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="515.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="512.5" y="867.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="515.5" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.06%)</title><rect x="512.5" y="851.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.5" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (151 samples, 2.79%)</title><rect x="513.1" y="915.0" width="32.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="516.1" y="926.0">ru..</text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.07%)</title><rect x="513.1" y="899.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="516.1" y="910.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.06%)</title><rect x="513.4" y="883.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="516.4" y="894.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.04%)</title><rect x="513.6" y="867.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="516.6" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.get (147 samples, 2.71%)</title><rect x="514.0" y="899.0" width="32.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="517.0" y="910.0">ru..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.07%)</title><rect x="514.2" y="883.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="517.2" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (142 samples, 2.62%)</title><rect x="515.1" y="883.0" width="30.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="518.1" y="894.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.07%)</title><rect x="515.1" y="867.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="518.1" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1277608996.invoke (4 samples, 0.07%)</title><rect x="515.1" y="851.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="518.1" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.07%)</title><rect x="515.1" y="835.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="518.1" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$Stringifiers$ObjectStringifier.valueOf (2 samples, 0.04%)</title><rect x="515.5" y="819.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="518.5" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (20 samples, 0.37%)</title><rect x="516.0" y="867.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.0" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (11 samples, 0.20%)</title><rect x="516.4" y="851.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.4" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.17%)</title><rect x="516.8" y="835.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.8" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.06%)</title><rect x="517.1" y="819.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="520.1" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="517.3" y="803.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.3" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (4 samples, 0.07%)</title><rect x="517.7" y="819.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="520.7" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.getCoder (2 samples, 0.04%)</title><rect x="517.7" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.04%)</title><rect x="518.1" y="803.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (7 samples, 0.13%)</title><rect x="518.8" y="851.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="521.8" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.13%)</title><rect x="518.8" y="835.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="521.8" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="519.7" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="522.7" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (114 samples, 2.10%)</title><rect x="520.3" y="867.0" width="24.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="523.3" y="878.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (114 samples, 2.10%)</title><rect x="520.3" y="851.0" width="24.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.3" y="862.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (111 samples, 2.05%)</title><rect x="520.5" y="835.0" width="24.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="523.5" y="846.0">J..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (97 samples, 1.79%)</title><rect x="523.6" y="819.0" width="21.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="526.6" y="830.0">r..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.04%)</title><rect x="524.0" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="527.0" y="814.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.04%)</title><rect x="524.5" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="527.5" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="525.1" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="528.1" y="814.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.04%)</title><rect x="525.5" y="803.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="528.5" y="814.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="526.2" y="803.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="529.2" y="814.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.09%)</title><rect x="526.6" y="803.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="529.6" y="814.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.06%)</title><rect x="526.6" y="787.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="529.6" y="798.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (15 samples, 0.28%)</title><rect x="527.7" y="803.0" width="3.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="530.7" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.15%)</title><rect x="528.8" y="787.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="531.8" y="798.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.15%)</title><rect x="528.8" y="771.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="531.8" y="782.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.13%)</title><rect x="529.0" y="755.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="532.0" y="766.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.11%)</title><rect x="529.2" y="739.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="532.2" y="750.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.11%)</title><rect x="529.2" y="723.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="532.2" y="734.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.04%)</title><rect x="529.2" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="532.2" y="718.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="530.5" y="787.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="533.5" y="798.0"></text>
</g>
<g>
<title>operator new(unsigned long) (10 samples, 0.18%)</title><rect x="531.0" y="803.0" width="2.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="534.0" y="814.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.18%)</title><rect x="531.0" y="787.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="534.0" y="798.0"></text>
</g>
<g>
<title>malloc_zone_malloc (9 samples, 0.17%)</title><rect x="531.2" y="771.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="534.2" y="782.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.06%)</title><rect x="531.2" y="755.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="534.2" y="766.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.11%)</title><rect x="531.9" y="755.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="534.9" y="766.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.07%)</title><rect x="532.3" y="739.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="535.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (53 samples, 0.98%)</title><rect x="533.2" y="803.0" width="11.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="536.2" y="814.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (5 samples, 0.09%)</title><rect x="533.2" y="787.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="536.2" y="798.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (48 samples, 0.89%)</title><rect x="534.3" y="787.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="537.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (48 samples, 0.89%)</title><rect x="534.3" y="771.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="537.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.04%)</title><rect x="534.3" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="537.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (39 samples, 0.72%)</title><rect x="534.7" y="755.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="537.7" y="766.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="536.9" y="739.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="539.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (5 samples, 0.09%)</title><rect x="537.5" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="540.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (4 samples, 0.07%)</title><rect x="537.7" y="723.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="540.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.06%)</title><rect x="538.6" y="739.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="541.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.04%)</title><rect x="538.6" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="541.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (11 samples, 0.20%)</title><rect x="539.7" y="739.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="542.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.04%)</title><rect x="541.4" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="544.4" y="734.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.09%)</title><rect x="542.1" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="545.1" y="750.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="543.2" y="755.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="546.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="543.6" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="546.6" y="766.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.06%)</title><rect x="544.0" y="755.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="547.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (3 samples, 0.06%)</title><rect x="545.1" y="867.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.1" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (3 samples, 0.06%)</title><rect x="545.1" y="851.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="548.1" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.04%)</title><rect x="545.4" y="835.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="548.4" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="545.4" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="548.4" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="545.4" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="548.4" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="545.4" y="787.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="548.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (13 samples, 0.24%)</title><rect x="546.0" y="931.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="549.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 0.24%)</title><rect x="546.0" y="915.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="549.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 0.22%)</title><rect x="546.0" y="899.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.0" y="910.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.07%)</title><rect x="547.1" y="883.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="550.1" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="548.0" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="551.0" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.06%)</title><rect x="548.8" y="931.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="548.8" y="915.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.8" y="926.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="549.1" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="552.1" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="549.1" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.1" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.30%)</title><rect x="549.5" y="963.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="552.5" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.11%)</title><rect x="550.1" y="947.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.1" y="958.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="551.0" y="931.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="554.0" y="942.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="551.0" y="915.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="554.0" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.13%)</title><rect x="551.5" y="947.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="554.5" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.13%)</title><rect x="551.5" y="931.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="554.5" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.20%)</title><rect x="553.2" y="963.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="556.2" y="974.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.15%)</title><rect x="553.6" y="947.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="556.6" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.15%)</title><rect x="553.6" y="931.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="556.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="553.8" y="915.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="556.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="553.8" y="899.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="556.8" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.06%)</title><rect x="553.8" y="883.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="556.8" y="894.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.07%)</title><rect x="554.5" y="915.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="557.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.06%)</title><rect x="554.7" y="899.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.7" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.06%)</title><rect x="554.7" y="883.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="557.7" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.13%)</title><rect x="555.6" y="963.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="558.6" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.11%)</title><rect x="555.8" y="947.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="558.8" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (149 samples, 2.75%)</title><rect x="557.1" y="979.0" width="32.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="560.1" y="990.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (146 samples, 2.69%)</title><rect x="557.8" y="963.0" width="31.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.8" y="974.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="558.0" y="947.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.0" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="558.0" y="931.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="561.0" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="558.0" y="915.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.0" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="558.4" y="899.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (141 samples, 2.60%)</title><rect x="558.9" y="947.0" width="30.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="561.9" y="958.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.13%)</title><rect x="558.9" y="931.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="561.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.13%)</title><rect x="558.9" y="915.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.13%)</title><rect x="558.9" y="899.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.11%)</title><rect x="559.1" y="883.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="562.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="559.1" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="562.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.07%)</title><rect x="559.5" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="562.5" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.07%)</title><rect x="559.5" y="851.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="562.5" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="559.9" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="562.9" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (133 samples, 2.45%)</title><rect x="560.6" y="931.0" width="28.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="563.6" y="942.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (133 samples, 2.45%)</title><rect x="560.6" y="915.0" width="28.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="563.6" y="926.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.07%)</title><rect x="560.6" y="899.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="563.6" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.07%)</title><rect x="560.6" y="883.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="563.6" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.07%)</title><rect x="560.6" y="867.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="563.6" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.04%)</title><rect x="560.6" y="851.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="563.6" y="862.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (2 samples, 0.04%)</title><rect x="560.6" y="835.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="563.6" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.04%)</title><rect x="561.0" y="851.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="564.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.04%)</title><rect x="561.0" y="835.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="564.0" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.04%)</title><rect x="561.0" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="564.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.04%)</title><rect x="561.0" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="564.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (2 samples, 0.04%)</title><rect x="561.0" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="564.0" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (129 samples, 2.38%)</title><rect x="561.5" y="899.0" width="28.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="564.5" y="910.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (126 samples, 2.32%)</title><rect x="562.1" y="883.0" width="27.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="565.1" y="894.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (125 samples, 2.31%)</title><rect x="562.3" y="867.0" width="27.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="565.3" y="878.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.06%)</title><rect x="562.6" y="851.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="565.6" y="862.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.04%)</title><rect x="563.2" y="851.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="566.2" y="862.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.06%)</title><rect x="563.6" y="851.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="566.6" y="862.0"></text>
</g>
<g>
<title>read (116 samples, 2.14%)</title><rect x="564.3" y="851.0" width="25.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="567.3" y="862.0">r..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="589.5" y="1011.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="592.5" y="1022.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="589.5" y="995.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="592.5" y="1006.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="589.5" y="979.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="592.5" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="590.0" y="1027.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="593.0" y="1038.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=39171] (2,230 samples, 41.14%)</title><rect x="590.4" y="1043.0" width="485.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="593.4" y="1054.0">[NIO Selector #3 tid=39171]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.04%)</title><rect x="590.4" y="1027.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="593.4" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.04%)</title><rect x="590.4" y="1011.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="593.4" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.04%)</title><rect x="590.4" y="995.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="593.4" y="1006.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.04%)</title><rect x="590.4" y="979.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="593.4" y="990.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.04%)</title><rect x="590.4" y="963.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="593.4" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.04%)</title><rect x="590.4" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="593.4" y="958.0"></text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.09%)</title><rect x="591.3" y="1027.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="594.3" y="1038.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (3 samples, 0.06%)</title><rect x="591.7" y="1011.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="594.7" y="1022.0"></text>
</g>
<g>
<title>caller_is_deopted() (3 samples, 0.06%)</title><rect x="591.7" y="995.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="594.7" y="1006.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.04%)</title><rect x="591.7" y="979.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="594.7" y="990.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="591.7" y="963.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="594.7" y="974.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.04%)</title><rect x="591.7" y="947.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="594.7" y="958.0"></text>
</g>
<g>
<title>[unknown_Java] (13 samples, 0.24%)</title><rect x="592.4" y="1027.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="595.4" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.06%)</title><rect x="594.6" y="1011.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="597.6" y="1022.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.06%)</title><rect x="594.6" y="995.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="597.6" y="1006.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.04%)</title><rect x="594.6" y="979.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="597.6" y="990.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,206 samples, 40.70%)</title><rect x="595.2" y="1027.0" width="480.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="598.2" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8 samples, 0.15%)</title><rect x="596.1" y="1011.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="599.1" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.04%)</title><rect x="597.8" y="1011.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="600.8" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.04%)</title><rect x="597.8" y="995.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.8" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (826 samples, 15.24%)</title><rect x="598.3" y="1011.0" width="179.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.3" y="1022.0">one/nio/net/JavaSelecto..</text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.04%)</title><rect x="598.3" y="995.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="601.3" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (10 samples, 0.18%)</title><rect x="598.9" y="995.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.09%)</title><rect x="600.0" y="979.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.07%)</title><rect x="600.2" y="963.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="603.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.04%)</title><rect x="600.7" y="947.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="603.7" y="958.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.04%)</title><rect x="601.1" y="995.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="604.1" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="601.5" y="995.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="604.5" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (808 samples, 14.91%)</title><rect x="602.0" y="995.0" width="175.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="605.0" y="1006.0">sun/nio/ch/SelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (808 samples, 14.91%)</title><rect x="602.0" y="979.0" width="175.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="605.0" y="990.0">sun/nio/ch/SelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (804 samples, 14.83%)</title><rect x="602.8" y="963.0" width="175.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="605.8" y="974.0">sun/nio/ch/KQueueSelect..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (762 samples, 14.06%)</title><rect x="603.3" y="947.0" width="165.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.3" y="958.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.07%)</title><rect x="609.6" y="931.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="612.6" y="942.0"></text>
</g>
<g>
<title>kevent (729 samples, 13.45%)</title><rect x="610.5" y="931.0" width="158.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="613.5" y="942.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (13 samples, 0.24%)</title><rect x="769.2" y="947.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.2" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (4 samples, 0.07%)</title><rect x="769.2" y="931.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="772.2" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 0.15%)</title><rect x="770.3" y="931.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="773.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.11%)</title><rect x="770.3" y="915.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="773.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.11%)</title><rect x="770.3" y="899.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="773.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.11%)</title><rect x="770.3" y="883.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="773.3" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (16 samples, 0.30%)</title><rect x="772.0" y="947.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="775.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (5 samples, 0.09%)</title><rect x="773.7" y="931.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.7" y="942.0"></text>
</g>
<g>
<title>java/lang/Integer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="774.0" y="915.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.0" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="774.4" y="915.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="777.4" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.04%)</title><rect x="774.8" y="931.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="777.8" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.07%)</title><rect x="775.5" y="947.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.5" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.07%)</title><rect x="775.5" y="931.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="778.5" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.06%)</title><rect x="775.5" y="915.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="778.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.06%)</title><rect x="775.5" y="899.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="778.5" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.04%)</title><rect x="776.3" y="947.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="779.3" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.04%)</title><rect x="776.3" y="931.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="779.3" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.04%)</title><rect x="776.3" y="915.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="779.3" y="926.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.04%)</title><rect x="776.3" y="899.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.3" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.09%)</title><rect x="776.8" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.06%)</title><rect x="777.2" y="931.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="780.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.06%)</title><rect x="777.2" y="915.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.2" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,364 samples, 25.17%)</title><rect x="778.1" y="1011.0" width="296.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="781.1" y="1022.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,364 samples, 25.17%)</title><rect x="778.1" y="995.0" width="296.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="781.1" y="1006.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,130 samples, 20.85%)</title><rect x="778.3" y="979.0" width="246.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="781.3" y="990.0">one/nio/http/HttpSession.processH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,043 samples, 19.24%)</title><rect x="780.5" y="963.0" width="227.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.5" y="974.0">one/nio/http/HttpSession.handl..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,042 samples, 19.23%)</title><rect x="780.7" y="947.0" width="226.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.7" y="958.0">one/nio/http/HttpServer.handle..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,017 samples, 18.76%)</title><rect x="780.9" y="931.0" width="221.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="783.9" y="942.0">RequestHandler1_entity.handle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (734 samples, 13.54%)</title><rect x="781.4" y="915.0" width="159.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="784.4" y="926.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (731 samples, 13.49%)</title><rect x="781.4" y="899.0" width="159.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="784.4" y="910.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (30 samples, 0.55%)</title><rect x="781.6" y="883.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.6" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="787.5" y="867.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="790.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (700 samples, 12.92%)</title><rect x="788.1" y="883.0" width="152.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.1" y="894.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session.write (682 samples, 12.58%)</title><rect x="789.0" y="867.0" width="148.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="792.0" y="878.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (679 samples, 12.53%)</title><rect x="789.6" y="851.0" width="147.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.6" y="862.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (677 samples, 12.49%)</title><rect x="790.1" y="835.0" width="147.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="793.1" y="846.0">one/nio/net/JavaSoc..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.09%)</title><rect x="790.1" y="819.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="793.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (672 samples, 12.40%)</title><rect x="791.2" y="819.0" width="146.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.2" y="830.0">sun/nio/ch/SocketC..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (672 samples, 12.40%)</title><rect x="791.2" y="803.0" width="146.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="794.2" y="814.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (664 samples, 12.25%)</title><rect x="792.9" y="787.0" width="144.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="795.9" y="798.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (664 samples, 12.25%)</title><rect x="792.9" y="771.0" width="144.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.9" y="782.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (7 samples, 0.13%)</title><rect x="792.9" y="755.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="795.9" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (657 samples, 12.12%)</title><rect x="794.4" y="755.0" width="143.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.4" y="766.0">sun/nio/ch/SocketD..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.07%)</title><rect x="796.8" y="739.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="799.8" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (642 samples, 11.85%)</title><rect x="797.7" y="739.0" width="139.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.7" y="750.0">sun/nio/ch/FileDi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (8 samples, 0.15%)</title><rect x="803.3" y="723.0" width="1.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="806.3" y="734.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="804.6" y="707.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="807.6" y="718.0"></text>
</g>
<g>
<title>write (607 samples, 11.20%)</title><rect x="805.3" y="723.0" width="132.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="808.3" y="734.0">write</text>
</g>
<g>
<title>os::javaTimeMillis() (14 samples, 0.26%)</title><rect x="937.5" y="867.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.5" y="878.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.04%)</title><rect x="937.7" y="851.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="940.7" y="862.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.15%)</title><rect x="938.1" y="851.0" width="1.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="941.1" y="862.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (6 samples, 0.11%)</title><rect x="938.5" y="835.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="941.5" y="846.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="939.4" y="819.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="942.4" y="830.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.06%)</title><rect x="939.8" y="851.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="942.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="940.5" y="899.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="943.5" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (15 samples, 0.28%)</title><rect x="941.2" y="915.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="944.2" y="926.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.06%)</title><rect x="941.8" y="899.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="944.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="942.5" y="899.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="945.5" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="942.5" y="883.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="945.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="942.5" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.5" y="878.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.11%)</title><rect x="943.1" y="899.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.09%)</title><rect x="943.3" y="883.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="946.3" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.09%)</title><rect x="943.3" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="946.3" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="944.0" y="851.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="947.0" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (266 samples, 4.91%)</title><rect x="944.4" y="915.0" width="57.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="947.4" y="926.0">ru/mai..</text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.07%)</title><rect x="944.4" y="899.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="947.4" y="910.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.06%)</title><rect x="945.3" y="899.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="948.3" y="910.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.06%)</title><rect x="945.3" y="883.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="948.3" y="894.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.06%)</title><rect x="945.3" y="867.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="948.3" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.get (258 samples, 4.76%)</title><rect x="946.2" y="899.0" width="56.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="949.2" y="910.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="946.8" y="883.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.8" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (253 samples, 4.67%)</title><rect x="947.3" y="883.0" width="55.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="950.3" y="894.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (13 samples, 0.24%)</title><rect x="947.7" y="867.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.7" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1277608996.invoke (12 samples, 0.22%)</title><rect x="947.9" y="851.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="950.9" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.17%)</title><rect x="948.1" y="835.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="951.1" y="846.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (2 samples, 0.04%)</title><rect x="948.1" y="819.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="951.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.checkOverflow (2 samples, 0.04%)</title><rect x="948.1" y="803.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="951.1" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (5 samples, 0.09%)</title><rect x="948.8" y="819.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="951.8" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (3 samples, 0.06%)</title><rect x="949.0" y="803.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="952.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/797374030.invoke (2 samples, 0.04%)</title><rect x="950.1" y="835.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="953.1" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="950.1" y="819.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="953.1" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (33 samples, 0.61%)</title><rect x="950.5" y="867.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="953.5" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (24 samples, 0.44%)</title><rect x="950.5" y="851.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="953.5" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (22 samples, 0.41%)</title><rect x="951.0" y="835.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="954.0" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.17%)</title><rect x="951.4" y="819.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="954.4" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.09%)</title><rect x="952.3" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="955.3" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (5 samples, 0.09%)</title><rect x="953.3" y="819.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="956.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.04%)</title><rect x="954.0" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="957.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.06%)</title><rect x="954.7" y="819.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="957.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.04%)</title><rect x="954.9" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.9" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="955.3" y="819.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="958.3" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (9 samples, 0.17%)</title><rect x="955.7" y="851.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="958.7" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.13%)</title><rect x="956.2" y="835.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="959.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.06%)</title><rect x="956.8" y="819.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="959.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="956.8" y="803.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.8" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (193 samples, 3.56%)</title><rect x="957.7" y="867.0" width="42.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="960.7" y="878.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (193 samples, 3.56%)</title><rect x="957.7" y="851.0" width="42.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="960.7" y="862.0">org/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (187 samples, 3.45%)</title><rect x="958.8" y="835.0" width="40.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="961.8" y="846.0">Jav..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.06%)</title><rect x="960.3" y="819.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="963.3" y="830.0"></text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.06%)</title><rect x="961.0" y="819.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="964.0" y="830.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.04%)</title><rect x="961.6" y="819.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="964.6" y="830.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="962.1" y="819.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="965.1" y="830.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.06%)</title><rect x="962.5" y="819.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="965.5" y="830.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (166 samples, 3.06%)</title><rect x="963.4" y="819.0" width="36.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.4" y="830.0">roc..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.04%)</title><rect x="965.3" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="968.3" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.06%)</title><rect x="965.8" y="803.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="968.8" y="814.0"></text>
</g>
<g>
<title>free (7 samples, 0.13%)</title><rect x="966.8" y="803.0" width="1.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="969.8" y="814.0"></text>
</g>
<g>
<title>tiny_size (7 samples, 0.13%)</title><rect x="966.8" y="787.0" width="1.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="969.8" y="798.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.11%)</title><rect x="968.4" y="803.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="971.4" y="814.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.15%)</title><rect x="969.7" y="803.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="972.7" y="814.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.04%)</title><rect x="969.7" y="787.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.7" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.11%)</title><rect x="970.1" y="787.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.1" y="798.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.11%)</title><rect x="970.1" y="771.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.1" y="782.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.07%)</title><rect x="970.1" y="755.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="973.1" y="766.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.07%)</title><rect x="970.1" y="739.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="973.1" y="750.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.06%)</title><rect x="970.1" y="723.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="973.1" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (29 samples, 0.54%)</title><rect x="971.4" y="803.0" width="6.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="974.4" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (14 samples, 0.26%)</title><rect x="974.0" y="787.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.0" y="798.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (10 samples, 0.18%)</title><rect x="974.5" y="771.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="977.5" y="782.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.13%)</title><rect x="974.9" y="755.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="977.9" y="766.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.11%)</title><rect x="975.1" y="739.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.1" y="750.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.11%)</title><rect x="975.1" y="723.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.1" y="734.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="975.6" y="707.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.6" y="718.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="976.0" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.0" y="718.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="976.6" y="771.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.6" y="782.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.04%)</title><rect x="977.3" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.3" y="798.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="977.7" y="803.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="980.7" y="814.0"></text>
</g>
<g>
<title>operator new(unsigned long) (19 samples, 0.35%)</title><rect x="978.4" y="803.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="981.4" y="814.0"></text>
</g>
<g>
<title>malloc (18 samples, 0.33%)</title><rect x="978.6" y="787.0" width="3.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="981.6" y="798.0"></text>
</g>
<g>
<title>malloc_zone_malloc (16 samples, 0.30%)</title><rect x="978.8" y="771.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="981.8" y="782.0"></text>
</g>
<g>
<title>default_zone_malloc (7 samples, 0.13%)</title><rect x="979.0" y="755.0" width="1.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="982.0" y="766.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.15%)</title><rect x="980.6" y="755.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="983.6" y="766.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.15%)</title><rect x="980.6" y="739.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="983.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (73 samples, 1.35%)</title><rect x="982.5" y="803.0" width="15.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.5" y="814.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (4 samples, 0.07%)</title><rect x="982.7" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (68 samples, 1.25%)</title><rect x="983.6" y="787.0" width="14.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="986.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (65 samples, 1.20%)</title><rect x="984.3" y="771.0" width="14.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.04%)</title><rect x="984.5" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.5" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (57 samples, 1.05%)</title><rect x="984.9" y="755.0" width="12.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="987.9" y="766.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="986.9" y="739.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="989.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (10 samples, 0.18%)</title><rect x="987.7" y="739.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (5 samples, 0.09%)</title><rect x="988.8" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (6 samples, 0.11%)</title><rect x="989.9" y="739.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (3 samples, 0.06%)</title><rect x="990.6" y="723.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="993.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (2 samples, 0.04%)</title><rect x="991.4" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="994.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (3 samples, 0.06%)</title><rect x="991.9" y="739.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (12 samples, 0.22%)</title><rect x="993.6" y="739.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.6" y="750.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="994.5" y="723.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="997.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (5 samples, 0.09%)</title><rect x="994.9" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.9" y="734.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="995.6" y="707.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="998.6" y="718.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.09%)</title><rect x="996.2" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="997.5" y="755.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.5" y="766.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="998.0" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.06%)</title><rect x="998.4" y="803.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (6 samples, 0.11%)</title><rect x="999.7" y="867.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1002.7" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (6 samples, 0.11%)</title><rect x="999.7" y="851.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1002.7" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.07%)</title><rect x="999.7" y="835.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1002.7" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.07%)</title><rect x="999.7" y="819.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1002.7" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (2 samples, 0.04%)</title><rect x="999.7" y="803.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1002.7" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.04%)</title><rect x="1000.6" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1003.6" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1000.6" y="819.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1003.6" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (6 samples, 0.11%)</title><rect x="1001.0" y="867.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1004.0" y="878.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (6 samples, 0.11%)</title><rect x="1001.0" y="851.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1004.0" y="862.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (6 samples, 0.11%)</title><rect x="1001.0" y="835.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1004.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (6 samples, 0.11%)</title><rect x="1001.0" y="819.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1004.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (5 samples, 0.09%)</title><rect x="1001.2" y="803.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1004.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (17 samples, 0.31%)</title><rect x="1002.3" y="931.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1005.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (17 samples, 0.31%)</title><rect x="1002.3" y="915.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1005.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (17 samples, 0.31%)</title><rect x="1002.3" y="899.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1005.3" y="910.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="1002.8" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1005.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.07%)</title><rect x="1003.2" y="883.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1006.2" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="1004.1" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1007.1" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="1004.5" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1007.5" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1004.9" y="883.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1007.9" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="1005.4" y="883.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1008.4" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (7 samples, 0.13%)</title><rect x="1006.0" y="931.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1009.0" y="942.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.13%)</title><rect x="1006.0" y="915.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1009.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (3 samples, 0.06%)</title><rect x="1006.0" y="899.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1009.0" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="1006.9" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1009.9" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (31 samples, 0.57%)</title><rect x="1007.6" y="963.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1010.6" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (15 samples, 0.28%)</title><rect x="1007.8" y="947.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1010.8" y="958.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="1010.2" y="931.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1013.2" y="942.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="1010.2" y="915.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1013.2" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="1010.6" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1013.6" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.28%)</title><rect x="1011.0" y="947.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1014.0" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.28%)</title><rect x="1011.0" y="931.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1014.0" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (11 samples, 0.20%)</title><rect x="1014.3" y="963.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1017.3" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (22 samples, 0.41%)</title><rect x="1016.7" y="963.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1019.7" y="974.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.09%)</title><rect x="1017.1" y="947.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1020.1" y="958.0"></text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.09%)</title><rect x="1017.1" y="931.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.1" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1017.4" y="915.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1020.4" y="926.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.26%)</title><rect x="1018.2" y="947.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1021.2" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.20%)</title><rect x="1018.9" y="931.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1021.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.07%)</title><rect x="1019.1" y="915.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1022.1" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.07%)</title><rect x="1019.1" y="899.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1022.1" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (4 samples, 0.07%)</title><rect x="1019.1" y="883.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1022.1" y="894.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (3 samples, 0.06%)</title><rect x="1019.3" y="867.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1022.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.11%)</title><rect x="1020.0" y="915.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1023.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.11%)</title><rect x="1020.0" y="899.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1023.0" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (6 samples, 0.11%)</title><rect x="1020.0" y="883.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1023.0" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (3 samples, 0.06%)</title><rect x="1020.2" y="867.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1023.2" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1020.8" y="867.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1023.8" y="878.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="1021.5" y="963.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1024.5" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.20%)</title><rect x="1021.9" y="963.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1024.9" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.17%)</title><rect x="1022.4" y="947.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.4" y="958.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.04%)</title><rect x="1024.3" y="979.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1027.3" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (231 samples, 4.26%)</title><rect x="1024.8" y="979.0" width="50.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1027.8" y="990.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (229 samples, 4.23%)</title><rect x="1025.2" y="963.0" width="49.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1028.2" y="974.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="1025.4" y="947.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1028.4" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1025.4" y="931.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.4" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1025.4" y="915.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1028.4" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1025.4" y="899.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1028.4" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.07%)</title><rect x="1025.4" y="883.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1028.4" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.07%)</title><rect x="1025.4" y="867.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1028.4" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (224 samples, 4.13%)</title><rect x="1026.3" y="947.0" width="48.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1029.3" y="958.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.11%)</title><rect x="1027.2" y="931.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1030.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.11%)</title><rect x="1027.2" y="915.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1030.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.09%)</title><rect x="1027.4" y="899.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1030.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.09%)</title><rect x="1027.4" y="883.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1030.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.06%)</title><rect x="1027.4" y="867.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1030.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="1028.0" y="867.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.0" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="1028.0" y="851.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1031.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (210 samples, 3.87%)</title><rect x="1029.1" y="931.0" width="45.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.1" y="942.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (210 samples, 3.87%)</title><rect x="1029.1" y="915.0" width="45.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1032.1" y="926.0">sun/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (10 samples, 0.18%)</title><rect x="1029.5" y="899.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1032.5" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.18%)</title><rect x="1029.5" y="883.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1032.5" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (9 samples, 0.17%)</title><rect x="1029.8" y="867.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1032.8" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.04%)</title><rect x="1029.8" y="851.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.8" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (7 samples, 0.13%)</title><rect x="1030.2" y="851.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1033.2" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (7 samples, 0.13%)</title><rect x="1030.2" y="835.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1033.2" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.04%)</title><rect x="1030.2" y="819.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1033.2" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (5 samples, 0.09%)</title><rect x="1030.6" y="819.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1033.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (5 samples, 0.09%)</title><rect x="1030.6" y="803.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1033.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (4 samples, 0.07%)</title><rect x="1030.9" y="787.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.9" y="798.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (4 samples, 0.07%)</title><rect x="1030.9" y="771.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1033.9" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.06%)</title><rect x="1030.9" y="755.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.9" y="766.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.06%)</title><rect x="1030.9" y="739.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.9" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.06%)</title><rect x="1030.9" y="723.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1033.9" y="734.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="1031.1" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (197 samples, 3.63%)</title><rect x="1031.7" y="899.0" width="42.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.7" y="910.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (196 samples, 3.62%)</title><rect x="1031.9" y="883.0" width="42.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.9" y="894.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (196 samples, 3.62%)</title><rect x="1031.9" y="867.0" width="42.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1034.9" y="878.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (8 samples, 0.15%)</title><rect x="1036.3" y="851.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1039.3" y="862.0"></text>
</g>
<g>
<title>read (168 samples, 3.10%)</title><rect x="1038.0" y="851.0" width="36.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1041.0" y="862.0">read</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="1075.0" y="1011.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.0" y="1022.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="1075.0" y="995.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1078.0" y="1006.0"></text>
</g>
<g>
<title>[tid=18179] (2 samples, 0.04%)</title><rect x="1075.9" y="1043.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1078.9" y="1054.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.04%)</title><rect x="1075.9" y="1027.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1078.9" y="1038.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.04%)</title><rect x="1075.9" y="1011.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1078.9" y="1022.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.04%)</title><rect x="1075.9" y="995.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1078.9" y="1006.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.04%)</title><rect x="1075.9" y="979.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1078.9" y="990.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.04%)</title><rect x="1075.9" y="963.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.9" y="974.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.04%)</title><rect x="1075.9" y="947.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.9" y="958.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.04%)</title><rect x="1075.9" y="931.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.9" y="942.0"></text>
</g>
<g>
<title>[tid=19203] (2 samples, 0.04%)</title><rect x="1076.4" y="1043.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1079.4" y="1054.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.04%)</title><rect x="1076.4" y="1027.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1079.4" y="1038.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.04%)</title><rect x="1076.4" y="1011.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1079.4" y="1022.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.04%)</title><rect x="1076.4" y="995.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1079.4" y="1006.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.04%)</title><rect x="1076.4" y="979.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1079.4" y="990.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.04%)</title><rect x="1076.4" y="963.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.4" y="974.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.04%)</title><rect x="1076.4" y="947.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.4" y="958.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.04%)</title><rect x="1076.4" y="931.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.4" y="942.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.04%)</title><rect x="1076.4" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.4" y="926.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.04%)</title><rect x="1076.4" y="899.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.4" y="910.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.04%)</title><rect x="1076.4" y="883.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="894.0"></text>
</g>
<g>
<title>[tid=22531] (7 samples, 0.13%)</title><rect x="1076.8" y="1043.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1079.8" y="1054.0"></text>
</g>
<g>
<title>thread_start (7 samples, 0.13%)</title><rect x="1076.8" y="1027.0" width="1.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1079.8" y="1038.0"></text>
</g>
<g>
<title>_pthread_start (7 samples, 0.13%)</title><rect x="1076.8" y="1011.0" width="1.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1079.8" y="1022.0"></text>
</g>
<g>
<title>_pthread_body (7 samples, 0.13%)</title><rect x="1076.8" y="995.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1079.8" y="1006.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (7 samples, 0.13%)</title><rect x="1076.8" y="979.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1079.8" y="990.0"></text>
</g>
<g>
<title>Thread::call_run() (7 samples, 0.13%)</title><rect x="1076.8" y="963.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.8" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (7 samples, 0.13%)</title><rect x="1076.8" y="947.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.8" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (7 samples, 0.13%)</title><rect x="1076.8" y="931.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.8" y="942.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (7 samples, 0.13%)</title><rect x="1076.8" y="915.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.8" y="926.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (7 samples, 0.13%)</title><rect x="1076.8" y="899.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.8" y="910.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (7 samples, 0.13%)</title><rect x="1076.8" y="883.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.8" y="894.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (7 samples, 0.13%)</title><rect x="1076.8" y="867.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.8" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_method() (7 samples, 0.13%)</title><rect x="1076.8" y="851.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.8" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (7 samples, 0.13%)</title><rect x="1076.8" y="835.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.8" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (6 samples, 0.11%)</title><rect x="1077.0" y="819.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.0" y="830.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.04%)</title><rect x="1077.0" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.0" y="814.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.04%)</title><rect x="1077.0" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.0" y="798.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (4 samples, 0.07%)</title><rect x="1077.4" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.4" y="814.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.04%)</title><rect x="1077.7" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.7" y="798.0"></text>
</g>
<g>
<title>[tid=23555] (10 samples, 0.18%)</title><rect x="1078.3" y="1043.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1081.3" y="1054.0"></text>
</g>
<g>
<title>thread_start (10 samples, 0.18%)</title><rect x="1078.3" y="1027.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1081.3" y="1038.0"></text>
</g>
<g>
<title>_pthread_start (10 samples, 0.18%)</title><rect x="1078.3" y="1011.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1081.3" y="1022.0"></text>
</g>
<g>
<title>_pthread_body (10 samples, 0.18%)</title><rect x="1078.3" y="995.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1081.3" y="1006.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.18%)</title><rect x="1078.3" y="979.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1081.3" y="990.0"></text>
</g>
<g>
<title>Thread::call_run() (10 samples, 0.18%)</title><rect x="1078.3" y="963.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.3" y="974.0"></text>
</g>
<g>
<title>WatcherThread::run() (10 samples, 0.18%)</title><rect x="1078.3" y="947.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.3" y="958.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (9 samples, 0.17%)</title><rect x="1078.5" y="931.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.5" y="942.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.13%)</title><rect x="1078.7" y="915.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.7" y="926.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 0.13%)</title><rect x="1078.7" y="899.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.7" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.13%)</title><rect x="1078.7" y="883.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.7" y="894.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.11%)</title><rect x="1078.7" y="867.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1081.7" y="878.0"></text>
</g>
<g>
<title>[tid=42243] (3 samples, 0.06%)</title><rect x="1080.5" y="1043.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1083.5" y="1054.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.06%)</title><rect x="1080.5" y="1027.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1083.5" y="1038.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.06%)</title><rect x="1080.5" y="1011.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1083.5" y="1022.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.06%)</title><rect x="1080.5" y="995.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1083.5" y="1006.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.06%)</title><rect x="1080.5" y="979.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1083.5" y="990.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.06%)</title><rect x="1080.5" y="963.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.5" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.06%)</title><rect x="1080.5" y="947.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.5" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.06%)</title><rect x="1080.5" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.5" y="942.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.06%)</title><rect x="1080.5" y="915.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1083.5" y="926.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.04%)</title><rect x="1080.5" y="899.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.5" y="910.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.04%)</title><rect x="1080.5" y="883.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.5" y="894.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.04%)</title><rect x="1080.5" y="867.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1083.5" y="878.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (2 samples, 0.04%)</title><rect x="1080.5" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.5" y="862.0"></text>
</g>
<g>
<title>[tid=43267] (500 samples, 9.23%)</title><rect x="1081.1" y="1043.0" width="108.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1084.1" y="1054.0">[tid=43267]</text>
</g>
<g>
<title>thread_start (500 samples, 9.23%)</title><rect x="1081.1" y="1027.0" width="108.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1084.1" y="1038.0">thread_start</text>
</g>
<g>
<title>_pthread_start (500 samples, 9.23%)</title><rect x="1081.1" y="1011.0" width="108.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1084.1" y="1022.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (500 samples, 9.23%)</title><rect x="1081.1" y="995.0" width="108.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1084.1" y="1006.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (500 samples, 9.23%)</title><rect x="1081.1" y="979.0" width="108.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1084.1" y="990.0">thread_native..</text>
</g>
<g>
<title>Thread::call_run() (500 samples, 9.23%)</title><rect x="1081.1" y="963.0" width="108.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.1" y="974.0">Thread::call_..</text>
</g>
<g>
<title>JavaThread::run() (500 samples, 9.23%)</title><rect x="1081.1" y="947.0" width="108.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.1" y="958.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (500 samples, 9.23%)</title><rect x="1081.1" y="931.0" width="108.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.1" y="942.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (500 samples, 9.23%)</title><rect x="1081.1" y="915.0" width="108.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.1" y="926.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (500 samples, 9.23%)</title><rect x="1081.1" y="899.0" width="108.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.1" y="910.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (499 samples, 9.21%)</title><rect x="1081.4" y="883.0" width="108.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.4" y="894.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (498 samples, 9.19%)</title><rect x="1081.6" y="867.0" width="108.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.6" y="878.0">Compile::Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (256 samples, 4.72%)</title><rect x="1081.6" y="851.0" width="55.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1084.6" y="862.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (9 samples, 0.17%)</title><rect x="1081.6" y="835.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.6" y="846.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.07%)</title><rect x="1081.6" y="819.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.6" y="830.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (5 samples, 0.09%)</title><rect x="1082.5" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.5" y="830.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.06%)</title><rect x="1082.7" y="803.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1085.7" y="814.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (3 samples, 0.06%)</title><rect x="1082.7" y="787.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.7" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (8 samples, 0.15%)</title><rect x="1083.5" y="835.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.5" y="846.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (6 samples, 0.11%)</title><rect x="1084.0" y="819.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.0" y="830.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (6 samples, 0.11%)</title><rect x="1084.0" y="803.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.0" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.09%)</title><rect x="1084.0" y="787.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.0" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.06%)</title><rect x="1084.2" y="771.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.2" y="782.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (3 samples, 0.06%)</title><rect x="1084.2" y="755.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.2" y="766.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (3 samples, 0.06%)</title><rect x="1084.2" y="739.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.2" y="750.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (2 samples, 0.04%)</title><rect x="1084.4" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.4" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (20 samples, 0.37%)</title><rect x="1085.3" y="835.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.3" y="846.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (17 samples, 0.31%)</title><rect x="1085.9" y="819.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.9" y="830.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.15%)</title><rect x="1086.2" y="803.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.2" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 0.09%)</title><rect x="1088.1" y="803.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.1" y="814.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.06%)</title><rect x="1088.5" y="787.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.5" y="798.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (2 samples, 0.04%)</title><rect x="1088.8" y="771.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.8" y="782.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.04%)</title><rect x="1089.2" y="803.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.04%)</title><rect x="1089.6" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.6" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (2 samples, 0.04%)</title><rect x="1089.6" y="819.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.6" y="830.0"></text>
</g>
<g>
<title>Block::Block(Arena*, Node*) (2 samples, 0.04%)</title><rect x="1089.6" y="803.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (31 samples, 0.57%)</title><rect x="1090.1" y="835.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.1" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (31 samples, 0.57%)</title><rect x="1090.1" y="819.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.1" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (7 samples, 0.13%)</title><rect x="1090.5" y="803.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.5" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.04%)</title><rect x="1090.7" y="787.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.7" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (3 samples, 0.06%)</title><rect x="1091.2" y="787.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1094.2" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (6 samples, 0.11%)</title><rect x="1092.0" y="803.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.0" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.04%)</title><rect x="1093.3" y="803.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.3" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.04%)</title><rect x="1093.8" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.8" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.07%)</title><rect x="1094.2" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.2" y="814.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.06%)</title><rect x="1094.2" y="787.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.2" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.15%)</title><rect x="1095.1" y="803.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.1" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.04%)</title><rect x="1095.7" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.7" y="798.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (3 samples, 0.06%)</title><rect x="1096.2" y="787.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.2" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (3 samples, 0.06%)</title><rect x="1096.2" y="771.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.2" y="782.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="1096.2" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (185 samples, 3.41%)</title><rect x="1096.8" y="835.0" width="40.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.8" y="846.0">Pha..</text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (2 samples, 0.04%)</title><rect x="1097.3" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.3" y="830.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (9 samples, 0.17%)</title><rect x="1097.9" y="819.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.11%)</title><rect x="1099.9" y="819.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.9" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="1099.9" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.9" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.04%)</title><rect x="1100.5" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (9 samples, 0.17%)</title><rect x="1101.2" y="819.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.2" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (7 samples, 0.13%)</title><rect x="1101.6" y="803.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.6" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="1102.7" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (25 samples, 0.46%)</title><rect x="1103.1" y="819.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.1" y="830.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.04%)</title><rect x="1106.6" y="803.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.6" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.04%)</title><rect x="1108.1" y="803.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.1" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (31 samples, 0.57%)</title><rect x="1108.6" y="819.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.6" y="830.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.04%)</title><rect x="1108.8" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (7 samples, 0.13%)</title><rect x="1109.7" y="803.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (13 samples, 0.24%)</title><rect x="1111.4" y="803.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.4" y="814.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.07%)</title><rect x="1111.6" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.6" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.09%)</title><rect x="1112.5" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.5" y="798.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.04%)</title><rect x="1113.8" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.04%)</title><rect x="1114.5" y="803.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.5" y="814.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.04%)</title><rect x="1114.9" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.9" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (4 samples, 0.07%)</title><rect x="1115.3" y="819.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.3" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.06%)</title><rect x="1115.5" y="803.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.5" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.04%)</title><rect x="1115.8" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (17 samples, 0.31%)</title><rect x="1116.2" y="819.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.2" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.04%)</title><rect x="1117.5" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.5" y="814.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (2 samples, 0.04%)</title><rect x="1118.2" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.2" y="814.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (5 samples, 0.09%)</title><rect x="1118.6" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.6" y="814.0"></text>
</g>
<g>
<title>RegMask::Size() const (5 samples, 0.09%)</title><rect x="1118.6" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (4 samples, 0.07%)</title><rect x="1119.9" y="819.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (21 samples, 0.39%)</title><rect x="1120.8" y="819.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.8" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (13 samples, 0.24%)</title><rect x="1122.1" y="803.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.1" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.04%)</title><rect x="1125.3" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.3" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (16 samples, 0.30%)</title><rect x="1125.8" y="819.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.8" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (15 samples, 0.28%)</title><rect x="1126.0" y="803.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.0" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (15 samples, 0.28%)</title><rect x="1126.0" y="787.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.0" y="798.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 0.07%)</title><rect x="1126.0" y="771.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.0" y="782.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="1126.2" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.2" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.04%)</title><rect x="1127.1" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.1" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (2 samples, 0.04%)</title><rect x="1127.5" y="771.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.5" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 0.07%)</title><rect x="1128.0" y="771.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.0" y="782.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.06%)</title><rect x="1128.2" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.2" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.04%)</title><rect x="1128.8" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.8" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.09%)</title><rect x="1129.3" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.3" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (5 samples, 0.09%)</title><rect x="1129.3" y="803.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.3" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (7 samples, 0.13%)</title><rect x="1130.3" y="819.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1133.3" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.07%)</title><rect x="1130.8" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.8" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.07%)</title><rect x="1131.9" y="819.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.9" y="830.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.06%)</title><rect x="1131.9" y="803.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.9" y="814.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (20 samples, 0.37%)</title><rect x="1132.7" y="819.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.7" y="830.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (9 samples, 0.17%)</title><rect x="1135.1" y="803.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.1" y="814.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.06%)</title><rect x="1135.8" y="787.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.8" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.06%)</title><rect x="1136.4" y="787.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.4" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (199 samples, 3.67%)</title><rect x="1137.3" y="851.0" width="43.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.3" y="862.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.06%)</title><rect x="1137.3" y="835.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.3" y="846.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.04%)</title><rect x="1137.5" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.5" y="830.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (86 samples, 1.59%)</title><rect x="1138.0" y="835.0" width="18.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (85 samples, 1.57%)</title><rect x="1138.2" y="819.0" width="18.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.07%)</title><rect x="1138.8" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.15%)</title><rect x="1139.7" y="803.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (5 samples, 0.09%)</title><rect x="1140.4" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.07%)</title><rect x="1140.6" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (4 samples, 0.07%)</title><rect x="1140.6" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (3 samples, 0.06%)</title><rect x="1140.8" y="739.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (3 samples, 0.06%)</title><rect x="1140.8" y="723.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.8" y="734.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (3 samples, 0.06%)</title><rect x="1140.8" y="707.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (52 samples, 0.96%)</title><rect x="1141.5" y="803.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (52 samples, 0.96%)</title><rect x="1141.5" y="787.0" width="11.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1141.7" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.04%)</title><rect x="1141.7" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (45 samples, 0.83%)</title><rect x="1142.1" y="771.0" width="9.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.07%)</title><rect x="1142.1" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.06%)</title><rect x="1143.0" y="755.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1143.2" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (37 samples, 0.68%)</title><rect x="1143.8" y="755.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 0.15%)</title><rect x="1144.1" y="739.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (28 samples, 0.52%)</title><rect x="1145.8" y="739.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (24 samples, 0.44%)</title><rect x="1146.7" y="723.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.7" y="734.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (18 samples, 0.33%)</title><rect x="1148.0" y="707.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.06%)</title><rect x="1151.9" y="771.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.04%)</title><rect x="1152.8" y="803.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (10 samples, 0.18%)</title><rect x="1153.2" y="803.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (4 samples, 0.07%)</title><rect x="1154.3" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.04%)</title><rect x="1154.7" y="771.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.06%)</title><rect x="1155.4" y="803.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.4" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.06%)</title><rect x="1155.4" y="787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.4" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.04%)</title><rect x="1156.3" y="803.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.3" y="814.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.04%)</title><rect x="1156.3" y="787.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="798.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.04%)</title><rect x="1156.3" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.3" y="782.0"></text>
</g>
<g>
<title>free_large (2 samples, 0.04%)</title><rect x="1156.3" y="755.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1159.3" y="766.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (2 samples, 0.04%)</title><rect x="1156.3" y="739.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1159.3" y="750.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (2 samples, 0.04%)</title><rect x="1156.3" y="723.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1159.3" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.06%)</title><rect x="1156.9" y="835.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.06%)</title><rect x="1156.9" y="819.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.9" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.07%)</title><rect x="1157.6" y="835.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (66 samples, 1.22%)</title><rect x="1158.4" y="835.0" width="14.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.4" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.04%)</title><rect x="1158.4" y="819.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.09%)</title><rect x="1159.1" y="819.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.1" y="830.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.06%)</title><rect x="1159.5" y="803.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.11%)</title><rect x="1160.2" y="819.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.06%)</title><rect x="1160.6" y="803.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.6" y="814.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.04%)</title><rect x="1160.8" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (46 samples, 0.85%)</title><rect x="1161.5" y="819.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (41 samples, 0.76%)</title><rect x="1162.4" y="803.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (36 samples, 0.66%)</title><rect x="1162.6" y="787.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.6" y="798.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (2 samples, 0.04%)</title><rect x="1162.6" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (5 samples, 0.09%)</title><rect x="1163.2" y="771.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (5 samples, 0.09%)</title><rect x="1163.2" y="755.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (5 samples, 0.09%)</title><rect x="1163.2" y="739.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (3 samples, 0.06%)</title><rect x="1163.7" y="723.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.06%)</title><rect x="1163.7" y="707.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (27 samples, 0.50%)</title><rect x="1164.5" y="771.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.09%)</title><rect x="1164.7" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (20 samples, 0.37%)</title><rect x="1165.8" y="755.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (18 samples, 0.33%)</title><rect x="1166.3" y="739.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.3" y="750.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (15 samples, 0.28%)</title><rect x="1166.9" y="723.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.04%)</title><rect x="1170.4" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.4" y="798.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.04%)</title><rect x="1170.4" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.04%)</title><rect x="1171.5" y="819.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.5" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.06%)</title><rect x="1171.9" y="819.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.06%)</title><rect x="1171.9" y="803.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (20 samples, 0.37%)</title><rect x="1173.0" y="835.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (18 samples, 0.33%)</title><rect x="1173.2" y="819.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.2" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (3 samples, 0.06%)</title><rect x="1174.1" y="803.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.07%)</title><rect x="1174.8" y="803.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.04%)</title><rect x="1175.2" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="798.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.06%)</title><rect x="1176.1" y="803.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="814.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.04%)</title><rect x="1176.3" y="787.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.04%)</title><rect x="1177.4" y="835.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (6 samples, 0.11%)</title><rect x="1177.8" y="835.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.11%)</title><rect x="1177.8" y="819.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.11%)</title><rect x="1177.8" y="803.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="814.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (4 samples, 0.07%)</title><rect x="1179.1" y="835.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="846.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.06%)</title><rect x="1179.1" y="819.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="830.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (3 samples, 0.06%)</title><rect x="1179.1" y="803.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.04%)</title><rect x="1179.3" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (2 samples, 0.04%)</title><rect x="1179.3" y="771.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.04%)</title><rect x="1180.2" y="835.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="846.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.04%)</title><rect x="1180.2" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="830.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.04%)</title><rect x="1180.2" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="814.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (6 samples, 0.11%)</title><rect x="1180.6" y="851.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="862.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (6 samples, 0.11%)</title><rect x="1180.6" y="835.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.11%)</title><rect x="1180.6" y="819.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.11%)</title><rect x="1180.6" y="803.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.11%)</title><rect x="1180.6" y="787.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.11%)</title><rect x="1180.6" y="771.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.11%)</title><rect x="1180.6" y="755.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.11%)</title><rect x="1180.6" y="739.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.11%)</title><rect x="1180.6" y="723.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.11%)</title><rect x="1180.6" y="707.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.11%)</title><rect x="1180.6" y="691.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.11%)</title><rect x="1180.6" y="675.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1181.1" y="659.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1181.1" y="643.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1181.1" y="627.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1181.1" y="611.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1181.1" y="595.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1181.3" y="579.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1181.3" y="563.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1181.3" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1181.3" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1181.3" y="515.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1181.3" y="499.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (2 samples, 0.04%)</title><rect x="1181.3" y="483.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (32 samples, 0.59%)</title><rect x="1182.4" y="851.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.4" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (32 samples, 0.59%)</title><rect x="1182.4" y="835.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (31 samples, 0.57%)</title><rect x="1182.4" y="819.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (30 samples, 0.55%)</title><rect x="1182.4" y="803.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (29 samples, 0.54%)</title><rect x="1182.4" y="787.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (27 samples, 0.50%)</title><rect x="1182.4" y="771.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (27 samples, 0.50%)</title><rect x="1182.4" y="755.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.4" y="766.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (2 samples, 0.04%)</title><rect x="1182.4" y="739.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.4" y="750.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (2 samples, 0.04%)</title><rect x="1182.4" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (25 samples, 0.46%)</title><rect x="1182.8" y="739.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (25 samples, 0.46%)</title><rect x="1182.8" y="723.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (23 samples, 0.42%)</title><rect x="1182.8" y="707.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (20 samples, 0.37%)</title><rect x="1183.0" y="691.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (20 samples, 0.37%)</title><rect x="1183.0" y="675.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 0.35%)</title><rect x="1183.0" y="659.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 0.35%)</title><rect x="1183.0" y="643.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 0.31%)</title><rect x="1183.0" y="627.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.22%)</title><rect x="1183.3" y="611.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.22%)</title><rect x="1183.3" y="595.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.22%)</title><rect x="1183.3" y="579.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.22%)</title><rect x="1183.3" y="563.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.22%)</title><rect x="1183.3" y="547.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.22%)</title><rect x="1183.3" y="531.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.22%)</title><rect x="1183.3" y="515.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.22%)</title><rect x="1183.3" y="499.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.22%)</title><rect x="1183.3" y="483.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.18%)</title><rect x="1183.3" y="467.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.13%)</title><rect x="1183.5" y="451.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.13%)</title><rect x="1183.5" y="435.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.13%)</title><rect x="1183.5" y="419.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.13%)</title><rect x="1183.5" y="403.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.11%)</title><rect x="1183.7" y="387.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.1" y="371.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1184.1" y="355.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1184.1" y="339.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1184.1" y="323.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.6" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.6" y="355.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1184.6" y="339.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1184.6" y="323.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1184.6" y="307.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1184.6" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.6" y="275.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1184.6" y="259.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1184.6" y="243.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1184.6" y="227.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1184.6" y="211.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.6" y="195.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1184.6" y="179.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1184.6" y="163.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1184.6" y="147.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.6" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1185.9" y="611.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1185.9" y="595.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1185.9" y="579.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1185.9" y="563.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1185.9" y="547.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1185.9" y="531.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1186.1" y="515.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1186.1" y="499.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1186.1" y="483.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1186.1" y="467.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1186.1" y="451.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1186.1" y="435.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1186.1" y="419.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1186.1" y="403.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1186.1" y="387.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1186.1" y="371.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.1" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1186.3" y="355.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1186.3" y="339.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1186.3" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1186.3" y="307.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1186.3" y="291.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1186.3" y="275.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1186.3" y="259.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1186.3" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1186.3" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1186.3" y="211.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1186.3" y="195.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1186.3" y="179.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.3" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1186.3" y="163.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1186.3" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1186.3" y="131.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1186.3" y="115.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.3" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1186.3" y="99.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.3" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1186.3" y="83.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.3" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1186.3" y="67.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.3" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1186.3" y="51.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.3" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1186.3" y="35.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1187.4" y="691.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1187.4" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1187.4" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1187.4" y="643.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1187.4" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1187.4" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1187.8" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1188.3" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1188.3" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1188.3" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1188.3" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1188.3" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1188.3" y="691.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1188.3" y="675.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1188.3" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1188.3" y="643.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1188.3" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1188.3" y="611.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1188.3" y="595.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1188.3" y="579.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1188.3" y="563.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1188.3" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1188.3" y="531.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1188.3" y="515.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1188.3" y="499.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1188.3" y="483.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1188.3" y="467.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="478.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.06%)</title><rect x="1189.3" y="851.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.3" y="862.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (3 samples, 0.06%)</title><rect x="1189.3" y="835.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.3" y="846.0"></text>
</g>
</g>
</svg>
